
ECET260_LAB4_ADCINT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006848  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080069d8  080069d8  000169d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000067c  20000000  08006d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d4  2000067c  0800739c  0002067c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000750  0800739c  00020750  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb45  00000000  00000000  000206ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fe6  00000000  00000000  0002f1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000594e  00000000  00000000  000311d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000840  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d18  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b98  00000000  00000000  00038080  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ea3  00000000  00000000  0003cc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040abb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002524  00000000  00000000  00040b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000067c 	.word	0x2000067c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080069c0 	.word	0x080069c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000680 	.word	0x20000680
 80001cc:	080069c0 	.word	0x080069c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <HAL_InitTick+0x40>)
{
 8000f54:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	b908      	cbnz	r0, 8000f5e <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f5e:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_InitTick+0x44>)
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f68:	6810      	ldr	r0, [r2, #0]
 8000f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f6e:	f000 fdfd 	bl	8001b6c <HAL_SYSTICK_Config>
 8000f72:	4604      	mov	r4, r0
 8000f74:	2800      	cmp	r0, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	2d0f      	cmp	r5, #15
 8000f7a:	d8ee      	bhi.n	8000f5a <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4629      	mov	r1, r5
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 fdb0 	bl	8001ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_InitTick+0x48>)
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000f8e:	bd38      	pop	{r3, r4, r5, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_Init>:
{
 8000f9c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 fd90 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff ffd3 	bl	8000f50 <HAL_InitTick>
 8000faa:	4604      	mov	r4, r0
 8000fac:	b918      	cbnz	r0, 8000fb6 <HAL_Init+0x1a>
    HAL_MspInit();
 8000fae:	f001 fea3 	bl	8002cf8 <HAL_MspInit>
}
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000fb6:	2401      	movs	r4, #1
 8000fb8:	e7fb      	b.n	8000fb2 <HAL_Init+0x16>
	...

08000fbc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fbc:	4a03      	ldr	r2, [pc, #12]	; (8000fcc <HAL_IncTick+0x10>)
 8000fbe:	4904      	ldr	r1, [pc, #16]	; (8000fd0 <HAL_IncTick+0x14>)
 8000fc0:	6813      	ldr	r3, [r2, #0]
 8000fc2:	6809      	ldr	r1, [r1, #0]
 8000fc4:	440b      	add	r3, r1
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200006d0 	.word	0x200006d0
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_GetTick+0x8>)
 8000fd6:	6818      	ldr	r0, [r3, #0]
}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200006d0 	.word	0x200006d0

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff fff6 	bl	8000fd4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	bf1c      	itt	ne
 8000fec:	4b05      	ldrne	r3, [pc, #20]	; (8001004 <HAL_Delay+0x24>)
 8000fee:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000ff0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	bf18      	it	ne
 8000ff4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	f7ff ffed 	bl	8000fd4 <HAL_GetTick>
 8000ffa:	1b40      	subs	r0, r0, r5
 8000ffc:	4284      	cmp	r4, r0
 8000ffe:	d8fa      	bhi.n	8000ff6 <HAL_Delay+0x16>
  {
  }
}
 8001000:	bd38      	pop	{r3, r4, r5, pc}
 8001002:	bf00      	nop
 8001004:	20000000 	.word	0x20000000

08001008 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001008:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800100a:	0dcc      	lsrs	r4, r1, #23
 800100c:	f004 0404 	and.w	r4, r4, #4
 8001010:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001012:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001016:	5823      	ldr	r3, [r4, r0]
 8001018:	2507      	movs	r5, #7
 800101a:	408d      	lsls	r5, r1
 800101c:	ea23 0305 	bic.w	r3, r3, r5
 8001020:	fa02 f101 	lsl.w	r1, r2, r1
 8001024:	4319      	orrs	r1, r3
 8001026:	5021      	str	r1, [r4, r0]
 8001028:	bd30      	pop	{r4, r5, pc}

0800102a <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800102a:	6880      	ldr	r0, [r0, #8]
}
 800102c:	f000 0001 	and.w	r0, r0, #1
 8001030:	4770      	bx	lr

08001032 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001032:	6880      	ldr	r0, [r0, #8]
}
 8001034:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001038:	4770      	bx	lr
	...

0800103c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800103e:	2300      	movs	r3, #0
 8001040:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001042:	4604      	mov	r4, r0
 8001044:	2800      	cmp	r0, #0
 8001046:	f000 8085 	beq.w	8001154 <HAL_ADC_Init+0x118>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800104a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800104c:	b925      	cbnz	r5, 8001058 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800104e:	f001 fe6b 	bl	8002d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001052:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001054:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001058:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800105a:	6883      	ldr	r3, [r0, #8]
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	d47b      	bmi.n	8001158 <HAL_ADC_Init+0x11c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001060:	6883      	ldr	r3, [r0, #8]
 8001062:	00dd      	lsls	r5, r3, #3
 8001064:	d57f      	bpl.n	8001166 <HAL_ADC_Init+0x12a>
 8001066:	6883      	ldr	r3, [r0, #8]
 8001068:	00d9      	lsls	r1, r3, #3
 800106a:	f140 808a 	bpl.w	8001182 <HAL_ADC_Init+0x146>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800106e:	2100      	movs	r1, #0

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001070:	f7ff ffdf 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001074:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001076:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800107c:	d167      	bne.n	800114e <HAL_ADC_Init+0x112>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800107e:	2800      	cmp	r0, #0
 8001080:	d165      	bne.n	800114e <HAL_ADC_Init+0x112>
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800108c:	6820      	ldr	r0, [r4, #0]
 800108e:	f7ff ffcc 	bl	800102a <LL_ADC_IsEnabled>
 8001092:	b998      	cbnz	r0, 80010bc <HAL_ADC_Init+0x80>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001094:	4852      	ldr	r0, [pc, #328]	; (80011e0 <HAL_ADC_Init+0x1a4>)
 8001096:	f7ff ffc8 	bl	800102a <LL_ADC_IsEnabled>
 800109a:	4603      	mov	r3, r0
 800109c:	4851      	ldr	r0, [pc, #324]	; (80011e4 <HAL_ADC_Init+0x1a8>)
 800109e:	f7ff ffc4 	bl	800102a <LL_ADC_IsEnabled>
 80010a2:	4303      	orrs	r3, r0
 80010a4:	4850      	ldr	r0, [pc, #320]	; (80011e8 <HAL_ADC_Init+0x1ac>)
 80010a6:	f7ff ffc0 	bl	800102a <LL_ADC_IsEnabled>
 80010aa:	4303      	orrs	r3, r0
 80010ac:	d106      	bne.n	80010bc <HAL_ADC_Init+0x80>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ae:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_ADC_Init+0x1b0>)
 80010b0:	6860      	ldr	r0, [r4, #4]
 80010b2:	6893      	ldr	r3, [r2, #8]
 80010b4:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80010b8:	4303      	orrs	r3, r0
 80010ba:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 80010bc:	68e0      	ldr	r0, [r4, #12]
 80010be:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010c0:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 80010c4:	4303      	orrs	r3, r0
 80010c6:	68a0      	ldr	r0, [r4, #8]
 80010c8:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010ca:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010cc:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 80010ce:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010d6:	bf02      	ittt	eq
 80010d8:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 80010da:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80010de:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80010e4:	b122      	cbz	r2, 80010f0 <HAL_ADC_Init+0xb4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 80010e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010e8:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80010ec:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80010ee:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80010f0:	6820      	ldr	r0, [r4, #0]
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <HAL_ADC_Init+0x1b4>)
 80010f4:	68c5      	ldr	r5, [r0, #12]
 80010f6:	402a      	ands	r2, r5
 80010f8:	4313      	orrs	r3, r2
 80010fa:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010fc:	f7ff ff99 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001100:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	0712      	lsls	r2, r2, #28
 8001106:	d546      	bpl.n	8001196 <HAL_ADC_Init+0x15a>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001108:	6922      	ldr	r2, [r4, #16]
 800110a:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800110c:	bf05      	ittet	eq
 800110e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001110:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001112:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001114:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001118:	bf06      	itte	eq
 800111a:	f020 000f 	biceq.w	r0, r0, #15
 800111e:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001120:	f022 020f 	bicne.w	r2, r2, #15
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001126:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001128:	f023 0303 	bic.w	r3, r3, #3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001132:	4608      	mov	r0, r1
 8001134:	b003      	add	sp, #12
 8001136:	bd30      	pop	{r4, r5, pc}
      wait_loop_index--;
 8001138:	9b01      	ldr	r3, [sp, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800113e:	9b01      	ldr	r3, [sp, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f9      	bne.n	8001138 <HAL_ADC_Init+0xfc>
 8001144:	e78f      	b.n	8001066 <HAL_ADC_Init+0x2a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	e045      	b.n	80011da <HAL_ADC_Init+0x19e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	f043 0310 	orr.w	r3, r3, #16
 8001152:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001154:	2101      	movs	r1, #1
 8001156:	e7ec      	b.n	8001132 <HAL_ADC_Init+0xf6>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001158:	6883      	ldr	r3, [r0, #8]
 800115a:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800115e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001162:	6083      	str	r3, [r0, #8]
 8001164:	e77c      	b.n	8001060 <HAL_ADC_Init+0x24>
  MODIFY_REG(ADCx->CR,
 8001166:	6883      	ldr	r3, [r0, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001168:	4a22      	ldr	r2, [pc, #136]	; (80011f4 <HAL_ADC_Init+0x1b8>)
 800116a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800116e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6083      	str	r3, [r0, #8]
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_ADC_Init+0x1bc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001180:	e7dc      	b.n	800113c <HAL_ADC_Init+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800118a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001192:	2101      	movs	r1, #1
 8001194:	e76c      	b.n	8001070 <HAL_ADC_Init+0x34>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001196:	2800      	cmp	r0, #0
 8001198:	d1b6      	bne.n	8001108 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800119a:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800119c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80011a0:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011a2:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011a4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80011a8:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011ac:	f020 0002 	bic.w	r0, r0, #2
 80011b0:	4302      	orrs	r2, r0
 80011b2:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 80011b4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	d1c4      	bne.n	8001146 <HAL_ADC_Init+0x10a>
        MODIFY_REG(hadc->Instance->CFGR2,
 80011bc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80011be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80011c0:	6918      	ldr	r0, [r3, #16]
 80011c2:	432a      	orrs	r2, r5
 80011c4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	432a      	orrs	r2, r5
 80011cc:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80011ce:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80011d2:	432a      	orrs	r2, r5
 80011d4:	f020 0004 	bic.w	r0, r0, #4
 80011d8:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	e794      	b.n	8001108 <HAL_ADC_Init+0xcc>
 80011de:	bf00      	nop
 80011e0:	50040000 	.word	0x50040000
 80011e4:	50040100 	.word	0x50040100
 80011e8:	50040200 	.word	0x50040200
 80011ec:	50040300 	.word	0x50040300
 80011f0:	fff0c007 	.word	0xfff0c007
 80011f4:	00030d40 	.word	0x00030d40
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80011fc:	6803      	ldr	r3, [r0, #0]
 80011fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8001200:	4770      	bx	lr

08001202 <HAL_ADC_LevelOutOfWindowCallback>:
 8001202:	4770      	bx	lr

08001204 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001204:	4770      	bx	lr
	...

08001208 <HAL_ADC_IRQHandler>:
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001208:	6803      	ldr	r3, [r0, #0]
{
 800120a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_isr = hadc->Instance->ISR;
 800120e:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001210:	685e      	ldr	r6, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001212:	4b8b      	ldr	r3, [pc, #556]	; (8001440 <HAL_ADC_IRQHandler+0x238>)
 8001214:	689f      	ldr	r7, [r3, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001216:	f015 0f02 	tst.w	r5, #2
{
 800121a:	4604      	mov	r4, r0
 800121c:	f007 071f 	and.w	r7, r7, #31
 8001220:	4698      	mov	r8, r3
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001222:	d00e      	beq.n	8001242 <HAL_ADC_IRQHandler+0x3a>
 8001224:	07b0      	lsls	r0, r6, #30
 8001226:	d50c      	bpl.n	8001242 <HAL_ADC_IRQHandler+0x3a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001228:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800122a:	06d9      	lsls	r1, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800122c:	bf5e      	ittt	pl
 800122e:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 8001230:	f443 6300 	orrpl.w	r3, r3, #2048	; 0x800
 8001234:	6563      	strpl	r3, [r4, #84]	; 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001236:	4620      	mov	r0, r4
 8001238:	f000 fbca 	bl	80019d0 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001242:	076a      	lsls	r2, r5, #29
 8001244:	d501      	bpl.n	800124a <HAL_ADC_IRQHandler+0x42>
 8001246:	0773      	lsls	r3, r6, #29
 8001248:	d403      	bmi.n	8001252 <HAL_ADC_IRQHandler+0x4a>
 800124a:	0728      	lsls	r0, r5, #28
 800124c:	d539      	bpl.n	80012c2 <HAL_ADC_IRQHandler+0xba>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800124e:	0731      	lsls	r1, r6, #28
 8001250:	d537      	bpl.n	80012c2 <HAL_ADC_IRQHandler+0xba>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001252:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001254:	6820      	ldr	r0, [r4, #0]
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001256:	06da      	lsls	r2, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001258:	bf5e      	ittt	pl
 800125a:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 800125c:	f443 7300 	orrpl.w	r3, r3, #512	; 0x200
 8001260:	6563      	strpl	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001262:	68c3      	ldr	r3, [r0, #12]
 8001264:	f413 6f40 	tst.w	r3, #3072	; 0xc00
 8001268:	d125      	bne.n	80012b6 <HAL_ADC_IRQHandler+0xae>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800126a:	4b76      	ldr	r3, [pc, #472]	; (8001444 <HAL_ADC_IRQHandler+0x23c>)
 800126c:	4298      	cmp	r0, r3
 800126e:	d108      	bne.n	8001282 <HAL_ADC_IRQHandler+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001270:	2f09      	cmp	r7, #9
 8001272:	bf9d      	ittte	ls
 8001274:	f240 2321 	movwls	r3, #545	; 0x221
 8001278:	40fb      	lsrls	r3, r7
 800127a:	43db      	mvnls	r3, r3
 800127c:	2301      	movhi	r3, #1
 800127e:	07da      	lsls	r2, r3, #31
 8001280:	d455      	bmi.n	800132e <HAL_ADC_IRQHandler+0x126>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001282:	68c3      	ldr	r3, [r0, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001284:	049b      	lsls	r3, r3, #18
 8001286:	d416      	bmi.n	80012b6 <HAL_ADC_IRQHandler+0xae>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001288:	6803      	ldr	r3, [r0, #0]
 800128a:	0719      	lsls	r1, r3, #28
 800128c:	d513      	bpl.n	80012b6 <HAL_ADC_IRQHandler+0xae>
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800128e:	f7ff fed0 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
 8001292:	2800      	cmp	r0, #0
 8001294:	d14e      	bne.n	8001334 <HAL_ADC_IRQHandler+0x12c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001296:	6822      	ldr	r2, [r4, #0]
 8001298:	6853      	ldr	r3, [r2, #4]
 800129a:	f023 030c 	bic.w	r3, r3, #12
 800129e:	6053      	str	r3, [r2, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a6:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80012a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012aa:	04da      	lsls	r2, r3, #19
 80012ac:	d403      	bmi.n	80012b6 <HAL_ADC_IRQHandler+0xae>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80012b6:	4620      	mov	r0, r4
 80012b8:	f001 fd16 	bl	8002ce8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012bc:	6823      	ldr	r3, [r4, #0]
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80012c2:	06ab      	lsls	r3, r5, #26
 80012c4:	d501      	bpl.n	80012ca <HAL_ADC_IRQHandler+0xc2>
 80012c6:	06b0      	lsls	r0, r6, #26
 80012c8:	d403      	bmi.n	80012d2 <HAL_ADC_IRQHandler+0xca>
 80012ca:	0669      	lsls	r1, r5, #25
 80012cc:	d558      	bpl.n	8001380 <HAL_ADC_IRQHandler+0x178>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80012ce:	0672      	lsls	r2, r6, #25
 80012d0:	d556      	bpl.n	8001380 <HAL_ADC_IRQHandler+0x178>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012d4:	4a5b      	ldr	r2, [pc, #364]	; (8001444 <HAL_ADC_IRQHandler+0x23c>)
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012d6:	06db      	lsls	r3, r3, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012d8:	bf5e      	ittt	pl
 80012da:	6d63      	ldrpl	r3, [r4, #84]	; 0x54
 80012dc:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 80012e0:	6563      	strpl	r3, [r4, #84]	; 0x54
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80012e2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012e6:	68d9      	ldr	r1, [r3, #12]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80012e8:	4293      	cmp	r3, r2
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012ea:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012ee:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80012f2:	d103      	bne.n	80012fc <HAL_ADC_IRQHandler+0xf4>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012f4:	b117      	cbz	r7, 80012fc <HAL_ADC_IRQHandler+0xf4>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80012f6:	1fba      	subs	r2, r7, #6
 80012f8:	2a01      	cmp	r2, #1
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_IRQHandler+0x13e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80012fc:	68da      	ldr	r2, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80012fe:	b128      	cbz	r0, 800130c <HAL_ADC_IRQHandler+0x104>
 8001300:	0190      	lsls	r0, r2, #6
 8001302:	d437      	bmi.n	8001374 <HAL_ADC_IRQHandler+0x16c>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8001304:	2900      	cmp	r1, #0
 8001306:	d135      	bne.n	8001374 <HAL_ADC_IRQHandler+0x16c>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8001308:	0491      	lsls	r1, r2, #18
 800130a:	d433      	bmi.n	8001374 <HAL_ADC_IRQHandler+0x16c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	0648      	lsls	r0, r1, #25
 8001310:	d530      	bpl.n	8001374 <HAL_ADC_IRQHandler+0x16c>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001312:	0291      	lsls	r1, r2, #10
 8001314:	d42e      	bmi.n	8001374 <HAL_ADC_IRQHandler+0x16c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	0712      	lsls	r2, r2, #28
 800131a:	d51c      	bpl.n	8001356 <HAL_ADC_IRQHandler+0x14e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800131e:	f043 0310 	orr.w	r3, r3, #16
 8001322:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001324:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	65a3      	str	r3, [r4, #88]	; 0x58
 800132c:	e022      	b.n	8001374 <HAL_ADC_IRQHandler+0x16c>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800132e:	4b46      	ldr	r3, [pc, #280]	; (8001448 <HAL_ADC_IRQHandler+0x240>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	e7a7      	b.n	8001284 <HAL_ADC_IRQHandler+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001334:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6563      	str	r3, [r4, #84]	; 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	65a3      	str	r3, [r4, #88]	; 0x58
 8001344:	e7b7      	b.n	80012b6 <HAL_ADC_IRQHandler+0xae>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001346:	4a40      	ldr	r2, [pc, #256]	; (8001448 <HAL_ADC_IRQHandler+0x240>)
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	e7d8      	b.n	80012fe <HAL_ADC_IRQHandler+0xf6>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f013 0f01 	tst.w	r3, #1
 8001354:	e04c      	b.n	80013f0 <HAL_ADC_IRQHandler+0x1e8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800135c:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800135e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001364:	6563      	str	r3, [r4, #84]	; 0x54
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001366:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001368:	05db      	lsls	r3, r3, #23
 800136a:	d403      	bmi.n	8001374 <HAL_ADC_IRQHandler+0x16c>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800136c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001374:	4620      	mov	r0, r4
 8001376:	f000 fb27 	bl	80019c8 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	2260      	movs	r2, #96	; 0x60
 800137e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001380:	0628      	lsls	r0, r5, #24
 8001382:	d50b      	bpl.n	800139c <HAL_ADC_IRQHandler+0x194>
 8001384:	0631      	lsls	r1, r6, #24
 8001386:	d509      	bpl.n	800139c <HAL_ADC_IRQHandler+0x194>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001388:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800138a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138e:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001390:	4620      	mov	r0, r4
 8001392:	f7ff ff36 	bl	8001202 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800139c:	05ea      	lsls	r2, r5, #23
 800139e:	d50c      	bpl.n	80013ba <HAL_ADC_IRQHandler+0x1b2>
 80013a0:	05f3      	lsls	r3, r6, #23
 80013a2:	d50a      	bpl.n	80013ba <HAL_ADC_IRQHandler+0x1b2>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80013a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013aa:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80013ac:	4620      	mov	r0, r4
 80013ae:	f000 fb0d 	bl	80019cc <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013b8:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80013ba:	05a8      	lsls	r0, r5, #22
 80013bc:	d50c      	bpl.n	80013d8 <HAL_ADC_IRQHandler+0x1d0>
 80013be:	05b1      	lsls	r1, r6, #22
 80013c0:	d50a      	bpl.n	80013d8 <HAL_ADC_IRQHandler+0x1d0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80013c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80013c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c8:	6563      	str	r3, [r4, #84]	; 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80013ca:	4620      	mov	r0, r4
 80013cc:	f000 faff 	bl	80019ce <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80013d8:	06ea      	lsls	r2, r5, #27
 80013da:	d50d      	bpl.n	80013f8 <HAL_ADC_IRQHandler+0x1f0>
 80013dc:	06f3      	lsls	r3, r6, #27
 80013de:	d50b      	bpl.n	80013f8 <HAL_ADC_IRQHandler+0x1f0>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013e2:	b1f3      	cbz	r3, 8001422 <HAL_ADC_IRQHandler+0x21a>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80013e4:	2f00      	cmp	r7, #0
 80013e6:	d0b1      	beq.n	800134c <HAL_ADC_IRQHandler+0x144>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80013e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80013ec:	f413 4f60 	tst.w	r3, #57344	; 0xe000
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80013f0:	d117      	bne.n	8001422 <HAL_ADC_IRQHandler+0x21a>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	2210      	movs	r2, #16
 80013f6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80013f8:	0568      	lsls	r0, r5, #21
 80013fa:	d51e      	bpl.n	800143a <HAL_ADC_IRQHandler+0x232>
 80013fc:	0571      	lsls	r1, r6, #21
 80013fe:	d51c      	bpl.n	800143a <HAL_ADC_IRQHandler+0x232>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001400:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001408:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001416:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001418:	601a      	str	r2, [r3, #0]
}
 800141a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800141e:	f000 bad4 	b.w	80019ca <HAL_ADCEx_InjectedQueueOverflowCallback>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001422:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001424:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001428:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800142a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	65a3      	str	r3, [r4, #88]	; 0x58
      HAL_ADC_ErrorCallback(hadc);
 8001432:	4620      	mov	r0, r4
 8001434:	f7ff fee6 	bl	8001204 <HAL_ADC_ErrorCallback>
 8001438:	e7db      	b.n	80013f2 <HAL_ADC_IRQHandler+0x1ea>
 800143a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143e:	bf00      	nop
 8001440:	50040300 	.word	0x50040300
 8001444:	50040100 	.word	0x50040100
 8001448:	50040000 	.word	0x50040000

0800144c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800144c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001452:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001456:	2b01      	cmp	r3, #1
{
 8001458:	4605      	mov	r5, r0
 800145a:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 800145c:	f000 8184 	beq.w	8001768 <HAL_ADC_ConfigChannel+0x31c>
 8001460:	2301      	movs	r3, #1
 8001462:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001466:	6800      	ldr	r0, [r0, #0]
 8001468:	f7ff fde3 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
 800146c:	2800      	cmp	r0, #0
 800146e:	f040 8175 	bne.w	800175c <HAL_ADC_ConfigChannel+0x310>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001472:	684b      	ldr	r3, [r1, #4]
 8001474:	2b05      	cmp	r3, #5
 8001476:	d808      	bhi.n	800148a <HAL_ADC_ConfigChannel+0x3e>
    {
      switch (sConfig->Rank)
 8001478:	3b02      	subs	r3, #2
 800147a:	2b03      	cmp	r3, #3
 800147c:	d866      	bhi.n	800154c <HAL_ADC_ConfigChannel+0x100>
 800147e:	e8df f003 	tbb	[pc, r3]
 8001482:	5e02      	.short	0x5e02
 8001484:	6260      	.short	0x6260
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001486:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 8001488:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800148a:	6862      	ldr	r2, [r4, #4]
 800148c:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 800148e:	6823      	ldr	r3, [r4, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001490:	0991      	lsrs	r1, r2, #6
 8001492:	f001 010c 	and.w	r1, r1, #12
 8001496:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800149a:	f002 021f 	and.w	r2, r2, #31
 800149e:	59ce      	ldr	r6, [r1, r7]
 80014a0:	f04f 0e1f 	mov.w	lr, #31
 80014a4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80014a8:	4093      	lsls	r3, r2
 80014aa:	fa0e f202 	lsl.w	r2, lr, r2
 80014ae:	ea26 0202 	bic.w	r2, r6, r2
 80014b2:	4313      	orrs	r3, r2
 80014b4:	51cb      	str	r3, [r1, r7]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014b6:	f7ff fdbc 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014ba:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	0711      	lsls	r1, r2, #28
 80014c0:	f140 8154 	bpl.w	800176c <HAL_ADC_ConfigChannel+0x320>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014c4:	6828      	ldr	r0, [r5, #0]
 80014c6:	f7ff fdb0 	bl	800102a <LL_ADC_IsEnabled>
 80014ca:	2800      	cmp	r0, #0
 80014cc:	f040 80d3 	bne.w	8001676 <HAL_ADC_ConfigChannel+0x22a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014d0:	68e6      	ldr	r6, [r4, #12]
 80014d2:	6828      	ldr	r0, [r5, #0]
 80014d4:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80014d6:	4aba      	ldr	r2, [pc, #744]	; (80017c0 <HAL_ADC_ConfigChannel+0x374>)
 80014d8:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80014dc:	f006 0e18 	and.w	lr, r6, #24
 80014e0:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80014e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80014e8:	401a      	ands	r2, r3
 80014ea:	ea21 0107 	bic.w	r1, r1, r7
 80014ee:	430a      	orrs	r2, r1
 80014f0:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014f4:	4ab3      	ldr	r2, [pc, #716]	; (80017c4 <HAL_ADC_ConfigChannel+0x378>)
 80014f6:	4296      	cmp	r6, r2
 80014f8:	f040 80bd 	bne.w	8001676 <HAL_ADC_ConfigChannel+0x22a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014fc:	2f00      	cmp	r7, #0
 80014fe:	f040 808f 	bne.w	8001620 <HAL_ADC_ConfigChannel+0x1d4>
 8001502:	0e9e      	lsrs	r6, r3, #26
 8001504:	3601      	adds	r6, #1
 8001506:	f006 021f 	and.w	r2, r6, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800150a:	2a09      	cmp	r2, #9
 800150c:	f04f 0101 	mov.w	r1, #1
 8001510:	ea4f 6686 	mov.w	r6, r6, lsl #26
 8001514:	f240 809e 	bls.w	8001654 <HAL_ADC_ConfigChannel+0x208>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001518:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 800151c:	4091      	lsls	r1, r2
 800151e:	ea41 0206 	orr.w	r2, r1, r6
 8001522:	2f00      	cmp	r7, #0
 8001524:	f040 80c7 	bne.w	80016b6 <HAL_ADC_ConfigChannel+0x26a>
 8001528:	0e9b      	lsrs	r3, r3, #26
 800152a:	3301      	adds	r3, #1
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001534:	391e      	subs	r1, #30
 8001536:	0509      	lsls	r1, r1, #20
 8001538:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800153c:	e097      	b.n	800166e <HAL_ADC_ConfigChannel+0x222>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 800153e:	2312      	movs	r3, #18
 8001540:	e7a2      	b.n	8001488 <HAL_ADC_ConfigChannel+0x3c>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001542:	2318      	movs	r3, #24
 8001544:	e7a0      	b.n	8001488 <HAL_ADC_ConfigChannel+0x3c>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	e79d      	b.n	8001488 <HAL_ADC_ConfigChannel+0x3c>
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 800154c:	2306      	movs	r3, #6
 800154e:	e79b      	b.n	8001488 <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001550:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001552:	6e19      	ldr	r1, [r3, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001554:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8001558:	f3c1 6184 	ubfx	r1, r1, #26, #5
 800155c:	2e00      	cmp	r6, #0
 800155e:	d13e      	bne.n	80015de <HAL_ADC_ConfigChannel+0x192>
 8001560:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001564:	428a      	cmp	r2, r1
  MODIFY_REG(*preg,
 8001566:	bf02      	ittt	eq
 8001568:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800156a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800156e:	661a      	streq	r2, [r3, #96]	; 0x60
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001570:	6e5a      	ldr	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001572:	6822      	ldr	r2, [r4, #0]
 8001574:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8001576:	f3c2 0712 	ubfx	r7, r2, #0, #19
 800157a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800157e:	f100 010c 	add.w	r1, r0, #12
 8001582:	bb8f      	cbnz	r7, 80015e8 <HAL_ADC_ConfigChannel+0x19c>
 8001584:	f3c2 6784 	ubfx	r7, r2, #26, #5
 8001588:	42be      	cmp	r6, r7
 800158a:	f040 8112 	bne.w	80017b2 <HAL_ADC_ConfigChannel+0x366>
  MODIFY_REG(*preg,
 800158e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001590:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001594:	665a      	str	r2, [r3, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001596:	6822      	ldr	r2, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001598:	6883      	ldr	r3, [r0, #8]
 800159a:	6883      	ldr	r3, [r0, #8]
 800159c:	f3c2 0712 	ubfx	r7, r2, #0, #19
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015a0:	f100 0608 	add.w	r6, r0, #8
 80015a4:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80015a8:	bb57      	cbnz	r7, 8001600 <HAL_ADC_ConfigChannel+0x1b4>
 80015aa:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80015ae:	4293      	cmp	r3, r2
 80015b0:	f040 811c 	bne.w	80017ec <HAL_ADC_ConfigChannel+0x3a0>
  MODIFY_REG(*preg,
 80015b4:	6833      	ldr	r3, [r6, #0]
 80015b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	6033      	str	r3, [r6, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015bc:	68c3      	ldr	r3, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015be:	6823      	ldr	r3, [r4, #0]
 80015c0:	68c2      	ldr	r2, [r0, #12]
 80015c2:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80015c6:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80015ca:	bb20      	cbnz	r0, 8001616 <HAL_ADC_ConfigChannel+0x1ca>
 80015cc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80015d0:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 80015d2:	bf02      	ittt	eq
 80015d4:	680b      	ldreq	r3, [r1, #0]
 80015d6:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 80015da:	600b      	streq	r3, [r1, #0]
 80015dc:	e772      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x78>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	fa92 f2a2 	rbit	r2, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015e2:	fab2 f282 	clz	r2, r2
 80015e6:	e7bd      	b.n	8001564 <HAL_ADC_ConfigChannel+0x118>
 80015e8:	fa92 f7a2 	rbit	r7, r2
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015ec:	fab7 f787 	clz	r7, r7
 80015f0:	42be      	cmp	r6, r7
 80015f2:	d0cc      	beq.n	800158e <HAL_ADC_ConfigChannel+0x142>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015f4:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015f8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80015fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80015fc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001600:	fa92 f2a2 	rbit	r2, r2
 8001604:	fab2 f282 	clz	r2, r2
 8001608:	429a      	cmp	r2, r3
 800160a:	d0d3      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x168>
 800160c:	68c3      	ldr	r3, [r0, #12]
 800160e:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001616:	fa93 f3a3 	rbit	r3, r3
 800161a:	fab3 f383 	clz	r3, r3
 800161e:	e7d7      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x184>
 8001620:	fa93 f2a3 	rbit	r2, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001624:	fab2 f282 	clz	r2, r2
 8001628:	3201      	adds	r2, #1
 800162a:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800162e:	2a09      	cmp	r2, #9
 8001630:	d830      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x248>
 8001632:	fa93 f6a3 	rbit	r6, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001636:	fab6 f686 	clz	r6, r6
 800163a:	3601      	adds	r6, #1
 800163c:	06b6      	lsls	r6, r6, #26
 800163e:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001642:	fa93 f1a3 	rbit	r1, r3
 8001646:	fab1 f181 	clz	r1, r1
 800164a:	3101      	adds	r1, #1
 800164c:	f001 021f 	and.w	r2, r1, #31
 8001650:	2101      	movs	r1, #1
 8001652:	e001      	b.n	8001658 <HAL_ADC_ConfigChannel+0x20c>
 8001654:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 8001658:	4091      	lsls	r1, r2
 800165a:	ea41 0206 	orr.w	r2, r1, r6
 800165e:	b9a7      	cbnz	r7, 800168a <HAL_ADC_ConfigChannel+0x23e>
 8001660:	0e99      	lsrs	r1, r3, #26
 8001662:	3101      	adds	r1, #1
 8001664:	f001 011f 	and.w	r1, r1, #31
 8001668:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800166c:	0509      	lsls	r1, r1, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800166e:	4311      	orrs	r1, r2
 8001670:	68a2      	ldr	r2, [r4, #8]
 8001672:	f7ff fcc9 	bl	8001008 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001676:	6822      	ldr	r2, [r4, #0]
 8001678:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HAL_ADC_ConfigChannel+0x37c>)
 800167a:	421a      	tst	r2, r3
 800167c:	d120      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x274>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800167e:	2000      	movs	r0, #0

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001680:	2300      	movs	r3, #0
 8001682:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 8001686:	b003      	add	sp, #12
 8001688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800168a:	fa93 f1a3 	rbit	r1, r3
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800168e:	fab1 f181 	clz	r1, r1
 8001692:	e7e6      	b.n	8001662 <HAL_ADC_ConfigChannel+0x216>
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	fab2 f282 	clz	r2, r2
 800169c:	3201      	adds	r2, #1
 800169e:	0692      	lsls	r2, r2, #26
 80016a0:	f002 46f8 	and.w	r6, r2, #2080374784	; 0x7c000000
 80016a4:	fa93 f1a3 	rbit	r1, r3
 80016a8:	fab1 f181 	clz	r1, r1
 80016ac:	3101      	adds	r1, #1
 80016ae:	f001 021f 	and.w	r2, r1, #31
 80016b2:	2101      	movs	r1, #1
 80016b4:	e732      	b.n	800151c <HAL_ADC_ConfigChannel+0xd0>
 80016b6:	fa93 f3a3 	rbit	r3, r3
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	e734      	b.n	800152a <HAL_ADC_ConfigChannel+0xde>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016c0:	4942      	ldr	r1, [pc, #264]	; (80017cc <HAL_ADC_ConfigChannel+0x380>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_ADC_ConfigChannel+0x384>)
 80016c4:	6888      	ldr	r0, [r1, #8]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80016cc:	460c      	mov	r4, r1
 80016ce:	d11e      	bne.n	800170e <HAL_ADC_ConfigChannel+0x2c2>
 80016d0:	0202      	lsls	r2, r0, #8
 80016d2:	d4d4      	bmi.n	800167e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	4a3f      	ldr	r2, [pc, #252]	; (80017d4 <HAL_ADC_ConfigChannel+0x388>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0x298>
 80016dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d1cc      	bne.n	800167e <HAL_ADC_ConfigChannel+0x232>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e4:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80016e6:	4a3c      	ldr	r2, [pc, #240]	; (80017d8 <HAL_ADC_ConfigChannel+0x38c>)
 80016e8:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80016ec:	4333      	orrs	r3, r6
 80016ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f2:	60a3      	str	r3, [r4, #8]
 80016f4:	4b39      	ldr	r3, [pc, #228]	; (80017dc <HAL_ADC_ConfigChannel+0x390>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80016fc:	230c      	movs	r3, #12
 80016fe:	4353      	muls	r3, r2
            wait_loop_index--;
 8001700:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001702:	9b01      	ldr	r3, [sp, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ba      	beq.n	800167e <HAL_ADC_ConfigChannel+0x232>
            wait_loop_index--;
 8001708:	9b01      	ldr	r3, [sp, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	e7f8      	b.n	8001700 <HAL_ADC_ConfigChannel+0x2b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_ADC_ConfigChannel+0x394>)
 8001710:	429a      	cmp	r2, r3
 8001712:	d111      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x2ec>
 8001714:	01c3      	lsls	r3, r0, #7
 8001716:	d4b2      	bmi.n	800167e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <HAL_ADC_ConfigChannel+0x388>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x2dc>
 8001720:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001724:	4293      	cmp	r3, r2
 8001726:	d1aa      	bne.n	800167e <HAL_ADC_ConfigChannel+0x232>
 8001728:	68a3      	ldr	r3, [r4, #8]
 800172a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800172e:	4333      	orrs	r3, r6
 8001730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001734:	60a3      	str	r3, [r4, #8]
 8001736:	e7a2      	b.n	800167e <HAL_ADC_ConfigChannel+0x232>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <HAL_ADC_ConfigChannel+0x398>)
 800173a:	429a      	cmp	r2, r3
 800173c:	d19f      	bne.n	800167e <HAL_ADC_ConfigChannel+0x232>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800173e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001742:	d19c      	bne.n	800167e <HAL_ADC_ConfigChannel+0x232>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001744:	682a      	ldr	r2, [r5, #0]
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <HAL_ADC_ConfigChannel+0x388>)
 8001748:	429a      	cmp	r2, r3
 800174a:	d198      	bne.n	800167e <HAL_ADC_ConfigChannel+0x232>
 800174c:	688b      	ldr	r3, [r1, #8]
 800174e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001752:	4333      	orrs	r3, r6
 8001754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001758:	608b      	str	r3, [r1, #8]
 800175a:	e791      	b.n	8001680 <HAL_ADC_ConfigChannel+0x234>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001764:	4618      	mov	r0, r3
 8001766:	e78b      	b.n	8001680 <HAL_ADC_ConfigChannel+0x234>
  __HAL_LOCK(hadc);
 8001768:	2002      	movs	r0, #2
 800176a:	e78c      	b.n	8001686 <HAL_ADC_ConfigChannel+0x23a>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800176c:	2800      	cmp	r0, #0
 800176e:	f47f aea9 	bne.w	80014c4 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001772:	4618      	mov	r0, r3
 8001774:	68a2      	ldr	r2, [r4, #8]
 8001776:	6821      	ldr	r1, [r4, #0]
 8001778:	f7ff fc46 	bl	8001008 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800177c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800177e:	682b      	ldr	r3, [r5, #0]
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001784:	2e04      	cmp	r6, #4
 8001786:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800178a:	f43f aee1 	beq.w	8001550 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800178e:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8001792:	0059      	lsls	r1, r3, #1
 8001794:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 8001796:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800179a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800179e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017a2:	408b      	lsls	r3, r1
 80017a4:	4313      	orrs	r3, r2
 80017a6:	4a10      	ldr	r2, [pc, #64]	; (80017e8 <HAL_ADC_ConfigChannel+0x39c>)
 80017a8:	403a      	ands	r2, r7
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 80017b0:	e688      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x78>
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017b2:	f103 0668 	add.w	r6, r3, #104	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017b6:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 80017b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017ba:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80017be:	e6f4      	b.n	80015aa <HAL_ADC_ConfigChannel+0x15e>
 80017c0:	0007ffff 	.word	0x0007ffff
 80017c4:	407f0000 	.word	0x407f0000
 80017c8:	80080000 	.word	0x80080000
 80017cc:	50040300 	.word	0x50040300
 80017d0:	c7520000 	.word	0xc7520000
 80017d4:	50040000 	.word	0x50040000
 80017d8:	00030d40 	.word	0x00030d40
 80017dc:	20000008 	.word	0x20000008
 80017e0:	cb840000 	.word	0xcb840000
 80017e4:	80000001 	.word	0x80000001
 80017e8:	03fff000 	.word	0x03fff000
 80017ec:	68c3      	ldr	r3, [r0, #12]
 80017ee:	68c2      	ldr	r2, [r0, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80017f6:	e6e9      	b.n	80015cc <HAL_ADC_ConfigChannel+0x180>

080017f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	4604      	mov	r4, r0

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017fc:	6800      	ldr	r0, [r0, #0]
 80017fe:	f7ff fc14 	bl	800102a <LL_ADC_IsEnabled>
 8001802:	b108      	cbz	r0, 8001808 <ADC_Enable+0x10>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
 8001806:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001808:	6822      	ldr	r2, [r4, #0]
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <ADC_Enable+0x68>)
 800180c:	6891      	ldr	r1, [r2, #8]
 800180e:	4219      	tst	r1, r3
 8001810:	d009      	beq.n	8001826 <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
 8001824:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8001826:	6893      	ldr	r3, [r2, #8]
 8001828:	4d0e      	ldr	r5, [pc, #56]	; (8001864 <ADC_Enable+0x6c>)
 800182a:	402b      	ands	r3, r5
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8001832:	f7ff fbcf 	bl	8000fd4 <HAL_GetTick>
 8001836:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001838:	6820      	ldr	r0, [r4, #0]
 800183a:	6803      	ldr	r3, [r0, #0]
 800183c:	07db      	lsls	r3, r3, #31
 800183e:	d4e1      	bmi.n	8001804 <ADC_Enable+0xc>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001840:	f7ff fbf3 	bl	800102a <LL_ADC_IsEnabled>
 8001844:	b928      	cbnz	r0, 8001852 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	6893      	ldr	r3, [r2, #8]
 800184a:	402b      	ands	r3, r5
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001852:	f7ff fbbf 	bl	8000fd4 <HAL_GetTick>
 8001856:	1b80      	subs	r0, r0, r6
 8001858:	2802      	cmp	r0, #2
 800185a:	d9ed      	bls.n	8001838 <ADC_Enable+0x40>
 800185c:	e7d9      	b.n	8001812 <ADC_Enable+0x1a>
 800185e:	bf00      	nop
 8001860:	8000003f 	.word	0x8000003f
 8001864:	7fffffc0 	.word	0x7fffffc0

08001868 <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_ADC_Start_IT+0x144>)
{
 800186a:	b570      	push	{r4, r5, r6, lr}
 800186c:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800186e:	6800      	ldr	r0, [r0, #0]
 8001870:	689e      	ldr	r6, [r3, #8]
 8001872:	f7ff fbde 	bl	8001032 <LL_ADC_REG_IsConversionOngoing>
 8001876:	4605      	mov	r5, r0
 8001878:	2800      	cmp	r0, #0
 800187a:	f040 8090 	bne.w	800199e <HAL_ADC_Start_IT+0x136>
    __HAL_LOCK(hadc);
 800187e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001882:	2b01      	cmp	r3, #1
 8001884:	f000 808b 	beq.w	800199e <HAL_ADC_Start_IT+0x136>
 8001888:	2301      	movs	r3, #1
 800188a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff ffb2 	bl	80017f8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001894:	2800      	cmp	r0, #0
 8001896:	d17f      	bne.n	8001998 <HAL_ADC_Start_IT+0x130>
      ADC_STATE_CLR_SET(hadc->State,
 8001898:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800189a:	4a45      	ldr	r2, [pc, #276]	; (80019b0 <HAL_ADC_Start_IT+0x148>)
      ADC_STATE_CLR_SET(hadc->State,
 800189c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	f006 011f 	and.w	r1, r6, #31
 80018b2:	d076      	beq.n	80019a2 <HAL_ADC_Start_IT+0x13a>
 80018b4:	461e      	mov	r6, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018b8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018bc:	6562      	str	r2, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018be:	6d62      	ldr	r2, [r4, #84]	; 0x54
      switch (hadc->Init.EOCSelection)
 80018c0:	6965      	ldr	r5, [r4, #20]
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018c2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018c6:	bf1c      	itt	ne
 80018c8:	6da2      	ldrne	r2, [r4, #88]	; 0x58
 80018ca:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80018ce:	65a2      	str	r2, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018d0:	221c      	movs	r2, #28
 80018d2:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	f022 021c 	bic.w	r2, r2, #28
 80018e0:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80018e2:	685a      	ldr	r2, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80018e4:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80018e6:	bf0c      	ite	eq
 80018e8:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80018ec:	f042 0204 	orrne.w	r2, r2, #4
 80018f0:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80018f4:	b91a      	cbnz	r2, 80018fe <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	f042 0210 	orr.w	r2, r2, #16
 80018fc:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018fe:	42b3      	cmp	r3, r6
 8001900:	d008      	beq.n	8001914 <HAL_ADC_Start_IT+0xac>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001902:	2909      	cmp	r1, #9
 8001904:	bf9d      	ittte	ls
 8001906:	f240 2221 	movwls	r2, #545	; 0x221
 800190a:	40ca      	lsrls	r2, r1
 800190c:	43d2      	mvnls	r2, r2
 800190e:	2201      	movhi	r2, #1
 8001910:	07d2      	lsls	r2, r2, #31
 8001912:	d422      	bmi.n	800195a <HAL_ADC_Start_IT+0xf2>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	0191      	lsls	r1, r2, #6
 8001918:	d516      	bpl.n	8001948 <HAL_ADC_Start_IT+0xe0>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800191a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800191c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001924:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001926:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8001928:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800192a:	bf0b      	itete	eq
 800192c:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001930:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001934:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001936:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001938:	bf0b      	itete	eq
 800193a:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800193c:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800193e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001942:	f042 0220 	orrne.w	r2, r2, #32
 8001946:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800194e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001952:	f042 0204 	orr.w	r2, r2, #4
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800195a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800195c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001960:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001962:	68f2      	ldr	r2, [r6, #12]
 8001964:	0192      	lsls	r2, r2, #6
 8001966:	d520      	bpl.n	80019aa <HAL_ADC_Start_IT+0x142>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001968:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800196a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800196e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001972:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001974:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8001976:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001978:	bf0b      	itete	eq
 800197a:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800197e:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001982:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001984:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001986:	bf0b      	itete	eq
 8001988:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800198a:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800198c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001990:	f042 0220 	orrne.w	r2, r2, #32
 8001994:	605a      	str	r2, [r3, #4]
              break;
 8001996:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8001998:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800199c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = HAL_BUSY;
 800199e:	2002      	movs	r0, #2
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019a2:	4e04      	ldr	r6, [pc, #16]	; (80019b4 <HAL_ADC_Start_IT+0x14c>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019a4:	2900      	cmp	r1, #0
 80019a6:	d086      	beq.n	80018b6 <HAL_ADC_Start_IT+0x4e>
 80019a8:	e789      	b.n	80018be <HAL_ADC_Start_IT+0x56>
}
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	50040300 	.word	0x50040300
 80019b0:	50040100 	.word	0x50040100
 80019b4:	50040000 	.word	0x50040000

080019b8 <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019b8:	6880      	ldr	r0, [r0, #8]
}
 80019ba:	f000 0001 	and.w	r0, r0, #1
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019c0:	6880      	ldr	r0, [r0, #8]
}
 80019c2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADCEx_InjectedConvCpltCallback>:
 80019c8:	4770      	bx	lr

080019ca <HAL_ADCEx_InjectedQueueOverflowCallback>:
 80019ca:	4770      	bx	lr

080019cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
 80019cc:	4770      	bx	lr

080019ce <HAL_ADCEx_LevelOutOfWindow3Callback>:
 80019ce:	4770      	bx	lr

080019d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80019d4:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019d6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80019da:	2b01      	cmp	r3, #1
{
 80019dc:	b09b      	sub	sp, #108	; 0x6c
 80019de:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80019e0:	d066      	beq.n	8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 80019e2:	2301      	movs	r3, #1
 80019e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80019e8:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80019ea:	6800      	ldr	r0, [r0, #0]
 80019ec:	4298      	cmp	r0, r3
 80019ee:	bf0c      	ite	eq
 80019f0:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 80019f4:	2300      	movne	r3, #0
 80019f6:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80019f8:	9801      	ldr	r0, [sp, #4]
 80019fa:	b940      	cbnz	r0, 8001a0e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a02:	f043 0320 	orr.w	r3, r3, #32
 8001a06:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 8001a08:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001a0a:	b01b      	add	sp, #108	; 0x6c
 8001a0c:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001a0e:	f7ff ffd7 	bl	80019c0 <LL_ADC_REG_IsConversionOngoing>
 8001a12:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a14:	6810      	ldr	r0, [r2, #0]
 8001a16:	f7ff ffd3 	bl	80019c0 <LL_ADC_REG_IsConversionOngoing>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d142      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d140      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a22:	680b      	ldr	r3, [r1, #0]
 8001a24:	4c24      	ldr	r4, [pc, #144]	; (8001ab8 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8001a26:	b333      	cbz	r3, 8001a76 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001a28:	68a3      	ldr	r3, [r4, #8]
 8001a2a:	6848      	ldr	r0, [r1, #4]
 8001a2c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a30:	4303      	orrs	r3, r0
 8001a32:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8001a36:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8001a3a:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a3c:	481d      	ldr	r0, [pc, #116]	; (8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001a3e:	f7ff ffbb 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a42:	4603      	mov	r3, r0
 8001a44:	481d      	ldr	r0, [pc, #116]	; (8001abc <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001a46:	f7ff ffb7 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a4a:	4303      	orrs	r3, r0
 8001a4c:	481c      	ldr	r0, [pc, #112]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001a4e:	f7ff ffb3 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a52:	4318      	orrs	r0, r3
 8001a54:	d004      	beq.n	8001a60 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a56:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8001a5e:	e7d4      	b.n	8001a0a <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8001a60:	680b      	ldr	r3, [r1, #0]
 8001a62:	68a5      	ldr	r5, [r4, #8]
 8001a64:	6889      	ldr	r1, [r1, #8]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8001a6c:	f021 010f 	bic.w	r1, r1, #15
 8001a70:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a72:	60a3      	str	r3, [r4, #8]
 8001a74:	e7f0      	b.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a76:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a78:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a7a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a7e:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a80:	f7ff ff9a 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a84:	4603      	mov	r3, r0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8001a88:	f7ff ff96 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a8c:	4303      	orrs	r3, r0
 8001a8e:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8001a90:	f7ff ff92 	bl	80019b8 <LL_ADC_IsEnabled>
 8001a94:	4318      	orrs	r0, r3
 8001a96:	d1de      	bne.n	8001a56 <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a9e:	f023 030f 	bic.w	r3, r3, #15
 8001aa2:	e7e6      	b.n	8001a72 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8001aac:	2001      	movs	r0, #1
 8001aae:	e7d3      	b.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	e7aa      	b.n	8001a0a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001ab4:	50040000 	.word	0x50040000
 8001ab8:	50040300 	.word	0x50040300
 8001abc:	50040100 	.word	0x50040100
 8001ac0:	50040200 	.word	0x50040200

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ac6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	0200      	lsls	r0, r0, #8
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ada:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001ade:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ae0:	60d3      	str	r3, [r2, #12]
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b530      	push	{r4, r5, lr}
 8001aec:	68dc      	ldr	r4, [r3, #12]
 8001aee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	bf28      	it	cs
 8001afc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 0501 	mov.w	r5, #1
 8001b04:	fa05 f303 	lsl.w	r3, r5, r3
 8001b08:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0c:	bf8c      	ite	hi
 8001b0e:	3c03      	subhi	r4, #3
 8001b10:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b12:	4019      	ands	r1, r3
 8001b14:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b16:	fa05 f404 	lsl.w	r4, r5, r4
 8001b1a:	3c01      	subs	r4, #1
 8001b1c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	ea42 0201 	orr.w	r2, r2, r1
 8001b24:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	bfad      	iteet	ge
 8001b2a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	f000 000f 	andlt.w	r0, r0, #15
 8001b32:	4b06      	ldrlt	r3, [pc, #24]	; (8001b4c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	bfb5      	itete	lt
 8001b3a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001b44:	bd30      	pop	{r4, r5, pc}
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	e000ed14 	.word	0xe000ed14

08001b50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b50:	2800      	cmp	r0, #0
 8001b52:	db08      	blt.n	8001b66 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b54:	0942      	lsrs	r2, r0, #5
 8001b56:	2301      	movs	r3, #1
 8001b58:	f000 001f 	and.w	r0, r0, #31
 8001b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b60:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <HAL_NVIC_EnableIRQ+0x18>)
 8001b62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	3801      	subs	r0, #1
 8001b6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b72:	d20a      	bcs.n	8001b8a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	4a07      	ldr	r2, [pc, #28]	; (8001b94 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b78:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	21f0      	movs	r1, #240	; 0xf0
 8001b7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b9c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001d4c <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ba4:	4c67      	ldr	r4, [pc, #412]	; (8001d44 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ba6:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001ba8:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	9a01      	ldr	r2, [sp, #4]
 8001bac:	40da      	lsrs	r2, r3
 8001bae:	d102      	bne.n	8001bb6 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001bb0:	b005      	add	sp, #20
 8001bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb6:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001bb8:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bba:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001bbc:	ea12 0e06 	ands.w	lr, r2, r6
 8001bc0:	f000 80b1 	beq.w	8001d26 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc4:	684a      	ldr	r2, [r1, #4]
 8001bc6:	f022 0710 	bic.w	r7, r2, #16
 8001bca:	2f02      	cmp	r7, #2
 8001bcc:	d116      	bne.n	8001bfc <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001bce:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001bd2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd6:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001bda:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bde:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001be2:	f04f 0c0f 	mov.w	ip, #15
 8001be6:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001bea:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bee:	690d      	ldr	r5, [r1, #16]
 8001bf0:	fa05 f50a 	lsl.w	r5, r5, sl
 8001bf4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001bf8:	f8c9 5020 	str.w	r5, [r9, #32]
 8001bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c00:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001c02:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c06:	fa05 f50c 	lsl.w	r5, r5, ip
 8001c0a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c0c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c10:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c14:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c18:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c1a:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1e:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001c20:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c24:	d811      	bhi.n	8001c4a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001c26:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c28:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c2c:	68cf      	ldr	r7, [r1, #12]
 8001c2e:	fa07 f70c 	lsl.w	r7, r7, ip
 8001c32:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001c36:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c38:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c3a:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c3e:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001c42:	409f      	lsls	r7, r3
 8001c44:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001c48:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c4a:	f1ba 0f03 	cmp.w	sl, #3
 8001c4e:	d107      	bne.n	8001c60 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001c50:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c52:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c56:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001c5a:	409f      	lsls	r7, r3
 8001c5c:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001c5e:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001c60:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c62:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c64:	688e      	ldr	r6, [r1, #8]
 8001c66:	fa06 f60c 	lsl.w	r6, r6, ip
 8001c6a:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001c6c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6e:	00d5      	lsls	r5, r2, #3
 8001c70:	d559      	bpl.n	8001d26 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c76:	f045 0501 	orr.w	r5, r5, #1
 8001c7a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001c7e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001c82:	f023 0603 	bic.w	r6, r3, #3
 8001c86:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001c8a:	f005 0501 	and.w	r5, r5, #1
 8001c8e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001c92:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c94:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c9a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001ca0:	270f      	movs	r7, #15
 8001ca2:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ca6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001caa:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cae:	d03c      	beq.n	8001d2a <HAL_GPIO_Init+0x192>
 8001cb0:	4d25      	ldr	r5, [pc, #148]	; (8001d48 <HAL_GPIO_Init+0x1b0>)
 8001cb2:	42a8      	cmp	r0, r5
 8001cb4:	d03b      	beq.n	8001d2e <HAL_GPIO_Init+0x196>
 8001cb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cba:	42a8      	cmp	r0, r5
 8001cbc:	d039      	beq.n	8001d32 <HAL_GPIO_Init+0x19a>
 8001cbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cc2:	42a8      	cmp	r0, r5
 8001cc4:	d037      	beq.n	8001d36 <HAL_GPIO_Init+0x19e>
 8001cc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cca:	42a8      	cmp	r0, r5
 8001ccc:	d035      	beq.n	8001d3a <HAL_GPIO_Init+0x1a2>
 8001cce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cd2:	42a8      	cmp	r0, r5
 8001cd4:	d033      	beq.n	8001d3e <HAL_GPIO_Init+0x1a6>
 8001cd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001cda:	42a8      	cmp	r0, r5
 8001cdc:	bf14      	ite	ne
 8001cde:	2507      	movne	r5, #7
 8001ce0:	2506      	moveq	r5, #6
 8001ce2:	fa05 f50c 	lsl.w	r5, r5, ip
 8001ce6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce8:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001cea:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001cec:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001cf2:	bf54      	ite	pl
 8001cf4:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001cf6:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001cfa:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001cfc:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cfe:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001d00:	bf54      	ite	pl
 8001d02:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d04:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001d08:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001d0a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001d0e:	bf54      	ite	pl
 8001d10:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d12:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001d16:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001d18:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001d1c:	bf54      	ite	pl
 8001d1e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001d20:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001d24:	60e5      	str	r5, [r4, #12]
    position++;
 8001d26:	3301      	adds	r3, #1
 8001d28:	e73f      	b.n	8001baa <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d2a:	2500      	movs	r5, #0
 8001d2c:	e7d9      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d2e:	2501      	movs	r5, #1
 8001d30:	e7d7      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d32:	2502      	movs	r5, #2
 8001d34:	e7d5      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d36:	2503      	movs	r5, #3
 8001d38:	e7d3      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d3a:	2504      	movs	r5, #4
 8001d3c:	e7d1      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d3e:	2505      	movs	r5, #5
 8001d40:	e7cf      	b.n	8001ce2 <HAL_GPIO_Init+0x14a>
 8001d42:	bf00      	nop
 8001d44:	40010400 	.word	0x40010400
 8001d48:	48000400 	.word	0x48000400
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	b10a      	cbz	r2, 8001d56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d52:	6181      	str	r1, [r0, #24]
 8001d54:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d56:	6281      	str	r1, [r0, #40]	; 0x28
 8001d58:	4770      	bx	lr

08001d5a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d5a:	6943      	ldr	r3, [r0, #20]
 8001d5c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5e:	bf14      	ite	ne
 8001d60:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d62:	6181      	streq	r1, [r0, #24]
 8001d64:	4770      	bx	lr
	...

08001d68 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_PWREx_GetVoltageRange+0xc>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001d6c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40007000 	.word	0x40007000

08001d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d78:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d80:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d84:	d11c      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d8a:	d015      	beq.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d96:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001d9a:	6811      	ldr	r1, [r2, #0]
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	434a      	muls	r2, r1
 8001da0:	490f      	ldr	r1, [pc, #60]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8001da2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001da6:	4619      	mov	r1, r3
 8001da8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001daa:	6958      	ldr	r0, [r3, #20]
 8001dac:	0540      	lsls	r0, r0, #21
 8001dae:	d500      	bpl.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001db0:	b922      	cbnz	r2, 8001dbc <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db2:	694b      	ldr	r3, [r1, #20]
 8001db4:	055b      	lsls	r3, r3, #21
 8001db6:	d40d      	bmi.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
 8001dba:	4770      	bx	lr
        wait_loop_index--;
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	e7f4      	b.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc4:	bf1f      	itttt	ne
 8001dc6:	681a      	ldrne	r2, [r3, #0]
 8001dc8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001dcc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001dd0:	601a      	strne	r2, [r3, #0]
 8001dd2:	e7f1      	b.n	8001db8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001dd4:	2003      	movs	r0, #3
}
 8001dd6:	4770      	bx	lr
 8001dd8:	40007000 	.word	0x40007000
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	000f4240 	.word	0x000f4240

08001de4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001de6:	4d1e      	ldr	r5, [pc, #120]	; (8001e60 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001de8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001dea:	00da      	lsls	r2, r3, #3
{
 8001dec:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dee:	d518      	bpl.n	8001e22 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001df0:	f7ff ffba 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001df8:	d123      	bne.n	8001e42 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dfa:	2c80      	cmp	r4, #128	; 0x80
 8001dfc:	d929      	bls.n	8001e52 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dfe:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e00:	bf8c      	ite	hi
 8001e02:	2002      	movhi	r0, #2
 8001e04:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e06:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001e08:	6813      	ldr	r3, [r2, #0]
 8001e0a:	f023 0307 	bic.w	r3, r3, #7
 8001e0e:	4303      	orrs	r3, r0
 8001e10:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e12:	6813      	ldr	r3, [r2, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001e18:	1a18      	subs	r0, r3, r0
 8001e1a:	bf18      	it	ne
 8001e1c:	2001      	movne	r0, #1
 8001e1e:	b003      	add	sp, #12
 8001e20:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001e34:	f7ff ff98 	bl	8001d68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e38:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001e40:	e7d8      	b.n	8001df4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001e42:	2c80      	cmp	r4, #128	; 0x80
 8001e44:	d807      	bhi.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001e46:	d008      	beq.n	8001e5a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001e48:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001e4c:	4258      	negs	r0, r3
 8001e4e:	4158      	adcs	r0, r3
 8001e50:	e7d9      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e52:	2000      	movs	r0, #0
 8001e54:	e7d7      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e56:	2003      	movs	r0, #3
 8001e58:	e7d5      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	e7d3      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001e5e:	bf00      	nop
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40022000 	.word	0x40022000

08001e68 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e6c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e6e:	f012 020c 	ands.w	r2, r2, #12
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x18>
 8001e74:	2a0c      	cmp	r2, #12
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e7c:	2901      	cmp	r1, #1
 8001e7e:	d118      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e80:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001e82:	481d      	ldr	r0, [pc, #116]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e84:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e86:	bf55      	itete	pl
 8001e88:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e8c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e8e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e92:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001e96:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9a:	b34a      	cbz	r2, 8001ef0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e9c:	2a0c      	cmp	r2, #12
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x4c>
 8001ea0:	2000      	movs	r0, #0
  return sysclockfreq;
 8001ea2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ea4:	2a04      	cmp	r2, #4
 8001ea6:	d022      	beq.n	8001eee <HAL_RCC_GetSysClockFreq+0x86>
 8001ea8:	2a08      	cmp	r2, #8
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001eac:	bf18      	it	ne
 8001eae:	2000      	movne	r0, #0
 8001eb0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eb2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001eba:	2a02      	cmp	r2, #2
 8001ebc:	d015      	beq.n	8001eea <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001ebe:	490f      	ldr	r1, [pc, #60]	; (8001efc <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec0:	2a03      	cmp	r2, #3
 8001ec2:	bf08      	it	eq
 8001ec4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ec6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ec8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ed0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ed4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ed8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eda:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001edc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ede:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ee0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001ee4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eec:	e7eb      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001eee:	4804      	ldr	r0, [pc, #16]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08006a0c 	.word	0x08006a0c
 8001efc:	007a1200 	.word	0x007a1200
 8001f00:	00f42400 	.word	0x00f42400

08001f04 <HAL_RCC_OscConfig>:
{
 8001f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001f08:	4605      	mov	r5, r0
 8001f0a:	b908      	cbnz	r0, 8001f10 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	e047      	b.n	8001fa0 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f10:	4ca6      	ldr	r4, [pc, #664]	; (80021ac <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f12:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f16:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f18:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f22:	d573      	bpl.n	800200c <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f24:	b11e      	cbz	r6, 8001f2e <HAL_RCC_OscConfig+0x2a>
 8001f26:	2e0c      	cmp	r6, #12
 8001f28:	d152      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f2a:	2f01      	cmp	r7, #1
 8001f2c:	d150      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2e:	6823      	ldr	r3, [r4, #0]
 8001f30:	0798      	lsls	r0, r3, #30
 8001f32:	d502      	bpl.n	8001f3a <HAL_RCC_OscConfig+0x36>
 8001f34:	69ab      	ldr	r3, [r5, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0e8      	beq.n	8001f0c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	6a28      	ldr	r0, [r5, #32]
 8001f3e:	0719      	lsls	r1, r3, #28
 8001f40:	bf56      	itet	pl
 8001f42:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001f46:	6823      	ldrmi	r3, [r4, #0]
 8001f48:	091b      	lsrpl	r3, r3, #4
 8001f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f4e:	4283      	cmp	r3, r0
 8001f50:	d229      	bcs.n	8001fa6 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f52:	f7ff ff47 	bl	8001de4 <RCC_SetFlashLatencyFromMSIRange>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d1d8      	bne.n	8001f0c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	f043 0308 	orr.w	r3, r3, #8
 8001f60:	6023      	str	r3, [r4, #0]
 8001f62:	6823      	ldr	r3, [r4, #0]
 8001f64:	6a2a      	ldr	r2, [r5, #32]
 8001f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6e:	6863      	ldr	r3, [r4, #4]
 8001f70:	69ea      	ldr	r2, [r5, #28]
 8001f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001f7a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7c:	f7ff ff74 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001f80:	68a3      	ldr	r3, [r4, #8]
 8001f82:	4a8b      	ldr	r2, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	40d8      	lsrs	r0, r3
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x2b0>)
 8001f92:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001f94:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <HAL_RCC_OscConfig+0x2b4>)
 8001f96:	6818      	ldr	r0, [r3, #0]
 8001f98:	f7fe ffda 	bl	8000f50 <HAL_InitTick>
        if(status != HAL_OK)
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d035      	beq.n	800200c <HAL_RCC_OscConfig+0x108>
}
 8001fa0:	b003      	add	sp, #12
 8001fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa6:	6823      	ldr	r3, [r4, #0]
 8001fa8:	f043 0308 	orr.w	r3, r3, #8
 8001fac:	6023      	str	r3, [r4, #0]
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fb4:	4303      	orrs	r3, r0
 8001fb6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb8:	6863      	ldr	r3, [r4, #4]
 8001fba:	69ea      	ldr	r2, [r5, #28]
 8001fbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001fc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fc4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fc6:	f7ff ff0d 	bl	8001de4 <RCC_SetFlashLatencyFromMSIRange>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d0d6      	beq.n	8001f7c <HAL_RCC_OscConfig+0x78>
 8001fce:	e79d      	b.n	8001f0c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fd0:	69ab      	ldr	r3, [r5, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d036      	beq.n	8002044 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fde:	f7fe fff9 	bl	8000fd4 <HAL_GetTick>
 8001fe2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	079a      	lsls	r2, r3, #30
 8001fe8:	d524      	bpl.n	8002034 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6023      	str	r3, [r4, #0]
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	6a2a      	ldr	r2, [r5, #32]
 8001ff6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffe:	6863      	ldr	r3, [r4, #4]
 8002000:	69ea      	ldr	r2, [r5, #28]
 8002002:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002006:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800200a:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	07d8      	lsls	r0, r3, #31
 8002010:	d429      	bmi.n	8002066 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	682b      	ldr	r3, [r5, #0]
 8002014:	0799      	lsls	r1, r3, #30
 8002016:	d467      	bmi.n	80020e8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002018:	682b      	ldr	r3, [r5, #0]
 800201a:	0718      	lsls	r0, r3, #28
 800201c:	f100 809c 	bmi.w	8002158 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	0759      	lsls	r1, r3, #29
 8002024:	f100 80ca 	bmi.w	80021bc <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002028:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800202a:	2800      	cmp	r0, #0
 800202c:	f040 8133 	bne.w	8002296 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 8002030:	2000      	movs	r0, #0
 8002032:	e7b5      	b.n	8001fa0 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002034:	f7fe ffce 	bl	8000fd4 <HAL_GetTick>
 8002038:	eba0 0008 	sub.w	r0, r0, r8
 800203c:	2802      	cmp	r0, #2
 800203e:	d9d1      	bls.n	8001fe4 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 8002040:	2003      	movs	r0, #3
 8002042:	e7ad      	b.n	8001fa0 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800204c:	f7fe ffc2 	bl	8000fd4 <HAL_GetTick>
 8002050:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	079b      	lsls	r3, r3, #30
 8002056:	d5d9      	bpl.n	800200c <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002058:	f7fe ffbc 	bl	8000fd4 <HAL_GetTick>
 800205c:	eba0 0008 	sub.w	r0, r0, r8
 8002060:	2802      	cmp	r0, #2
 8002062:	d9f6      	bls.n	8002052 <HAL_RCC_OscConfig+0x14e>
 8002064:	e7ec      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002066:	2e08      	cmp	r6, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_OscConfig+0x16e>
 800206a:	2e0c      	cmp	r6, #12
 800206c:	d108      	bne.n	8002080 <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800206e:	2f03      	cmp	r7, #3
 8002070:	d106      	bne.n	8002080 <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	039a      	lsls	r2, r3, #14
 8002076:	d5cc      	bpl.n	8002012 <HAL_RCC_OscConfig+0x10e>
 8002078:	686b      	ldr	r3, [r5, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1c9      	bne.n	8002012 <HAL_RCC_OscConfig+0x10e>
 800207e:	e745      	b.n	8001f0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	686b      	ldr	r3, [r5, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d110      	bne.n	80020aa <HAL_RCC_OscConfig+0x1a6>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002090:	f7fe ffa0 	bl	8000fd4 <HAL_GetTick>
 8002094:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	039b      	lsls	r3, r3, #14
 800209a:	d4ba      	bmi.n	8002012 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7fe ff9a 	bl	8000fd4 <HAL_GetTick>
 80020a0:	eba0 0008 	sub.w	r0, r0, r8
 80020a4:	2864      	cmp	r0, #100	; 0x64
 80020a6:	d9f6      	bls.n	8002096 <HAL_RCC_OscConfig+0x192>
 80020a8:	e7ca      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ae:	d104      	bne.n	80020ba <HAL_RCC_OscConfig+0x1b6>
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	e7e6      	b.n	8002088 <HAL_RCC_OscConfig+0x184>
 80020ba:	6822      	ldr	r2, [r4, #0]
 80020bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020c0:	6022      	str	r2, [r4, #0]
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020c8:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e0      	bne.n	8002090 <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 80020ce:	f7fe ff81 	bl	8000fd4 <HAL_GetTick>
 80020d2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	0398      	lsls	r0, r3, #14
 80020d8:	d59b      	bpl.n	8002012 <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020da:	f7fe ff7b 	bl	8000fd4 <HAL_GetTick>
 80020de:	eba0 0008 	sub.w	r0, r0, r8
 80020e2:	2864      	cmp	r0, #100	; 0x64
 80020e4:	d9f6      	bls.n	80020d4 <HAL_RCC_OscConfig+0x1d0>
 80020e6:	e7ab      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e8:	2e04      	cmp	r6, #4
 80020ea:	d003      	beq.n	80020f4 <HAL_RCC_OscConfig+0x1f0>
 80020ec:	2e0c      	cmp	r6, #12
 80020ee:	d110      	bne.n	8002112 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f0:	2f02      	cmp	r7, #2
 80020f2:	d10e      	bne.n	8002112 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	0559      	lsls	r1, r3, #21
 80020f8:	d503      	bpl.n	8002102 <HAL_RCC_OscConfig+0x1fe>
 80020fa:	68eb      	ldr	r3, [r5, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f43f af05 	beq.w	8001f0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	6863      	ldr	r3, [r4, #4]
 8002104:	692a      	ldr	r2, [r5, #16]
 8002106:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800210a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800210e:	6063      	str	r3, [r4, #4]
 8002110:	e782      	b.n	8002018 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	68eb      	ldr	r3, [r5, #12]
 8002114:	b17b      	cbz	r3, 8002136 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800211e:	f7fe ff59 	bl	8000fd4 <HAL_GetTick>
 8002122:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	055a      	lsls	r2, r3, #21
 8002128:	d4eb      	bmi.n	8002102 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7fe ff53 	bl	8000fd4 <HAL_GetTick>
 800212e:	1bc0      	subs	r0, r0, r7
 8002130:	2802      	cmp	r0, #2
 8002132:	d9f7      	bls.n	8002124 <HAL_RCC_OscConfig+0x220>
 8002134:	e784      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800213e:	f7fe ff49 	bl	8000fd4 <HAL_GetTick>
 8002142:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002144:	6823      	ldr	r3, [r4, #0]
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	f57f af66 	bpl.w	8002018 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe ff42 	bl	8000fd4 <HAL_GetTick>
 8002150:	1bc0      	subs	r0, r0, r7
 8002152:	2802      	cmp	r0, #2
 8002154:	d9f6      	bls.n	8002144 <HAL_RCC_OscConfig+0x240>
 8002156:	e773      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002158:	696b      	ldr	r3, [r5, #20]
 800215a:	b19b      	cbz	r3, 8002184 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 800215c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002168:	f7fe ff34 	bl	8000fd4 <HAL_GetTick>
 800216c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002172:	079a      	lsls	r2, r3, #30
 8002174:	f53f af54 	bmi.w	8002020 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002178:	f7fe ff2c 	bl	8000fd4 <HAL_GetTick>
 800217c:	1bc0      	subs	r0, r0, r7
 800217e:	2802      	cmp	r0, #2
 8002180:	d9f5      	bls.n	800216e <HAL_RCC_OscConfig+0x26a>
 8002182:	e75d      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 8002184:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002190:	f7fe ff20 	bl	8000fd4 <HAL_GetTick>
 8002194:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002196:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800219a:	079b      	lsls	r3, r3, #30
 800219c:	f57f af40 	bpl.w	8002020 <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe ff18 	bl	8000fd4 <HAL_GetTick>
 80021a4:	1bc0      	subs	r0, r0, r7
 80021a6:	2802      	cmp	r0, #2
 80021a8:	d9f5      	bls.n	8002196 <HAL_RCC_OscConfig+0x292>
 80021aa:	e749      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
 80021ac:	40021000 	.word	0x40021000
 80021b0:	080069fb 	.word	0x080069fb
 80021b4:	20000008 	.word	0x20000008
 80021b8:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021be:	00d8      	lsls	r0, r3, #3
 80021c0:	d429      	bmi.n	8002216 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80021ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d8:	4f79      	ldr	r7, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	05d9      	lsls	r1, r3, #23
 80021de:	d51d      	bpl.n	800221c <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e0:	68ab      	ldr	r3, [r5, #8]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d12b      	bne.n	800223e <HAL_RCC_OscConfig+0x33a>
 80021e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80021f2:	f7fe feef 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80021fa:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002200:	079b      	lsls	r3, r3, #30
 8002202:	d542      	bpl.n	800228a <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8002204:	f1b8 0f00 	cmp.w	r8, #0
 8002208:	f43f af0e 	beq.w	8002028 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800220e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002212:	65a3      	str	r3, [r4, #88]	; 0x58
 8002214:	e708      	b.n	8002028 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8002216:	f04f 0800 	mov.w	r8, #0
 800221a:	e7dd      	b.n	80021d8 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002222:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002224:	f7fe fed6 	bl	8000fd4 <HAL_GetTick>
 8002228:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	05da      	lsls	r2, r3, #23
 800222e:	d4d7      	bmi.n	80021e0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002230:	f7fe fed0 	bl	8000fd4 <HAL_GetTick>
 8002234:	eba0 0009 	sub.w	r0, r0, r9
 8002238:	2802      	cmp	r0, #2
 800223a:	d9f6      	bls.n	800222a <HAL_RCC_OscConfig+0x326>
 800223c:	e700      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223e:	2b05      	cmp	r3, #5
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x34c>
 8002242:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800224e:	e7ca      	b.n	80021e6 <HAL_RCC_OscConfig+0x2e2>
 8002250:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002254:	f022 0201 	bic.w	r2, r2, #1
 8002258:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800225c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002260:	f022 0204 	bic.w	r2, r2, #4
 8002264:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1c2      	bne.n	80021f2 <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 800226c:	f7fe feb2 	bl	8000fd4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002274:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800227a:	0798      	lsls	r0, r3, #30
 800227c:	d5c2      	bpl.n	8002204 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227e:	f7fe fea9 	bl	8000fd4 <HAL_GetTick>
 8002282:	1bc0      	subs	r0, r0, r7
 8002284:	4548      	cmp	r0, r9
 8002286:	d9f6      	bls.n	8002276 <HAL_RCC_OscConfig+0x372>
 8002288:	e6da      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fea3 	bl	8000fd4 <HAL_GetTick>
 800228e:	1bc0      	subs	r0, r0, r7
 8002290:	4548      	cmp	r0, r9
 8002292:	d9b3      	bls.n	80021fc <HAL_RCC_OscConfig+0x2f8>
 8002294:	e6d4      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002296:	2e0c      	cmp	r6, #12
 8002298:	d05c      	beq.n	8002354 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 800229a:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800229c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800229e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a4:	d13b      	bne.n	800231e <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 80022a6:	f7fe fe95 	bl	8000fd4 <HAL_GetTick>
 80022aa:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	0199      	lsls	r1, r3, #6
 80022b0:	d42f      	bmi.n	8002312 <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b2:	68e2      	ldr	r2, [r4, #12]
 80022b4:	4b43      	ldr	r3, [pc, #268]	; (80023c4 <HAL_RCC_OscConfig+0x4c0>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80022be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022c2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80022c4:	3a01      	subs	r2, #1
 80022c6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80022ca:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80022cc:	0912      	lsrs	r2, r2, #4
 80022ce:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80022d2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80022d4:	0852      	lsrs	r2, r2, #1
 80022d6:	3a01      	subs	r2, #1
 80022d8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80022dc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80022de:	0852      	lsrs	r2, r2, #1
 80022e0:	3a01      	subs	r2, #1
 80022e2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80022e6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ee:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022f0:	68e3      	ldr	r3, [r4, #12]
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80022f8:	f7fe fe6c 	bl	8000fd4 <HAL_GetTick>
 80022fc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	019a      	lsls	r2, r3, #6
 8002302:	f53f ae95 	bmi.w	8002030 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7fe fe65 	bl	8000fd4 <HAL_GetTick>
 800230a:	1b40      	subs	r0, r0, r5
 800230c:	2802      	cmp	r0, #2
 800230e:	d9f6      	bls.n	80022fe <HAL_RCC_OscConfig+0x3fa>
 8002310:	e696      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe fe5f 	bl	8000fd4 <HAL_GetTick>
 8002316:	1b80      	subs	r0, r0, r6
 8002318:	2802      	cmp	r0, #2
 800231a:	d9c7      	bls.n	80022ac <HAL_RCC_OscConfig+0x3a8>
 800231c:	e690      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800231e:	6823      	ldr	r3, [r4, #0]
 8002320:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002324:	bf02      	ittt	eq
 8002326:	68e3      	ldreq	r3, [r4, #12]
 8002328:	f023 0303 	biceq.w	r3, r3, #3
 800232c:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800232e:	68e3      	ldr	r3, [r4, #12]
 8002330:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002338:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800233a:	f7fe fe4b 	bl	8000fd4 <HAL_GetTick>
 800233e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	019b      	lsls	r3, r3, #6
 8002344:	f57f ae74 	bpl.w	8002030 <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fe44 	bl	8000fd4 <HAL_GetTick>
 800234c:	1b40      	subs	r0, r0, r5
 800234e:	2802      	cmp	r0, #2
 8002350:	d9f6      	bls.n	8002340 <HAL_RCC_OscConfig+0x43c>
 8002352:	e675      	b.n	8002040 <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	2801      	cmp	r0, #1
 8002356:	f43f ae23 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 800235a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800235e:	f003 0103 	and.w	r1, r3, #3
 8002362:	4291      	cmp	r1, r2
 8002364:	f47f add2 	bne.w	8001f0c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002368:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800236a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800236e:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002370:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002374:	f47f adca 	bne.w	8001f0c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002378:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800237a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800237e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002382:	f47f adc3 	bne.w	8001f0c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002386:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002388:	3a07      	subs	r2, #7
 800238a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800238e:	bf18      	it	ne
 8002390:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002392:	4291      	cmp	r1, r2
 8002394:	f47f adba 	bne.w	8001f0c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002398:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800239a:	0852      	lsrs	r2, r2, #1
 800239c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80023a0:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a2:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80023a6:	f47f adb1 	bne.w	8001f0c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023aa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80023ac:	0852      	lsrs	r2, r2, #1
 80023ae:	3a01      	subs	r2, #1
 80023b0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80023b8:	bf14      	ite	ne
 80023ba:	2001      	movne	r0, #1
 80023bc:	2000      	moveq	r0, #0
 80023be:	e5ef      	b.n	8001fa0 <HAL_RCC_OscConfig+0x9c>
 80023c0:	40007000 	.word	0x40007000
 80023c4:	f99d808c 	.word	0xf99d808c

080023c8 <HAL_RCC_ClockConfig>:
{
 80023c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023cc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80023ce:	4604      	mov	r4, r0
 80023d0:	b910      	cbnz	r0, 80023d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4a41      	ldr	r2, [pc, #260]	; (80024e0 <HAL_RCC_ClockConfig+0x118>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	428b      	cmp	r3, r1
 80023e2:	d32a      	bcc.n	800243a <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	07d9      	lsls	r1, r3, #31
 80023e8:	d432      	bmi.n	8002450 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ea:	6821      	ldr	r1, [r4, #0]
 80023ec:	078a      	lsls	r2, r1, #30
 80023ee:	d45c      	bmi.n	80024aa <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <HAL_RCC_ClockConfig+0x118>)
 80023f2:	6813      	ldr	r3, [r2, #0]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	429e      	cmp	r6, r3
 80023fa:	d35e      	bcc.n	80024ba <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	f011 0f04 	tst.w	r1, #4
 8002400:	4d38      	ldr	r5, [pc, #224]	; (80024e4 <HAL_RCC_ClockConfig+0x11c>)
 8002402:	d165      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	070b      	lsls	r3, r1, #28
 8002406:	d506      	bpl.n	8002416 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002408:	68ab      	ldr	r3, [r5, #8]
 800240a:	6922      	ldr	r2, [r4, #16]
 800240c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002410:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002414:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002416:	f7ff fd27 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 800241a:	68ab      	ldr	r3, [r5, #8]
 800241c:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_RCC_ClockConfig+0x120>)
 800241e:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8002422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002426:	5cd3      	ldrb	r3, [r2, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	40d8      	lsrs	r0, r3
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCC_ClockConfig+0x124>)
 8002430:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002432:	4b2f      	ldr	r3, [pc, #188]	; (80024f0 <HAL_RCC_ClockConfig+0x128>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	f7fe bd8b 	b.w	8000f50 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	6813      	ldr	r3, [r2, #0]
 800243c:	f023 0307 	bic.w	r3, r3, #7
 8002440:	430b      	orrs	r3, r1
 8002442:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	4299      	cmp	r1, r3
 800244c:	d1c1      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xa>
 800244e:	e7c9      	b.n	80023e4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002450:	6862      	ldr	r2, [r4, #4]
 8002452:	4d24      	ldr	r5, [pc, #144]	; (80024e4 <HAL_RCC_ClockConfig+0x11c>)
 8002454:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002458:	d11b      	bne.n	8002492 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245e:	d0b8      	beq.n	80023d2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002460:	68ab      	ldr	r3, [r5, #8]
 8002462:	f023 0303 	bic.w	r3, r3, #3
 8002466:	4313      	orrs	r3, r2
 8002468:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800246a:	f7fe fdb3 	bl	8000fd4 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002472:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002474:	68ab      	ldr	r3, [r5, #8]
 8002476:	6862      	ldr	r2, [r4, #4]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002480:	d0b3      	beq.n	80023ea <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002482:	f7fe fda7 	bl	8000fd4 <HAL_GetTick>
 8002486:	1bc0      	subs	r0, r0, r7
 8002488:	4540      	cmp	r0, r8
 800248a:	d9f3      	bls.n	8002474 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 800248c:	2003      	movs	r0, #3
}
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002492:	2a02      	cmp	r2, #2
 8002494:	d102      	bne.n	800249c <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002496:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800249a:	e7e0      	b.n	800245e <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249c:	b912      	cbnz	r2, 80024a4 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	f013 0f02 	tst.w	r3, #2
 80024a2:	e7dc      	b.n	800245e <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024a4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80024a8:	e7d9      	b.n	800245e <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_RCC_ClockConfig+0x11c>)
 80024ac:	68a0      	ldr	r0, [r4, #8]
 80024ae:	6893      	ldr	r3, [r2, #8]
 80024b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024b4:	4303      	orrs	r3, r0
 80024b6:	6093      	str	r3, [r2, #8]
 80024b8:	e79a      	b.n	80023f0 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	6813      	ldr	r3, [r2, #0]
 80024bc:	f023 0307 	bic.w	r3, r3, #7
 80024c0:	4333      	orrs	r3, r6
 80024c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	429e      	cmp	r6, r3
 80024cc:	d181      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xa>
 80024ce:	e795      	b.n	80023fc <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d0:	68ab      	ldr	r3, [r5, #8]
 80024d2:	68e2      	ldr	r2, [r4, #12]
 80024d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024d8:	4313      	orrs	r3, r2
 80024da:	60ab      	str	r3, [r5, #8]
 80024dc:	e792      	b.n	8002404 <HAL_RCC_ClockConfig+0x3c>
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080069fb 	.word	0x080069fb
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20000004 	.word	0x20000004

080024f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024f6:	4b45      	ldr	r3, [pc, #276]	; (800260c <RCCEx_PLLSAI1_Config+0x118>)
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	f012 0f03 	tst.w	r2, #3
{
 80024fe:	4605      	mov	r5, r0
 8002500:	460e      	mov	r6, r1
 8002502:	461c      	mov	r4, r3
 8002504:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002506:	d02a      	beq.n	800255e <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	4282      	cmp	r2, r0
 8002510:	d13c      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x98>
       ||
 8002512:	2a00      	cmp	r2, #0
 8002514:	d03a      	beq.n	800258c <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002516:	68db      	ldr	r3, [r3, #12]
       ||
 8002518:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800251a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800251e:	3301      	adds	r3, #1
       ||
 8002520:	4293      	cmp	r3, r2
 8002522:	d133      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800252a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800252c:	f7fe fd52 	bl	8000fd4 <HAL_GetTick>
 8002530:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	011a      	lsls	r2, r3, #4
 8002536:	d432      	bmi.n	800259e <RCCEx_PLLSAI1_Config+0xaa>
 8002538:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253a:	2e00      	cmp	r6, #0
 800253c:	d036      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800253e:	2e01      	cmp	r6, #1
 8002540:	d150      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002542:	6922      	ldr	r2, [r4, #16]
 8002544:	6928      	ldr	r0, [r5, #16]
 8002546:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800254a:	0840      	lsrs	r0, r0, #1
 800254c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002550:	3801      	subs	r0, #1
 8002552:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8002556:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800255a:	6122      	str	r2, [r4, #16]
 800255c:	e032      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 800255e:	2802      	cmp	r0, #2
 8002560:	d010      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x90>
 8002562:	2803      	cmp	r0, #3
 8002564:	d014      	beq.n	8002590 <RCCEx_PLLSAI1_Config+0x9c>
 8002566:	2801      	cmp	r0, #1
 8002568:	d110      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	079f      	lsls	r7, r3, #30
 800256e:	d538      	bpl.n	80025e2 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002570:	68e3      	ldr	r3, [r4, #12]
 8002572:	686a      	ldr	r2, [r5, #4]
 8002574:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002578:	3a01      	subs	r2, #1
 800257a:	4318      	orrs	r0, r3
 800257c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002580:	60e0      	str	r0, [r4, #12]
 8002582:	e7cf      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800258a:	d1f1      	bne.n	8002570 <RCCEx_PLLSAI1_Config+0x7c>
 800258c:	2001      	movs	r0, #1
 800258e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	0391      	lsls	r1, r2, #14
 8002594:	d4ec      	bmi.n	8002570 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800259c:	e7f5      	b.n	800258a <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800259e:	f7fe fd19 	bl	8000fd4 <HAL_GetTick>
 80025a2:	1bc0      	subs	r0, r0, r7
 80025a4:	2802      	cmp	r0, #2
 80025a6:	d9c4      	bls.n	8002532 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80025a8:	2003      	movs	r0, #3
 80025aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025ac:	6921      	ldr	r1, [r4, #16]
 80025ae:	68eb      	ldr	r3, [r5, #12]
 80025b0:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80025b4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80025b8:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80025c2:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025ca:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fd02 	bl	8000fd4 <HAL_GetTick>
 80025d0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	d513      	bpl.n	8002600 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025d8:	6923      	ldr	r3, [r4, #16]
 80025da:	69aa      	ldr	r2, [r5, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	6123      	str	r3, [r4, #16]
 80025e0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80025e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e4:	6923      	ldr	r3, [r4, #16]
 80025e6:	6968      	ldr	r0, [r5, #20]
 80025e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025ec:	0840      	lsrs	r0, r0, #1
 80025ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f2:	3801      	subs	r0, #1
 80025f4:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80025f8:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80025fc:	6123      	str	r3, [r4, #16]
 80025fe:	e7e1      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002600:	f7fe fce8 	bl	8000fd4 <HAL_GetTick>
 8002604:	1b80      	subs	r0, r0, r6
 8002606:	2802      	cmp	r0, #2
 8002608:	d9e3      	bls.n	80025d2 <RCCEx_PLLSAI1_Config+0xde>
 800260a:	e7cd      	b.n	80025a8 <RCCEx_PLLSAI1_Config+0xb4>
 800260c:	40021000 	.word	0x40021000

08002610 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002612:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <RCCEx_PLLSAI2_Config+0xf8>)
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	f012 0f03 	tst.w	r2, #3
{
 800261a:	4605      	mov	r5, r0
 800261c:	460e      	mov	r6, r1
 800261e:	461c      	mov	r4, r3
 8002620:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002622:	d028      	beq.n	8002676 <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	4282      	cmp	r2, r0
 800262c:	d13a      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x94>
       ||
 800262e:	2a00      	cmp	r2, #0
 8002630:	d038      	beq.n	80026a4 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002632:	68db      	ldr	r3, [r3, #12]
       ||
 8002634:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002636:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800263a:	3301      	adds	r3, #1
       ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d131      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002646:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe fcc4 	bl	8000fd4 <HAL_GetTick>
 800264c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	d430      	bmi.n	80026b6 <RCCEx_PLLSAI2_Config+0xa6>
 8002654:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002656:	2e00      	cmp	r6, #0
 8002658:	d034      	beq.n	80026c4 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800265a:	6963      	ldr	r3, [r4, #20]
 800265c:	6929      	ldr	r1, [r5, #16]
 800265e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002662:	0849      	lsrs	r1, r1, #1
 8002664:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002668:	3901      	subs	r1, #1
 800266a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800266e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002672:	6163      	str	r3, [r4, #20]
 8002674:	e032      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002676:	2802      	cmp	r0, #2
 8002678:	d010      	beq.n	800269c <RCCEx_PLLSAI2_Config+0x8c>
 800267a:	2803      	cmp	r0, #3
 800267c:	d014      	beq.n	80026a8 <RCCEx_PLLSAI2_Config+0x98>
 800267e:	2801      	cmp	r0, #1
 8002680:	d110      	bne.n	80026a4 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	079f      	lsls	r7, r3, #30
 8002686:	d538      	bpl.n	80026fa <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002688:	68e3      	ldr	r3, [r4, #12]
 800268a:	686a      	ldr	r2, [r5, #4]
 800268c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002690:	3a01      	subs	r2, #1
 8002692:	4318      	orrs	r0, r3
 8002694:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002698:	60e0      	str	r0, [r4, #12]
 800269a:	e7d1      	b.n	8002640 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026a2:	d1f1      	bne.n	8002688 <RCCEx_PLLSAI2_Config+0x78>
 80026a4:	2001      	movs	r0, #1
 80026a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	0391      	lsls	r1, r2, #14
 80026ac:	d4ec      	bmi.n	8002688 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80026b4:	e7f5      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026b6:	f7fe fc8d 	bl	8000fd4 <HAL_GetTick>
 80026ba:	1bc0      	subs	r0, r0, r7
 80026bc:	2802      	cmp	r0, #2
 80026be:	d9c6      	bls.n	800264e <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80026c0:	2003      	movs	r0, #3
 80026c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026c4:	6962      	ldr	r2, [r4, #20]
 80026c6:	68eb      	ldr	r3, [r5, #12]
 80026c8:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80026cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026d0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80026da:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe fc76 	bl	8000fd4 <HAL_GetTick>
 80026e8:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	d505      	bpl.n	80026fc <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026f0:	6963      	ldr	r3, [r4, #20]
 80026f2:	696a      	ldr	r2, [r5, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	6163      	str	r3, [r4, #20]
 80026f8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80026fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026fc:	f7fe fc6a 	bl	8000fd4 <HAL_GetTick>
 8002700:	1b80      	subs	r0, r0, r6
 8002702:	2802      	cmp	r0, #2
 8002704:	d9f1      	bls.n	80026ea <RCCEx_PLLSAI2_Config+0xda>
 8002706:	e7db      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0xb0>
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_RCCEx_PeriphCLKConfig>:
{
 800270c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002710:	6806      	ldr	r6, [r0, #0]
 8002712:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002716:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002718:	d024      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800271a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800271c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002720:	d02c      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002722:	d802      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002724:	b1c1      	cbz	r1, 8002758 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002726:	2601      	movs	r6, #1
 8002728:	e01c      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800272a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002730:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002734:	d1f7      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002736:	4a4d      	ldr	r2, [pc, #308]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002738:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800273a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800273e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002742:	430b      	orrs	r3, r1
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002748:	2600      	movs	r6, #0
 800274a:	e00b      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	68d3      	ldr	r3, [r2, #12]
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	60d3      	str	r3, [r2, #12]
      break;
 8002756:	e7ee      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002758:	3004      	adds	r0, #4
 800275a:	f7ff fecb 	bl	80024f4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800275e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002760:	2800      	cmp	r0, #0
 8002762:	d0e8      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	04d8      	lsls	r0, r3, #19
 8002768:	d506      	bpl.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800276a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800276c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002770:	d074      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002772:	d808      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002774:	b1a9      	cbz	r1, 80027a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002776:	2601      	movs	r6, #1
 8002778:	4635      	mov	r5, r6
 800277a:	e021      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800277c:	2100      	movs	r1, #0
 800277e:	3020      	adds	r0, #32
 8002780:	f7ff ff46 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8002784:	e7eb      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002786:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 800278c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002790:	d1f1      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002792:	4635      	mov	r5, r6
 8002794:	e009      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002796:	4a35      	ldr	r2, [pc, #212]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002798:	68d3      	ldr	r3, [r2, #12]
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e7f7      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a2:	1d20      	adds	r0, r4, #4
 80027a4:	f7ff fea6 	bl	80024f4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	d15c      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ae:	4a2f      	ldr	r2, [pc, #188]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80027b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80027b6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80027ba:	430b      	orrs	r3, r1
 80027bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	6823      	ldr	r3, [r4, #0]
 80027c2:	0399      	lsls	r1, r3, #14
 80027c4:	f140 814f 	bpl.w	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027c8:	4f28      	ldr	r7, [pc, #160]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027cc:	00da      	lsls	r2, r3, #3
 80027ce:	f140 8176 	bpl.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002870 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80027da:	f8d9 3000 	ldr.w	r3, [r9]
 80027de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e2:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80027e6:	f7fe fbf5 	bl	8000fd4 <HAL_GetTick>
 80027ea:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ec:	f8d9 3000 	ldr.w	r3, [r9]
 80027f0:	05db      	lsls	r3, r3, #23
 80027f2:	d53f      	bpl.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 80027f4:	2d00      	cmp	r5, #0
 80027f6:	d144      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027fc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002800:	d015      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002802:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002806:	4293      	cmp	r3, r2
 8002808:	d011      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800280a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002812:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002816:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800281e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002822:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002826:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800282a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800282e:	07d8      	lsls	r0, r3, #31
 8002830:	d509      	bpl.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002832:	f7fe fbcf 	bl	8000fd4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800283a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002840:	0799      	lsls	r1, r3, #30
 8002842:	f140 8109 	bpl.w	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002846:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800284a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800284e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002858:	4635      	mov	r5, r6
 800285a:	e012      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800285c:	2100      	movs	r1, #0
 800285e:	f104 0020 	add.w	r0, r4, #32
 8002862:	f7ff fed5 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8002866:	e79f      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002868:	462e      	mov	r6, r5
 800286a:	e7a9      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002874:	f7fe fbae 	bl	8000fd4 <HAL_GetTick>
 8002878:	eba0 000a 	sub.w	r0, r0, sl
 800287c:	2802      	cmp	r0, #2
 800287e:	d9b5      	bls.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002880:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002882:	f1b8 0f00 	cmp.w	r8, #0
 8002886:	d003      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288e:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	07da      	lsls	r2, r3, #31
 8002894:	d508      	bpl.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002896:	4990      	ldr	r1, [pc, #576]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002898:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800289a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800289e:	f022 0203 	bic.w	r2, r2, #3
 80028a2:	4302      	orrs	r2, r0
 80028a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a8:	079f      	lsls	r7, r3, #30
 80028aa:	d508      	bpl.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028ac:	498a      	ldr	r1, [pc, #552]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80028b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028b4:	f022 020c 	bic.w	r2, r2, #12
 80028b8:	4302      	orrs	r2, r0
 80028ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028be:	075e      	lsls	r6, r3, #29
 80028c0:	d508      	bpl.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028c2:	4985      	ldr	r1, [pc, #532]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028c4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80028c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028ca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80028ce:	4302      	orrs	r2, r0
 80028d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d4:	0718      	lsls	r0, r3, #28
 80028d6:	d508      	bpl.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028d8:	497f      	ldr	r1, [pc, #508]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028da:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80028dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80028e4:	4302      	orrs	r2, r0
 80028e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ea:	06d9      	lsls	r1, r3, #27
 80028ec:	d508      	bpl.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ee:	497a      	ldr	r1, [pc, #488]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80028f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80028f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80028f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028fa:	4302      	orrs	r2, r0
 80028fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002900:	069a      	lsls	r2, r3, #26
 8002902:	d508      	bpl.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002904:	4974      	ldr	r1, [pc, #464]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002906:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002908:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800290c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002910:	4302      	orrs	r2, r0
 8002912:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002916:	059f      	lsls	r7, r3, #22
 8002918:	d508      	bpl.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800291a:	496f      	ldr	r1, [pc, #444]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800291c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800291e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002922:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002926:	4302      	orrs	r2, r0
 8002928:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800292c:	055e      	lsls	r6, r3, #21
 800292e:	d508      	bpl.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002930:	4969      	ldr	r1, [pc, #420]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002932:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002934:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002938:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800293c:	4302      	orrs	r2, r0
 800293e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	0658      	lsls	r0, r3, #25
 8002944:	d508      	bpl.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002946:	4964      	ldr	r1, [pc, #400]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002948:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800294a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800294e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002952:	4302      	orrs	r2, r0
 8002954:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002958:	0619      	lsls	r1, r3, #24
 800295a:	d508      	bpl.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800295c:	495e      	ldr	r1, [pc, #376]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800295e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002960:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002964:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002968:	4302      	orrs	r2, r0
 800296a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800296e:	05da      	lsls	r2, r3, #23
 8002970:	d508      	bpl.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002972:	4959      	ldr	r1, [pc, #356]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002976:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800297a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800297e:	4302      	orrs	r2, r0
 8002980:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002984:	049b      	lsls	r3, r3, #18
 8002986:	d50f      	bpl.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002988:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800298a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800298c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002990:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002994:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002996:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800299e:	d164      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	68d3      	ldr	r3, [r2, #12]
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	031f      	lsls	r7, r3, #12
 80029ac:	d50f      	bpl.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ae:	4a4a      	ldr	r2, [pc, #296]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80029b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029b6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80029ba:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029bc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029c4:	d15c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c6:	68d3      	ldr	r3, [r2, #12]
 80029c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029cc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	035e      	lsls	r6, r3, #13
 80029d2:	d50f      	bpl.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d4:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029d6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80029d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80029dc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80029e0:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029e2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ea:	d154      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	68d3      	ldr	r3, [r2, #12]
 80029ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f2:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	0458      	lsls	r0, r3, #17
 80029f8:	d512      	bpl.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029fa:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80029fc:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80029fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a02:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a06:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a08:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a10:	d14c      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a12:	2102      	movs	r1, #2
 8002a14:	1d20      	adds	r0, r4, #4
 8002a16:	f7ff fd6d 	bl	80024f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	bf18      	it	ne
 8002a1e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	0411      	lsls	r1, r2, #16
 8002a24:	d508      	bpl.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a26:	492c      	ldr	r1, [pc, #176]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a28:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002a2a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a32:	4303      	orrs	r3, r0
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a38:	03d3      	lsls	r3, r2, #15
 8002a3a:	d509      	bpl.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a3c:	4a26      	ldr	r2, [pc, #152]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002a3e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002a42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a4a:	430b      	orrs	r3, r1
 8002a4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002a50:	4628      	mov	r0, r5
 8002a52:	b002      	add	sp, #8
 8002a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fabc 	bl	8000fd4 <HAL_GetTick>
 8002a5c:	1b40      	subs	r0, r0, r5
 8002a5e:	4548      	cmp	r0, r9
 8002a60:	f67f aeec 	bls.w	800283c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002a64:	e70c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002a66:	4635      	mov	r5, r6
 8002a68:	e712      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a6a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a6e:	d19b      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a70:	2101      	movs	r1, #1
 8002a72:	1d20      	adds	r0, r4, #4
 8002a74:	f7ff fd3e 	bl	80024f4 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	bf18      	it	ne
 8002a7c:	4605      	movne	r5, r0
 8002a7e:	e793      	b.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a80:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a84:	d1a3      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a86:	2101      	movs	r1, #1
 8002a88:	1d20      	adds	r0, r4, #4
 8002a8a:	f7ff fd33 	bl	80024f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	bf18      	it	ne
 8002a92:	4605      	movne	r5, r0
 8002a94:	e79b      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a96:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002a9a:	d1ab      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	1d20      	adds	r0, r4, #4
 8002aa0:	f7ff fd28 	bl	80024f4 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	bf18      	it	ne
 8002aa8:	4605      	movne	r5, r0
 8002aaa:	e7a3      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002aac:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002ab0:	d1b6      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ab2:	2102      	movs	r1, #2
 8002ab4:	f104 0020 	add.w	r0, r4, #32
 8002ab8:	f7ff fdaa 	bl	8002610 <RCCEx_PLLSAI2_Config>
 8002abc:	e7ad      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ad0:	f04f 0801 	mov.w	r8, #1
 8002ad4:	e67f      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000

08002adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ae0:	2244      	movs	r2, #68	; 0x44
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	a805      	add	r0, sp, #20
 8002ae6:	f000 fa21 	bl	8002f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aea:	2214      	movs	r2, #20
 8002aec:	2100      	movs	r1, #0
 8002aee:	4668      	mov	r0, sp
 8002af0:	f000 fa1c 	bl	8002f2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002af4:	2288      	movs	r2, #136	; 0x88
 8002af6:	2100      	movs	r1, #0
 8002af8:	a816      	add	r0, sp, #88	; 0x58
 8002afa:	f000 fa17 	bl	8002f2c <memset>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002afe:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b00:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b02:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b04:	2710      	movs	r7, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b06:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b08:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002b0a:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b0c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002b0e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b10:	9705      	str	r7, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b12:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b14:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002b16:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b18:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b1a:	9613      	str	r6, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b1c:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b1e:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b20:	f7ff f9f0 	bl	8001f04 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b24:	200f      	movs	r0, #15
 8002b26:	2303      	movs	r3, #3
 8002b28:	e88d 0009 	stmia.w	sp, {r0, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b2c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b2e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b30:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b32:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b34:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b36:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b38:	f7ff fc46 	bl	80023c8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b40:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b46:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b48:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002b4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b4e:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002b50:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002b52:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002b54:	9719      	str	r7, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002b56:	961a      	str	r6, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002b58:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002b5a:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b5c:	f7ff fdd6 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b64:	f7ff f908 	bl	8001d78 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8002b68:	b039      	add	sp, #228	; 0xe4
 8002b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b6c:	0000      	movs	r0, r0
	...

08002b70 <main>:
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8002b74:	f7fe fa12 	bl	8000f9c <HAL_Init>
  SystemClock_Config();
 8002b78:	f7ff ffb0 	bl	8002adc <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	2214      	movs	r2, #20
 8002b7e:	2100      	movs	r1, #0
 8002b80:	a806      	add	r0, sp, #24
 8002b82:	f000 f9d3 	bl	8002f2c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <main+0x130>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002b88:	4846      	ldr	r0, [pc, #280]	; (8002ca4 <main+0x134>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 8002b8c:	4c46      	ldr	r4, [pc, #280]	; (8002ca8 <main+0x138>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8e:	f042 0204 	orr.w	r2, r2, #4
 8002b92:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b96:	f002 0204 	and.w	r2, r2, #4
 8002b9a:	9201      	str	r2, [sp, #4]
 8002b9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ba0:	f042 0202 	orr.w	r2, r2, #2
 8002ba4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002bb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000

  /*Configure GPIO pin : LED_Green_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 8002bba:	f7ff f8c9 	bl	8001d50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	a906      	add	r1, sp, #24
 8002bc4:	4837      	ldr	r0, [pc, #220]	; (8002ca4 <main+0x134>)
  GPIO_InitStruct.Pin = LED_Green_Pin;
 8002bc6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_Green_GPIO_Port, &GPIO_InitStruct);
 8002bce:	f7fe ffe3 	bl	8001b98 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002bd2:	2218      	movs	r2, #24
 8002bd4:	eb0d 0002 	add.w	r0, sp, r2
 8002bd8:	4629      	mov	r1, r5
  ADC_MultiModeTypeDef multimode = {0};
 8002bda:	9503      	str	r5, [sp, #12]
 8002bdc:	9504      	str	r5, [sp, #16]
 8002bde:	9505      	str	r5, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002be0:	f000 f9a4 	bl	8002f2c <memset>
  hadc1.Instance = ADC1;
 8002be4:	4b31      	ldr	r3, [pc, #196]	; (8002cac <main+0x13c>)
  hadc1.Init.NbrOfConversion = 1;
 8002be6:	61e7      	str	r7, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002be8:	2604      	movs	r6, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bea:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002bec:	e884 0028 	stmia.w	r4, {r3, r5}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bf0:	6166      	str	r6, [r4, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bf2:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bf4:	60e5      	str	r5, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bf6:	6125      	str	r5, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002bf8:	7625      	strb	r5, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bfa:	7665      	strb	r5, [r4, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bfc:	f884 5020 	strb.w	r5, [r4, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c00:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c02:	62e5      	str	r5, [r4, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c04:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c08:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002c0a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c0e:	f7fe fa15 	bl	800103c <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002c12:	a903      	add	r1, sp, #12
 8002c14:	4620      	mov	r0, r4
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002c16:	9503      	str	r5, [sp, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002c18:	f7fe fedc 	bl	80019d4 <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <main+0x140>)
 8002c1e:	9306      	str	r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c20:	2306      	movs	r3, #6
 8002c22:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c24:	a906      	add	r1, sp, #24
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c26:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c28:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002c2a:	9608      	str	r6, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c2c:	960a      	str	r6, [sp, #40]	; 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002c2e:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.Offset = 0;
 8002c30:	950b      	str	r5, [sp, #44]	; 0x2c
	  LM35temp = (LM35Value/4095.0)*329.8;  //convert the value to temperature
 8002c32:	f20f 095c 	addw	r9, pc, #92	; 0x5c
 8002c36:	e9d9 8900 	ldrd	r8, r9, [r9]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c3a:	f7fe fc07 	bl	800144c <HAL_ADC_ConfigChannel>
	  LM35temp = (LM35Value/4095.0)*329.8;  //convert the value to temperature
 8002c3e:	a716      	add	r7, pc, #88	; (adr r7, 8002c98 <main+0x128>)
 8002c40:	e9d7 6700 	ldrd	r6, r7, [r7]
	  HAL_ADC_Start_IT(&hadc1);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7fe fe0f 	bl	8001868 <HAL_ADC_Start_IT>
	  HAL_GPIO_TogglePin(LED_Green_GPIO_Port, LED_Green_Pin);
 8002c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c4e:	4815      	ldr	r0, [pc, #84]	; (8002ca4 <main+0x134>)
 8002c50:	f7ff f883 	bl	8001d5a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c58:	f7fe f9c2 	bl	8000fe0 <HAL_Delay>
	  LM35temp = (LM35Value/4095.0)*329.8;  //convert the value to temperature
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <main+0x144>)
 8002c5e:	681d      	ldr	r5, [r3, #0]
 8002c60:	4628      	mov	r0, r5
 8002c62:	f7fd fc4f 	bl	8000504 <__aeabi_ui2d>
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	f7fd fdeb 	bl	8000844 <__aeabi_ddiv>
 8002c6e:	4632      	mov	r2, r6
 8002c70:	463b      	mov	r3, r7
 8002c72:	f7fd fcbd 	bl	80005f0 <__aeabi_dmul>
 8002c76:	f7fd ff93 	bl	8000ba0 <__aeabi_d2f>
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <main+0x148>)
 8002c7c:	6018      	str	r0, [r3, #0]
	  printf("LM35Value: %lu    LM35temp: %0.1f\n", LM35Value, LM35temp);
 8002c7e:	f7fd fc63 	bl	8000548 <__aeabi_f2d>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	480d      	ldr	r0, [pc, #52]	; (8002cbc <main+0x14c>)
 8002c88:	4629      	mov	r1, r5
 8002c8a:	f000 f957 	bl	8002f3c <printf>
 8002c8e:	e7d9      	b.n	8002c44 <main+0xd4>
 8002c90:	00000000 	.word	0x00000000
 8002c94:	40affe00 	.word	0x40affe00
 8002c98:	cccccccd 	.word	0xcccccccd
 8002c9c:	40749ccc 	.word	0x40749ccc
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	48000400 	.word	0x48000400
 8002ca8:	200006d8 	.word	0x200006d8
 8002cac:	50040000 	.word	0x50040000
 8002cb0:	3ac04000 	.word	0x3ac04000
 8002cb4:	2000073c 	.word	0x2000073c
 8002cb8:	200006d4 	.word	0x200006d4
 8002cbc:	080069d8 	.word	0x080069d8

08002cc0 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002cc4:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8002cc8:	07d1      	lsls	r1, r2, #31
 8002cca:	d503      	bpl.n	8002cd4 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002ccc:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002cd0:	07d2      	lsls	r2, r2, #31
 8002cd2:	d402      	bmi.n	8002cda <__io_putchar+0x1a>
/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
	ITM_SendChar(ch);
	return 0;
}
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8002cd8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	2a00      	cmp	r2, #0
 8002cde:	d0fb      	beq.n	8002cd8 <__io_putchar+0x18>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002ce0:	b2c0      	uxtb	r0, r0
 8002ce2:	7018      	strb	r0, [r3, #0]
 8002ce4:	e7f6      	b.n	8002cd4 <__io_putchar+0x14>
	...

08002ce8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1)
{
 8002ce8:	b508      	push	{r3, lr}

	LM35Value = HAL_ADC_GetValue(hadc1); // Read the ADC converted value
 8002cea:	f7fe fa87 	bl	80011fc <HAL_ADC_GetValue>
 8002cee:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <HAL_ADC_ConvCpltCallback+0xc>)
 8002cf0:	6018      	str	r0, [r3, #0]
 8002cf2:	bd08      	pop	{r3, pc}
 8002cf4:	2000073c 	.word	0x2000073c

08002cf8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_MspInit+0x2c>)
 8002cfa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
 8002d02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8002d04:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	f002 0201 	and.w	r2, r2, #1
 8002d0a:	9200      	str	r2, [sp, #0]
 8002d0c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58
 8002d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d20:	b002      	add	sp, #8
 8002d22:	4770      	bx	lr
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2e:	2214      	movs	r2, #20
 8002d30:	2100      	movs	r1, #0
 8002d32:	a803      	add	r0, sp, #12
 8002d34:	f000 f8fa 	bl	8002f2c <memset>
  if(hadc->Instance==ADC1)
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_ADC_MspInit+0x68>)
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d125      	bne.n	8002d8c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d40:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002d44:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC5     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d48:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	4811      	ldr	r0, [pc, #68]	; (8002d94 <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d52:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d56:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d5a:	9201      	str	r2, [sp, #4]
 8002d5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d60:	f042 0204 	orr.w	r2, r2, #4
 8002d64:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	9302      	str	r3, [sp, #8]
 8002d6e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d70:	2320      	movs	r3, #32
 8002d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d74:	230b      	movs	r3, #11
 8002d76:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d78:	f7fe ff0e 	bl	8001b98 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2012      	movs	r0, #18
 8002d80:	4611      	mov	r1, r2
 8002d82:	f7fe feb1 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d86:	2012      	movs	r0, #18
 8002d88:	f7fe fee2 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d8c:	b008      	add	sp, #32
 8002d8e:	bd10      	pop	{r4, pc}
 8002d90:	50040000 	.word	0x50040000
 8002d94:	48000800 	.word	0x48000800

08002d98 <NMI_Handler>:
 8002d98:	4770      	bx	lr

08002d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler>

08002d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	e7fe      	b.n	8002d9e <BusFault_Handler>

08002da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da0:	e7fe      	b.n	8002da0 <UsageFault_Handler>

08002da2 <SVC_Handler>:
 8002da2:	4770      	bx	lr

08002da4 <DebugMon_Handler>:
 8002da4:	4770      	bx	lr

08002da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da6:	4770      	bx	lr

08002da8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002da8:	f7fe b908 	b.w	8000fbc <HAL_IncTick>

08002dac <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002dac:	4801      	ldr	r0, [pc, #4]	; (8002db4 <ADC1_2_IRQHandler+0x8>)
 8002dae:	f7fe ba2b 	b.w	8001208 <HAL_ADC_IRQHandler>
 8002db2:	bf00      	nop
 8002db4:	200006d8 	.word	0x200006d8

08002db8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	460e      	mov	r6, r1
 8002dbc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	1ba3      	subs	r3, r4, r6
 8002dc2:	429d      	cmp	r5, r3
 8002dc4:	dc01      	bgt.n	8002dca <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002dca:	f3af 8000 	nop.w
 8002dce:	f804 0b01 	strb.w	r0, [r4], #1
 8002dd2:	e7f5      	b.n	8002dc0 <_read+0x8>

08002dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	460e      	mov	r6, r1
 8002dd8:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	460c      	mov	r4, r1
 8002ddc:	1ba3      	subs	r3, r4, r6
 8002dde:	429d      	cmp	r5, r3
 8002de0:	dc01      	bgt.n	8002de6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002de2:	4628      	mov	r0, r5
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002de6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002dea:	f7ff ff69 	bl	8002cc0 <__io_putchar>
 8002dee:	e7f5      	b.n	8002ddc <_write+0x8>

08002df0 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002df0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <_sbrk+0x2c>)
 8002df4:	6819      	ldr	r1, [r3, #0]
{
 8002df6:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002df8:	b909      	cbnz	r1, 8002dfe <_sbrk+0xe>
		heap_end = &end;
 8002dfa:	4909      	ldr	r1, [pc, #36]	; (8002e20 <_sbrk+0x30>)
 8002dfc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002dfe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002e00:	4669      	mov	r1, sp
 8002e02:	4402      	add	r2, r0
 8002e04:	428a      	cmp	r2, r1
 8002e06:	d906      	bls.n	8002e16 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002e08:	f000 f866 	bl	8002ed8 <__errno>
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002e16:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002e18:	bd08      	pop	{r3, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000698 	.word	0x20000698
 8002e20:	20000750 	.word	0x20000750

08002e24 <_close>:

int _close(int file)
{
	return -1;
}
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	4770      	bx	lr

08002e2a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002e30:	2000      	movs	r0, #0
 8002e32:	4770      	bx	lr

08002e34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002e34:	2001      	movs	r0, #1
 8002e36:	4770      	bx	lr

08002e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002e38:	2000      	movs	r0, #0
 8002e3a:	4770      	bx	lr

08002e3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e3c:	490f      	ldr	r1, [pc, #60]	; (8002e7c <SystemInit+0x40>)
 8002e3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <SystemInit+0x44>)
 8002e4c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e4e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002e56:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002e5e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002e62:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e70:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e72:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e78:	608b      	str	r3, [r1, #8]
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00
 8002e80:	40021000 	.word	0x40021000

08002e84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ebc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e8a:	e003      	b.n	8002e94 <LoopCopyDataInit>

08002e8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e92:	3104      	adds	r1, #4

08002e94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e9c:	d3f6      	bcc.n	8002e8c <CopyDataInit>
	ldr	r2, =_sbss
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ea0:	e002      	b.n	8002ea8 <LoopFillZerobss>

08002ea2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ea2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ea4:	f842 3b04 	str.w	r3, [r2], #4

08002ea8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <LoopForever+0x16>)
	cmp	r2, r3
 8002eaa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002eac:	d3f9      	bcc.n	8002ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002eae:	f7ff ffc5 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f000 f817 	bl	8002ee4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eb6:	f7ff fe5b 	bl	8002b70 <main>

08002eba <LoopForever>:

LoopForever:
    b LoopForever
 8002eba:	e7fe      	b.n	8002eba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ebc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002ec0:	08006d20 	.word	0x08006d20
	ldr	r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ec8:	2000067c 	.word	0x2000067c
	ldr	r2, =_sbss
 8002ecc:	2000067c 	.word	0x2000067c
	ldr	r3, = _ebss
 8002ed0:	20000750 	.word	0x20000750

08002ed4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC3_IRQHandler>
	...

08002ed8 <__errno>:
 8002ed8:	4b01      	ldr	r3, [pc, #4]	; (8002ee0 <__errno+0x8>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	2000000c 	.word	0x2000000c

08002ee4 <__libc_init_array>:
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4e0d      	ldr	r6, [pc, #52]	; (8002f1c <__libc_init_array+0x38>)
 8002ee8:	4c0d      	ldr	r4, [pc, #52]	; (8002f20 <__libc_init_array+0x3c>)
 8002eea:	1ba4      	subs	r4, r4, r6
 8002eec:	10a4      	asrs	r4, r4, #2
 8002eee:	2500      	movs	r5, #0
 8002ef0:	42a5      	cmp	r5, r4
 8002ef2:	d109      	bne.n	8002f08 <__libc_init_array+0x24>
 8002ef4:	4e0b      	ldr	r6, [pc, #44]	; (8002f24 <__libc_init_array+0x40>)
 8002ef6:	4c0c      	ldr	r4, [pc, #48]	; (8002f28 <__libc_init_array+0x44>)
 8002ef8:	f003 fd62 	bl	80069c0 <_init>
 8002efc:	1ba4      	subs	r4, r4, r6
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	2500      	movs	r5, #0
 8002f02:	42a5      	cmp	r5, r4
 8002f04:	d105      	bne.n	8002f12 <__libc_init_array+0x2e>
 8002f06:	bd70      	pop	{r4, r5, r6, pc}
 8002f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0c:	4798      	blx	r3
 8002f0e:	3501      	adds	r5, #1
 8002f10:	e7ee      	b.n	8002ef0 <__libc_init_array+0xc>
 8002f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f16:	4798      	blx	r3
 8002f18:	3501      	adds	r5, #1
 8002f1a:	e7f2      	b.n	8002f02 <__libc_init_array+0x1e>
 8002f1c:	08006d18 	.word	0x08006d18
 8002f20:	08006d18 	.word	0x08006d18
 8002f24:	08006d18 	.word	0x08006d18
 8002f28:	08006d1c 	.word	0x08006d1c

08002f2c <memset>:
 8002f2c:	4402      	add	r2, r0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d100      	bne.n	8002f36 <memset+0xa>
 8002f34:	4770      	bx	lr
 8002f36:	f803 1b01 	strb.w	r1, [r3], #1
 8002f3a:	e7f9      	b.n	8002f30 <memset+0x4>

08002f3c <printf>:
 8002f3c:	b40f      	push	{r0, r1, r2, r3}
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <printf+0x2c>)
 8002f40:	b513      	push	{r0, r1, r4, lr}
 8002f42:	681c      	ldr	r4, [r3, #0]
 8002f44:	b124      	cbz	r4, 8002f50 <printf+0x14>
 8002f46:	69a3      	ldr	r3, [r4, #24]
 8002f48:	b913      	cbnz	r3, 8002f50 <printf+0x14>
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f002 f87c 	bl	8005048 <__sinit>
 8002f50:	ab05      	add	r3, sp, #20
 8002f52:	9a04      	ldr	r2, [sp, #16]
 8002f54:	68a1      	ldr	r1, [r4, #8]
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f000 f809 	bl	8002f70 <_vfprintf_r>
 8002f5e:	b002      	add	sp, #8
 8002f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f64:	b004      	add	sp, #16
 8002f66:	4770      	bx	lr
 8002f68:	2000000c 	.word	0x2000000c
 8002f6c:	00000000 	.word	0x00000000

08002f70 <_vfprintf_r>:
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	b0bd      	sub	sp, #244	; 0xf4
 8002f76:	4688      	mov	r8, r1
 8002f78:	4615      	mov	r5, r2
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	461f      	mov	r7, r3
 8002f7e:	4683      	mov	fp, r0
 8002f80:	f002 fa12 	bl	80053a8 <_localeconv_r>
 8002f84:	6803      	ldr	r3, [r0, #0]
 8002f86:	930d      	str	r3, [sp, #52]	; 0x34
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd f971 	bl	8000270 <strlen>
 8002f8e:	9009      	str	r0, [sp, #36]	; 0x24
 8002f90:	f1bb 0f00 	cmp.w	fp, #0
 8002f94:	d005      	beq.n	8002fa2 <_vfprintf_r+0x32>
 8002f96:	f8db 3018 	ldr.w	r3, [fp, #24]
 8002f9a:	b913      	cbnz	r3, 8002fa2 <_vfprintf_r+0x32>
 8002f9c:	4658      	mov	r0, fp
 8002f9e:	f002 f853 	bl	8005048 <__sinit>
 8002fa2:	4b99      	ldr	r3, [pc, #612]	; (8003208 <_vfprintf_r+0x298>)
 8002fa4:	4598      	cmp	r8, r3
 8002fa6:	d137      	bne.n	8003018 <_vfprintf_r+0xa8>
 8002fa8:	f8db 8004 	ldr.w	r8, [fp, #4]
 8002fac:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8002fb0:	07d8      	lsls	r0, r3, #31
 8002fb2:	d407      	bmi.n	8002fc4 <_vfprintf_r+0x54>
 8002fb4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002fb8:	0599      	lsls	r1, r3, #22
 8002fba:	d403      	bmi.n	8002fc4 <_vfprintf_r+0x54>
 8002fbc:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8002fc0:	f002 fa02 	bl	80053c8 <__retarget_lock_acquire_recursive>
 8002fc4:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8002fc8:	049a      	lsls	r2, r3, #18
 8002fca:	d409      	bmi.n	8002fe0 <_vfprintf_r+0x70>
 8002fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fd0:	f8a8 300c 	strh.w	r3, [r8, #12]
 8002fd4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8002fd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fdc:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 8002fe0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8002fe4:	071e      	lsls	r6, r3, #28
 8002fe6:	d502      	bpl.n	8002fee <_vfprintf_r+0x7e>
 8002fe8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002fec:	bb03      	cbnz	r3, 8003030 <_vfprintf_r+0xc0>
 8002fee:	4641      	mov	r1, r8
 8002ff0:	4658      	mov	r0, fp
 8002ff2:	f001 f839 	bl	8004068 <__swsetup_r>
 8002ff6:	b1d8      	cbz	r0, 8003030 <_vfprintf_r+0xc0>
 8002ff8:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8002ffc:	07dd      	lsls	r5, r3, #31
 8002ffe:	d407      	bmi.n	8003010 <_vfprintf_r+0xa0>
 8003000:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003004:	059c      	lsls	r4, r3, #22
 8003006:	d403      	bmi.n	8003010 <_vfprintf_r+0xa0>
 8003008:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800300c:	f002 f9dd 	bl	80053ca <__retarget_lock_release_recursive>
 8003010:	f04f 33ff 	mov.w	r3, #4294967295
 8003014:	930a      	str	r3, [sp, #40]	; 0x28
 8003016:	e026      	b.n	8003066 <_vfprintf_r+0xf6>
 8003018:	4b7c      	ldr	r3, [pc, #496]	; (800320c <_vfprintf_r+0x29c>)
 800301a:	4598      	cmp	r8, r3
 800301c:	d102      	bne.n	8003024 <_vfprintf_r+0xb4>
 800301e:	f8db 8008 	ldr.w	r8, [fp, #8]
 8003022:	e7c3      	b.n	8002fac <_vfprintf_r+0x3c>
 8003024:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <_vfprintf_r+0x2a0>)
 8003026:	4598      	cmp	r8, r3
 8003028:	bf08      	it	eq
 800302a:	f8db 800c 	ldreq.w	r8, [fp, #12]
 800302e:	e7bd      	b.n	8002fac <_vfprintf_r+0x3c>
 8003030:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003034:	f003 021a 	and.w	r2, r3, #26
 8003038:	2a0a      	cmp	r2, #10
 800303a:	d118      	bne.n	800306e <_vfprintf_r+0xfe>
 800303c:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8003040:	2a00      	cmp	r2, #0
 8003042:	db14      	blt.n	800306e <_vfprintf_r+0xfe>
 8003044:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8003048:	07d0      	lsls	r0, r2, #31
 800304a:	d405      	bmi.n	8003058 <_vfprintf_r+0xe8>
 800304c:	0599      	lsls	r1, r3, #22
 800304e:	d403      	bmi.n	8003058 <_vfprintf_r+0xe8>
 8003050:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003054:	f002 f9b9 	bl	80053ca <__retarget_lock_release_recursive>
 8003058:	4623      	mov	r3, r4
 800305a:	462a      	mov	r2, r5
 800305c:	4641      	mov	r1, r8
 800305e:	4658      	mov	r0, fp
 8003060:	f000 ffc2 	bl	8003fe8 <__sbprintf>
 8003064:	900a      	str	r0, [sp, #40]	; 0x28
 8003066:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003068:	b03d      	add	sp, #244	; 0xf4
 800306a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306e:	ed9f 7b64 	vldr	d7, [pc, #400]	; 8003200 <_vfprintf_r+0x290>
 8003072:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003076:	2300      	movs	r3, #0
 8003078:	ac2c      	add	r4, sp, #176	; 0xb0
 800307a:	941f      	str	r4, [sp, #124]	; 0x7c
 800307c:	9321      	str	r3, [sp, #132]	; 0x84
 800307e:	9320      	str	r3, [sp, #128]	; 0x80
 8003080:	9505      	str	r5, [sp, #20]
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	9311      	str	r3, [sp, #68]	; 0x44
 8003086:	9310      	str	r3, [sp, #64]	; 0x40
 8003088:	930a      	str	r3, [sp, #40]	; 0x28
 800308a:	9d05      	ldr	r5, [sp, #20]
 800308c:	462b      	mov	r3, r5
 800308e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003092:	b112      	cbz	r2, 800309a <_vfprintf_r+0x12a>
 8003094:	2a25      	cmp	r2, #37	; 0x25
 8003096:	f040 8083 	bne.w	80031a0 <_vfprintf_r+0x230>
 800309a:	9b05      	ldr	r3, [sp, #20]
 800309c:	1aee      	subs	r6, r5, r3
 800309e:	d00d      	beq.n	80030bc <_vfprintf_r+0x14c>
 80030a0:	e884 0048 	stmia.w	r4, {r3, r6}
 80030a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030a6:	4433      	add	r3, r6
 80030a8:	9321      	str	r3, [sp, #132]	; 0x84
 80030aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030ac:	3301      	adds	r3, #1
 80030ae:	2b07      	cmp	r3, #7
 80030b0:	9320      	str	r3, [sp, #128]	; 0x80
 80030b2:	dc77      	bgt.n	80031a4 <_vfprintf_r+0x234>
 80030b4:	3408      	adds	r4, #8
 80030b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b8:	4433      	add	r3, r6
 80030ba:	930a      	str	r3, [sp, #40]	; 0x28
 80030bc:	782b      	ldrb	r3, [r5, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8739 	beq.w	8003f36 <_vfprintf_r+0xfc6>
 80030c4:	2300      	movs	r3, #0
 80030c6:	1c69      	adds	r1, r5, #1
 80030c8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80030cc:	461a      	mov	r2, r3
 80030ce:	f04f 3aff 	mov.w	sl, #4294967295
 80030d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80030d4:	461d      	mov	r5, r3
 80030d6:	200a      	movs	r0, #10
 80030d8:	1c4e      	adds	r6, r1, #1
 80030da:	7809      	ldrb	r1, [r1, #0]
 80030dc:	9605      	str	r6, [sp, #20]
 80030de:	9102      	str	r1, [sp, #8]
 80030e0:	9902      	ldr	r1, [sp, #8]
 80030e2:	3920      	subs	r1, #32
 80030e4:	2958      	cmp	r1, #88	; 0x58
 80030e6:	f200 841d 	bhi.w	8003924 <_vfprintf_r+0x9b4>
 80030ea:	e8df f011 	tbh	[pc, r1, lsl #1]
 80030ee:	00b3      	.short	0x00b3
 80030f0:	041b041b 	.word	0x041b041b
 80030f4:	041b00b8 	.word	0x041b00b8
 80030f8:	041b041b 	.word	0x041b041b
 80030fc:	041b041b 	.word	0x041b041b
 8003100:	00bb041b 	.word	0x00bb041b
 8003104:	041b0065 	.word	0x041b0065
 8003108:	00c700c4 	.word	0x00c700c4
 800310c:	00e4041b 	.word	0x00e4041b
 8003110:	00e700e7 	.word	0x00e700e7
 8003114:	00e700e7 	.word	0x00e700e7
 8003118:	00e700e7 	.word	0x00e700e7
 800311c:	00e700e7 	.word	0x00e700e7
 8003120:	041b00e7 	.word	0x041b00e7
 8003124:	041b041b 	.word	0x041b041b
 8003128:	041b041b 	.word	0x041b041b
 800312c:	041b041b 	.word	0x041b041b
 8003130:	041b041b 	.word	0x041b041b
 8003134:	011b041b 	.word	0x011b041b
 8003138:	041b0131 	.word	0x041b0131
 800313c:	041b0131 	.word	0x041b0131
 8003140:	041b041b 	.word	0x041b041b
 8003144:	00fa041b 	.word	0x00fa041b
 8003148:	041b041b 	.word	0x041b041b
 800314c:	041b0346 	.word	0x041b0346
 8003150:	041b041b 	.word	0x041b041b
 8003154:	041b041b 	.word	0x041b041b
 8003158:	041b03ad 	.word	0x041b03ad
 800315c:	0093041b 	.word	0x0093041b
 8003160:	041b041b 	.word	0x041b041b
 8003164:	041b041b 	.word	0x041b041b
 8003168:	041b041b 	.word	0x041b041b
 800316c:	041b041b 	.word	0x041b041b
 8003170:	041b041b 	.word	0x041b041b
 8003174:	006b010d 	.word	0x006b010d
 8003178:	01310131 	.word	0x01310131
 800317c:	00fd0131 	.word	0x00fd0131
 8003180:	041b006b 	.word	0x041b006b
 8003184:	0100041b 	.word	0x0100041b
 8003188:	0328041b 	.word	0x0328041b
 800318c:	037c0348 	.word	0x037c0348
 8003190:	041b0107 	.word	0x041b0107
 8003194:	041b038d 	.word	0x041b038d
 8003198:	041b03af 	.word	0x041b03af
 800319c:	03c7041b 	.word	0x03c7041b
 80031a0:	461d      	mov	r5, r3
 80031a2:	e773      	b.n	800308c <_vfprintf_r+0x11c>
 80031a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80031a6:	4641      	mov	r1, r8
 80031a8:	4658      	mov	r0, fp
 80031aa:	f002 fecc 	bl	8005f46 <__sprint_r>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 8699 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 80031b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80031b6:	e77e      	b.n	80030b6 <_vfprintf_r+0x146>
 80031b8:	2301      	movs	r3, #1
 80031ba:	222b      	movs	r2, #43	; 0x2b
 80031bc:	9905      	ldr	r1, [sp, #20]
 80031be:	e78b      	b.n	80030d8 <_vfprintf_r+0x168>
 80031c0:	460f      	mov	r7, r1
 80031c2:	e7fb      	b.n	80031bc <_vfprintf_r+0x24c>
 80031c4:	b10b      	cbz	r3, 80031ca <_vfprintf_r+0x25a>
 80031c6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80031ca:	06aa      	lsls	r2, r5, #26
 80031cc:	f140 80b0 	bpl.w	8003330 <_vfprintf_r+0x3c0>
 80031d0:	3707      	adds	r7, #7
 80031d2:	f027 0707 	bic.w	r7, r7, #7
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	e9d7 6700 	ldrd	r6, r7, [r7]
 80031de:	9304      	str	r3, [sp, #16]
 80031e0:	2e00      	cmp	r6, #0
 80031e2:	f177 0300 	sbcs.w	r3, r7, #0
 80031e6:	da06      	bge.n	80031f6 <_vfprintf_r+0x286>
 80031e8:	4276      	negs	r6, r6
 80031ea:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80031ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80031f2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80031f6:	2301      	movs	r3, #1
 80031f8:	e2d0      	b.n	800379c <_vfprintf_r+0x82c>
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
	...
 8003208:	08006ac4 	.word	0x08006ac4
 800320c:	08006ae4 	.word	0x08006ae4
 8003210:	08006aa4 	.word	0x08006aa4
 8003214:	b10b      	cbz	r3, 800321a <_vfprintf_r+0x2aa>
 8003216:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800321a:	4ba2      	ldr	r3, [pc, #648]	; (80034a4 <_vfprintf_r+0x534>)
 800321c:	9311      	str	r3, [sp, #68]	; 0x44
 800321e:	06a9      	lsls	r1, r5, #26
 8003220:	f140 8331 	bpl.w	8003886 <_vfprintf_r+0x916>
 8003224:	3707      	adds	r7, #7
 8003226:	f027 0707 	bic.w	r7, r7, #7
 800322a:	f107 0308 	add.w	r3, r7, #8
 800322e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	07eb      	lsls	r3, r5, #31
 8003236:	d50b      	bpl.n	8003250 <_vfprintf_r+0x2e0>
 8003238:	ea56 0307 	orrs.w	r3, r6, r7
 800323c:	d008      	beq.n	8003250 <_vfprintf_r+0x2e0>
 800323e:	2330      	movs	r3, #48	; 0x30
 8003240:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003244:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003248:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800324c:	f045 0502 	orr.w	r5, r5, #2
 8003250:	2302      	movs	r3, #2
 8003252:	e2a0      	b.n	8003796 <_vfprintf_r+0x826>
 8003254:	2a00      	cmp	r2, #0
 8003256:	d1b1      	bne.n	80031bc <_vfprintf_r+0x24c>
 8003258:	2301      	movs	r3, #1
 800325a:	2220      	movs	r2, #32
 800325c:	e7ae      	b.n	80031bc <_vfprintf_r+0x24c>
 800325e:	f045 0501 	orr.w	r5, r5, #1
 8003262:	e7ab      	b.n	80031bc <_vfprintf_r+0x24c>
 8003264:	683e      	ldr	r6, [r7, #0]
 8003266:	960b      	str	r6, [sp, #44]	; 0x2c
 8003268:	2e00      	cmp	r6, #0
 800326a:	f107 0104 	add.w	r1, r7, #4
 800326e:	daa7      	bge.n	80031c0 <_vfprintf_r+0x250>
 8003270:	4276      	negs	r6, r6
 8003272:	960b      	str	r6, [sp, #44]	; 0x2c
 8003274:	460f      	mov	r7, r1
 8003276:	f045 0504 	orr.w	r5, r5, #4
 800327a:	e79f      	b.n	80031bc <_vfprintf_r+0x24c>
 800327c:	9905      	ldr	r1, [sp, #20]
 800327e:	1c4e      	adds	r6, r1, #1
 8003280:	7809      	ldrb	r1, [r1, #0]
 8003282:	9102      	str	r1, [sp, #8]
 8003284:	292a      	cmp	r1, #42	; 0x2a
 8003286:	d010      	beq.n	80032aa <_vfprintf_r+0x33a>
 8003288:	f04f 0a00 	mov.w	sl, #0
 800328c:	9605      	str	r6, [sp, #20]
 800328e:	9902      	ldr	r1, [sp, #8]
 8003290:	3930      	subs	r1, #48	; 0x30
 8003292:	2909      	cmp	r1, #9
 8003294:	f63f af24 	bhi.w	80030e0 <_vfprintf_r+0x170>
 8003298:	fb00 1a0a 	mla	sl, r0, sl, r1
 800329c:	9905      	ldr	r1, [sp, #20]
 800329e:	460e      	mov	r6, r1
 80032a0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80032a4:	9102      	str	r1, [sp, #8]
 80032a6:	9605      	str	r6, [sp, #20]
 80032a8:	e7f1      	b.n	800328e <_vfprintf_r+0x31e>
 80032aa:	6839      	ldr	r1, [r7, #0]
 80032ac:	9605      	str	r6, [sp, #20]
 80032ae:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 80032b2:	3704      	adds	r7, #4
 80032b4:	e782      	b.n	80031bc <_vfprintf_r+0x24c>
 80032b6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80032ba:	e77f      	b.n	80031bc <_vfprintf_r+0x24c>
 80032bc:	2100      	movs	r1, #0
 80032be:	910b      	str	r1, [sp, #44]	; 0x2c
 80032c0:	9902      	ldr	r1, [sp, #8]
 80032c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80032c4:	3930      	subs	r1, #48	; 0x30
 80032c6:	fb00 1106 	mla	r1, r0, r6, r1
 80032ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80032cc:	9905      	ldr	r1, [sp, #20]
 80032ce:	460e      	mov	r6, r1
 80032d0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80032d4:	9102      	str	r1, [sp, #8]
 80032d6:	9902      	ldr	r1, [sp, #8]
 80032d8:	9605      	str	r6, [sp, #20]
 80032da:	3930      	subs	r1, #48	; 0x30
 80032dc:	2909      	cmp	r1, #9
 80032de:	d9ef      	bls.n	80032c0 <_vfprintf_r+0x350>
 80032e0:	e6fe      	b.n	80030e0 <_vfprintf_r+0x170>
 80032e2:	f045 0508 	orr.w	r5, r5, #8
 80032e6:	e769      	b.n	80031bc <_vfprintf_r+0x24c>
 80032e8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80032ec:	e766      	b.n	80031bc <_vfprintf_r+0x24c>
 80032ee:	9905      	ldr	r1, [sp, #20]
 80032f0:	7809      	ldrb	r1, [r1, #0]
 80032f2:	296c      	cmp	r1, #108	; 0x6c
 80032f4:	d105      	bne.n	8003302 <_vfprintf_r+0x392>
 80032f6:	9905      	ldr	r1, [sp, #20]
 80032f8:	3101      	adds	r1, #1
 80032fa:	9105      	str	r1, [sp, #20]
 80032fc:	f045 0520 	orr.w	r5, r5, #32
 8003300:	e75c      	b.n	80031bc <_vfprintf_r+0x24c>
 8003302:	f045 0510 	orr.w	r5, r5, #16
 8003306:	e759      	b.n	80031bc <_vfprintf_r+0x24c>
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	9304      	str	r3, [sp, #16]
 800330c:	2600      	movs	r6, #0
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003314:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003318:	f04f 0a01 	mov.w	sl, #1
 800331c:	9608      	str	r6, [sp, #32]
 800331e:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8003322:	e11e      	b.n	8003562 <_vfprintf_r+0x5f2>
 8003324:	b10b      	cbz	r3, 800332a <_vfprintf_r+0x3ba>
 8003326:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800332a:	f045 0510 	orr.w	r5, r5, #16
 800332e:	e74c      	b.n	80031ca <_vfprintf_r+0x25a>
 8003330:	f015 0f10 	tst.w	r5, #16
 8003334:	f107 0304 	add.w	r3, r7, #4
 8003338:	d003      	beq.n	8003342 <_vfprintf_r+0x3d2>
 800333a:	683e      	ldr	r6, [r7, #0]
 800333c:	9304      	str	r3, [sp, #16]
 800333e:	17f7      	asrs	r7, r6, #31
 8003340:	e74e      	b.n	80031e0 <_vfprintf_r+0x270>
 8003342:	683e      	ldr	r6, [r7, #0]
 8003344:	9304      	str	r3, [sp, #16]
 8003346:	f015 0f40 	tst.w	r5, #64	; 0x40
 800334a:	bf18      	it	ne
 800334c:	b236      	sxthne	r6, r6
 800334e:	e7f6      	b.n	800333e <_vfprintf_r+0x3ce>
 8003350:	b10b      	cbz	r3, 8003356 <_vfprintf_r+0x3e6>
 8003352:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003356:	3707      	adds	r7, #7
 8003358:	f027 0707 	bic.w	r7, r7, #7
 800335c:	f107 0308 	add.w	r3, r7, #8
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	ed97 7b00 	vldr	d7, [r7]
 8003366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800336a:	9b06      	ldr	r3, [sp, #24]
 800336c:	9312      	str	r3, [sp, #72]	; 0x48
 800336e:	9b07      	ldr	r3, [sp, #28]
 8003370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003374:	9313      	str	r3, [sp, #76]	; 0x4c
 8003376:	f04f 32ff 	mov.w	r2, #4294967295
 800337a:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <_vfprintf_r+0x538>)
 800337c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003380:	f7fd fbd0 	bl	8000b24 <__aeabi_dcmpun>
 8003384:	2800      	cmp	r0, #0
 8003386:	f040 85e3 	bne.w	8003f50 <_vfprintf_r+0xfe0>
 800338a:	f04f 32ff 	mov.w	r2, #4294967295
 800338e:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <_vfprintf_r+0x538>)
 8003390:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003394:	f7fd fba8 	bl	8000ae8 <__aeabi_dcmple>
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 85d9 	bne.w	8003f50 <_vfprintf_r+0xfe0>
 800339e:	2200      	movs	r2, #0
 80033a0:	2300      	movs	r3, #0
 80033a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033a6:	f7fd fb95 	bl	8000ad4 <__aeabi_dcmplt>
 80033aa:	b110      	cbz	r0, 80033b2 <_vfprintf_r+0x442>
 80033ac:	232d      	movs	r3, #45	; 0x2d
 80033ae:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80033b2:	4b3e      	ldr	r3, [pc, #248]	; (80034ac <_vfprintf_r+0x53c>)
 80033b4:	4a3e      	ldr	r2, [pc, #248]	; (80034b0 <_vfprintf_r+0x540>)
 80033b6:	9902      	ldr	r1, [sp, #8]
 80033b8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80033bc:	2947      	cmp	r1, #71	; 0x47
 80033be:	bfcc      	ite	gt
 80033c0:	4691      	movgt	r9, r2
 80033c2:	4699      	movle	r9, r3
 80033c4:	f04f 0a03 	mov.w	sl, #3
 80033c8:	2600      	movs	r6, #0
 80033ca:	9608      	str	r6, [sp, #32]
 80033cc:	e0c9      	b.n	8003562 <_vfprintf_r+0x5f2>
 80033ce:	f1ba 3fff 	cmp.w	sl, #4294967295
 80033d2:	d022      	beq.n	800341a <_vfprintf_r+0x4aa>
 80033d4:	9b02      	ldr	r3, [sp, #8]
 80033d6:	f023 0320 	bic.w	r3, r3, #32
 80033da:	2b47      	cmp	r3, #71	; 0x47
 80033dc:	d104      	bne.n	80033e8 <_vfprintf_r+0x478>
 80033de:	f1ba 0f00 	cmp.w	sl, #0
 80033e2:	bf08      	it	eq
 80033e4:	f04f 0a01 	moveq.w	sl, #1
 80033e8:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80033ec:	9314      	str	r3, [sp, #80]	; 0x50
 80033ee:	9b07      	ldr	r3, [sp, #28]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da15      	bge.n	8003420 <_vfprintf_r+0x4b0>
 80033f4:	9b06      	ldr	r3, [sp, #24]
 80033f6:	930e      	str	r3, [sp, #56]	; 0x38
 80033f8:	9b07      	ldr	r3, [sp, #28]
 80033fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80033fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8003400:	232d      	movs	r3, #45	; 0x2d
 8003402:	930c      	str	r3, [sp, #48]	; 0x30
 8003404:	9b02      	ldr	r3, [sp, #8]
 8003406:	f023 0720 	bic.w	r7, r3, #32
 800340a:	2f46      	cmp	r7, #70	; 0x46
 800340c:	d00e      	beq.n	800342c <_vfprintf_r+0x4bc>
 800340e:	2f45      	cmp	r7, #69	; 0x45
 8003410:	d146      	bne.n	80034a0 <_vfprintf_r+0x530>
 8003412:	f10a 0601 	add.w	r6, sl, #1
 8003416:	2102      	movs	r1, #2
 8003418:	e00a      	b.n	8003430 <_vfprintf_r+0x4c0>
 800341a:	f04f 0a06 	mov.w	sl, #6
 800341e:	e7e3      	b.n	80033e8 <_vfprintf_r+0x478>
 8003420:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003424:	2300      	movs	r3, #0
 8003426:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800342a:	e7ea      	b.n	8003402 <_vfprintf_r+0x492>
 800342c:	4656      	mov	r6, sl
 800342e:	2103      	movs	r1, #3
 8003430:	ab1d      	add	r3, sp, #116	; 0x74
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	ab1a      	add	r3, sp, #104	; 0x68
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4632      	mov	r2, r6
 800343a:	ab19      	add	r3, sp, #100	; 0x64
 800343c:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003440:	4658      	mov	r0, fp
 8003442:	f000 ff0d 	bl	8004260 <_dtoa_r>
 8003446:	2f47      	cmp	r7, #71	; 0x47
 8003448:	4681      	mov	r9, r0
 800344a:	d102      	bne.n	8003452 <_vfprintf_r+0x4e2>
 800344c:	07eb      	lsls	r3, r5, #31
 800344e:	f140 858c 	bpl.w	8003f6a <_vfprintf_r+0xffa>
 8003452:	eb09 0306 	add.w	r3, r9, r6
 8003456:	2f46      	cmp	r7, #70	; 0x46
 8003458:	9303      	str	r3, [sp, #12]
 800345a:	d111      	bne.n	8003480 <_vfprintf_r+0x510>
 800345c:	f899 3000 	ldrb.w	r3, [r9]
 8003460:	2b30      	cmp	r3, #48	; 0x30
 8003462:	d109      	bne.n	8003478 <_vfprintf_r+0x508>
 8003464:	2200      	movs	r2, #0
 8003466:	2300      	movs	r3, #0
 8003468:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800346c:	f7fd fb28 	bl	8000ac0 <__aeabi_dcmpeq>
 8003470:	b910      	cbnz	r0, 8003478 <_vfprintf_r+0x508>
 8003472:	f1c6 0601 	rsb	r6, r6, #1
 8003476:	9619      	str	r6, [sp, #100]	; 0x64
 8003478:	9a03      	ldr	r2, [sp, #12]
 800347a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800347c:	441a      	add	r2, r3
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	2300      	movs	r3, #0
 8003484:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003488:	f7fd fb1a 	bl	8000ac0 <__aeabi_dcmpeq>
 800348c:	b990      	cbnz	r0, 80034b4 <_vfprintf_r+0x544>
 800348e:	2230      	movs	r2, #48	; 0x30
 8003490:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003492:	9903      	ldr	r1, [sp, #12]
 8003494:	4299      	cmp	r1, r3
 8003496:	d90f      	bls.n	80034b8 <_vfprintf_r+0x548>
 8003498:	1c59      	adds	r1, r3, #1
 800349a:	911d      	str	r1, [sp, #116]	; 0x74
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e7f7      	b.n	8003490 <_vfprintf_r+0x520>
 80034a0:	4656      	mov	r6, sl
 80034a2:	e7b8      	b.n	8003416 <_vfprintf_r+0x4a6>
 80034a4:	08006a50 	.word	0x08006a50
 80034a8:	7fefffff 	.word	0x7fefffff
 80034ac:	08006a40 	.word	0x08006a40
 80034b0:	08006a44 	.word	0x08006a44
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	931d      	str	r3, [sp, #116]	; 0x74
 80034b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80034ba:	2f47      	cmp	r7, #71	; 0x47
 80034bc:	eba3 0309 	sub.w	r3, r3, r9
 80034c0:	9303      	str	r3, [sp, #12]
 80034c2:	f040 80f8 	bne.w	80036b6 <_vfprintf_r+0x746>
 80034c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80034c8:	1cdf      	adds	r7, r3, #3
 80034ca:	db02      	blt.n	80034d2 <_vfprintf_r+0x562>
 80034cc:	459a      	cmp	sl, r3
 80034ce:	f280 811f 	bge.w	8003710 <_vfprintf_r+0x7a0>
 80034d2:	9b02      	ldr	r3, [sp, #8]
 80034d4:	3b02      	subs	r3, #2
 80034d6:	9302      	str	r3, [sp, #8]
 80034d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80034da:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80034de:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80034e2:	1e53      	subs	r3, r2, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	9319      	str	r3, [sp, #100]	; 0x64
 80034e8:	bfb6      	itet	lt
 80034ea:	f1c2 0301 	rsblt	r3, r2, #1
 80034ee:	222b      	movge	r2, #43	; 0x2b
 80034f0:	222d      	movlt	r2, #45	; 0x2d
 80034f2:	2b09      	cmp	r3, #9
 80034f4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80034f8:	f340 80fa 	ble.w	80036f0 <_vfprintf_r+0x780>
 80034fc:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003500:	260a      	movs	r6, #10
 8003502:	fb93 f0f6 	sdiv	r0, r3, r6
 8003506:	fb06 3310 	mls	r3, r6, r0, r3
 800350a:	3330      	adds	r3, #48	; 0x30
 800350c:	2809      	cmp	r0, #9
 800350e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003512:	f102 31ff 	add.w	r1, r2, #4294967295
 8003516:	4603      	mov	r3, r0
 8003518:	f300 80e3 	bgt.w	80036e2 <_vfprintf_r+0x772>
 800351c:	3330      	adds	r3, #48	; 0x30
 800351e:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003522:	3a02      	subs	r2, #2
 8003524:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003528:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800352c:	4282      	cmp	r2, r0
 800352e:	4619      	mov	r1, r3
 8003530:	f0c0 80d9 	bcc.w	80036e6 <_vfprintf_r+0x776>
 8003534:	9a03      	ldr	r2, [sp, #12]
 8003536:	ab1b      	add	r3, sp, #108	; 0x6c
 8003538:	1acb      	subs	r3, r1, r3
 800353a:	2a01      	cmp	r2, #1
 800353c:	9310      	str	r3, [sp, #64]	; 0x40
 800353e:	eb03 0a02 	add.w	sl, r3, r2
 8003542:	dc03      	bgt.n	800354c <_vfprintf_r+0x5dc>
 8003544:	f015 0301 	ands.w	r3, r5, #1
 8003548:	9308      	str	r3, [sp, #32]
 800354a:	d003      	beq.n	8003554 <_vfprintf_r+0x5e4>
 800354c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800354e:	449a      	add	sl, r3
 8003550:	2300      	movs	r3, #0
 8003552:	9308      	str	r3, [sp, #32]
 8003554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003556:	b113      	cbz	r3, 800355e <_vfprintf_r+0x5ee>
 8003558:	232d      	movs	r3, #45	; 0x2d
 800355a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800355e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003560:	2600      	movs	r6, #0
 8003562:	4556      	cmp	r6, sl
 8003564:	4633      	mov	r3, r6
 8003566:	bfb8      	it	lt
 8003568:	4653      	movlt	r3, sl
 800356a:	930c      	str	r3, [sp, #48]	; 0x30
 800356c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003570:	b113      	cbz	r3, 8003578 <_vfprintf_r+0x608>
 8003572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003574:	3301      	adds	r3, #1
 8003576:	930c      	str	r3, [sp, #48]	; 0x30
 8003578:	f015 0302 	ands.w	r3, r5, #2
 800357c:	9314      	str	r3, [sp, #80]	; 0x50
 800357e:	bf1e      	ittt	ne
 8003580:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8003582:	3302      	addne	r3, #2
 8003584:	930c      	strne	r3, [sp, #48]	; 0x30
 8003586:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800358a:	9315      	str	r3, [sp, #84]	; 0x54
 800358c:	d114      	bne.n	80035b8 <_vfprintf_r+0x648>
 800358e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003592:	1a9f      	subs	r7, r3, r2
 8003594:	2f00      	cmp	r7, #0
 8003596:	dd0f      	ble.n	80035b8 <_vfprintf_r+0x648>
 8003598:	4ba8      	ldr	r3, [pc, #672]	; (800383c <_vfprintf_r+0x8cc>)
 800359a:	6023      	str	r3, [r4, #0]
 800359c:	2f10      	cmp	r7, #16
 800359e:	f300 81d3 	bgt.w	8003948 <_vfprintf_r+0x9d8>
 80035a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035a4:	6067      	str	r7, [r4, #4]
 80035a6:	441f      	add	r7, r3
 80035a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035aa:	9721      	str	r7, [sp, #132]	; 0x84
 80035ac:	3301      	adds	r3, #1
 80035ae:	2b07      	cmp	r3, #7
 80035b0:	9320      	str	r3, [sp, #128]	; 0x80
 80035b2:	f300 81e0 	bgt.w	8003976 <_vfprintf_r+0xa06>
 80035b6:	3408      	adds	r4, #8
 80035b8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80035bc:	b173      	cbz	r3, 80035dc <_vfprintf_r+0x66c>
 80035be:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	2301      	movs	r3, #1
 80035c6:	6063      	str	r3, [r4, #4]
 80035c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035ca:	3301      	adds	r3, #1
 80035cc:	9321      	str	r3, [sp, #132]	; 0x84
 80035ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035d0:	3301      	adds	r3, #1
 80035d2:	2b07      	cmp	r3, #7
 80035d4:	9320      	str	r3, [sp, #128]	; 0x80
 80035d6:	f300 81d8 	bgt.w	800398a <_vfprintf_r+0xa1a>
 80035da:	3408      	adds	r4, #8
 80035dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035de:	b16b      	cbz	r3, 80035fc <_vfprintf_r+0x68c>
 80035e0:	ab18      	add	r3, sp, #96	; 0x60
 80035e2:	6023      	str	r3, [r4, #0]
 80035e4:	2302      	movs	r3, #2
 80035e6:	6063      	str	r3, [r4, #4]
 80035e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035ea:	3302      	adds	r3, #2
 80035ec:	9321      	str	r3, [sp, #132]	; 0x84
 80035ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035f0:	3301      	adds	r3, #1
 80035f2:	2b07      	cmp	r3, #7
 80035f4:	9320      	str	r3, [sp, #128]	; 0x80
 80035f6:	f300 81d2 	bgt.w	800399e <_vfprintf_r+0xa2e>
 80035fa:	3408      	adds	r4, #8
 80035fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d114      	bne.n	800362c <_vfprintf_r+0x6bc>
 8003602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003606:	1a9f      	subs	r7, r3, r2
 8003608:	2f00      	cmp	r7, #0
 800360a:	dd0f      	ble.n	800362c <_vfprintf_r+0x6bc>
 800360c:	4b8c      	ldr	r3, [pc, #560]	; (8003840 <_vfprintf_r+0x8d0>)
 800360e:	6023      	str	r3, [r4, #0]
 8003610:	2f10      	cmp	r7, #16
 8003612:	f300 81ce 	bgt.w	80039b2 <_vfprintf_r+0xa42>
 8003616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003618:	6067      	str	r7, [r4, #4]
 800361a:	441f      	add	r7, r3
 800361c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800361e:	9721      	str	r7, [sp, #132]	; 0x84
 8003620:	3301      	adds	r3, #1
 8003622:	2b07      	cmp	r3, #7
 8003624:	9320      	str	r3, [sp, #128]	; 0x80
 8003626:	f300 81dd 	bgt.w	80039e4 <_vfprintf_r+0xa74>
 800362a:	3408      	adds	r4, #8
 800362c:	eba6 060a 	sub.w	r6, r6, sl
 8003630:	2e00      	cmp	r6, #0
 8003632:	dd0f      	ble.n	8003654 <_vfprintf_r+0x6e4>
 8003634:	4f82      	ldr	r7, [pc, #520]	; (8003840 <_vfprintf_r+0x8d0>)
 8003636:	6027      	str	r7, [r4, #0]
 8003638:	2e10      	cmp	r6, #16
 800363a:	f300 81dd 	bgt.w	80039f8 <_vfprintf_r+0xa88>
 800363e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003640:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003642:	6066      	str	r6, [r4, #4]
 8003644:	3301      	adds	r3, #1
 8003646:	4406      	add	r6, r0
 8003648:	2b07      	cmp	r3, #7
 800364a:	9621      	str	r6, [sp, #132]	; 0x84
 800364c:	9320      	str	r3, [sp, #128]	; 0x80
 800364e:	f300 81ea 	bgt.w	8003a26 <_vfprintf_r+0xab6>
 8003652:	3408      	adds	r4, #8
 8003654:	05e9      	lsls	r1, r5, #23
 8003656:	f100 81f0 	bmi.w	8003a3a <_vfprintf_r+0xaca>
 800365a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800365c:	e884 0600 	stmia.w	r4, {r9, sl}
 8003660:	4453      	add	r3, sl
 8003662:	9321      	str	r3, [sp, #132]	; 0x84
 8003664:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003666:	3301      	adds	r3, #1
 8003668:	2b07      	cmp	r3, #7
 800366a:	9320      	str	r3, [sp, #128]	; 0x80
 800366c:	f340 841b 	ble.w	8003ea6 <_vfprintf_r+0xf36>
 8003670:	aa1f      	add	r2, sp, #124	; 0x7c
 8003672:	4641      	mov	r1, r8
 8003674:	4658      	mov	r0, fp
 8003676:	f002 fc66 	bl	8005f46 <__sprint_r>
 800367a:	2800      	cmp	r0, #0
 800367c:	f040 8433 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003680:	ac2c      	add	r4, sp, #176	; 0xb0
 8003682:	0768      	lsls	r0, r5, #29
 8003684:	f100 8412 	bmi.w	8003eac <_vfprintf_r+0xf3c>
 8003688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800368a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800368c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800368e:	428a      	cmp	r2, r1
 8003690:	bfac      	ite	ge
 8003692:	189b      	addge	r3, r3, r2
 8003694:	185b      	addlt	r3, r3, r1
 8003696:	930a      	str	r3, [sp, #40]	; 0x28
 8003698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800369a:	b13b      	cbz	r3, 80036ac <_vfprintf_r+0x73c>
 800369c:	aa1f      	add	r2, sp, #124	; 0x7c
 800369e:	4641      	mov	r1, r8
 80036a0:	4658      	mov	r0, fp
 80036a2:	f002 fc50 	bl	8005f46 <__sprint_r>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	f040 841d 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 80036ac:	2300      	movs	r3, #0
 80036ae:	9320      	str	r3, [sp, #128]	; 0x80
 80036b0:	9f04      	ldr	r7, [sp, #16]
 80036b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80036b4:	e4e9      	b.n	800308a <_vfprintf_r+0x11a>
 80036b6:	9b02      	ldr	r3, [sp, #8]
 80036b8:	2b65      	cmp	r3, #101	; 0x65
 80036ba:	f77f af0d 	ble.w	80034d8 <_vfprintf_r+0x568>
 80036be:	9b02      	ldr	r3, [sp, #8]
 80036c0:	2b66      	cmp	r3, #102	; 0x66
 80036c2:	d125      	bne.n	8003710 <_vfprintf_r+0x7a0>
 80036c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	dd1a      	ble.n	8003700 <_vfprintf_r+0x790>
 80036ca:	f1ba 0f00 	cmp.w	sl, #0
 80036ce:	d101      	bne.n	80036d4 <_vfprintf_r+0x764>
 80036d0:	07ee      	lsls	r6, r5, #31
 80036d2:	d502      	bpl.n	80036da <_vfprintf_r+0x76a>
 80036d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d6:	4413      	add	r3, r2
 80036d8:	4453      	add	r3, sl
 80036da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80036dc:	9208      	str	r2, [sp, #32]
 80036de:	469a      	mov	sl, r3
 80036e0:	e738      	b.n	8003554 <_vfprintf_r+0x5e4>
 80036e2:	460a      	mov	r2, r1
 80036e4:	e70d      	b.n	8003502 <_vfprintf_r+0x592>
 80036e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80036ea:	f803 1b01 	strb.w	r1, [r3], #1
 80036ee:	e71d      	b.n	800352c <_vfprintf_r+0x5bc>
 80036f0:	2230      	movs	r2, #48	; 0x30
 80036f2:	4413      	add	r3, r2
 80036f4:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80036f8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80036fc:	a91c      	add	r1, sp, #112	; 0x70
 80036fe:	e719      	b.n	8003534 <_vfprintf_r+0x5c4>
 8003700:	f1ba 0f00 	cmp.w	sl, #0
 8003704:	d101      	bne.n	800370a <_vfprintf_r+0x79a>
 8003706:	07ed      	lsls	r5, r5, #31
 8003708:	d515      	bpl.n	8003736 <_vfprintf_r+0x7c6>
 800370a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800370c:	3301      	adds	r3, #1
 800370e:	e7e3      	b.n	80036d8 <_vfprintf_r+0x768>
 8003710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003712:	9b03      	ldr	r3, [sp, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	db06      	blt.n	8003726 <_vfprintf_r+0x7b6>
 8003718:	07e8      	lsls	r0, r5, #31
 800371a:	d50e      	bpl.n	800373a <_vfprintf_r+0x7ca>
 800371c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800371e:	4413      	add	r3, r2
 8003720:	2267      	movs	r2, #103	; 0x67
 8003722:	9202      	str	r2, [sp, #8]
 8003724:	e7d9      	b.n	80036da <_vfprintf_r+0x76a>
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	9909      	ldr	r1, [sp, #36]	; 0x24
 800372a:	2a00      	cmp	r2, #0
 800372c:	440b      	add	r3, r1
 800372e:	dcf7      	bgt.n	8003720 <_vfprintf_r+0x7b0>
 8003730:	f1c2 0201 	rsb	r2, r2, #1
 8003734:	e7f3      	b.n	800371e <_vfprintf_r+0x7ae>
 8003736:	2301      	movs	r3, #1
 8003738:	e7cf      	b.n	80036da <_vfprintf_r+0x76a>
 800373a:	4613      	mov	r3, r2
 800373c:	e7f0      	b.n	8003720 <_vfprintf_r+0x7b0>
 800373e:	b10b      	cbz	r3, 8003744 <_vfprintf_r+0x7d4>
 8003740:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003744:	f015 0f20 	tst.w	r5, #32
 8003748:	f107 0304 	add.w	r3, r7, #4
 800374c:	d008      	beq.n	8003760 <_vfprintf_r+0x7f0>
 800374e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	17ce      	asrs	r6, r1, #31
 8003754:	4608      	mov	r0, r1
 8003756:	4631      	mov	r1, r6
 8003758:	e9c2 0100 	strd	r0, r1, [r2]
 800375c:	461f      	mov	r7, r3
 800375e:	e494      	b.n	800308a <_vfprintf_r+0x11a>
 8003760:	06e9      	lsls	r1, r5, #27
 8003762:	d503      	bpl.n	800376c <_vfprintf_r+0x7fc>
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	e7f7      	b.n	800375c <_vfprintf_r+0x7ec>
 800376c:	066a      	lsls	r2, r5, #25
 800376e:	d5f9      	bpl.n	8003764 <_vfprintf_r+0x7f4>
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8003776:	8011      	strh	r1, [r2, #0]
 8003778:	e7f0      	b.n	800375c <_vfprintf_r+0x7ec>
 800377a:	f045 0510 	orr.w	r5, r5, #16
 800377e:	f015 0320 	ands.w	r3, r5, #32
 8003782:	d022      	beq.n	80037ca <_vfprintf_r+0x85a>
 8003784:	3707      	adds	r7, #7
 8003786:	f027 0707 	bic.w	r7, r7, #7
 800378a:	f107 0308 	add.w	r3, r7, #8
 800378e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	2300      	movs	r3, #0
 8003796:	2200      	movs	r2, #0
 8003798:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800379c:	f1ba 3fff 	cmp.w	sl, #4294967295
 80037a0:	f000 83e8 	beq.w	8003f74 <_vfprintf_r+0x1004>
 80037a4:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80037a8:	9208      	str	r2, [sp, #32]
 80037aa:	ea56 0207 	orrs.w	r2, r6, r7
 80037ae:	f040 83e6 	bne.w	8003f7e <_vfprintf_r+0x100e>
 80037b2:	f1ba 0f00 	cmp.w	sl, #0
 80037b6:	f000 80a9 	beq.w	800390c <_vfprintf_r+0x99c>
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d075      	beq.n	80038aa <_vfprintf_r+0x93a>
 80037be:	2b02      	cmp	r3, #2
 80037c0:	f000 8090 	beq.w	80038e4 <_vfprintf_r+0x974>
 80037c4:	2600      	movs	r6, #0
 80037c6:	2700      	movs	r7, #0
 80037c8:	e3df      	b.n	8003f8a <_vfprintf_r+0x101a>
 80037ca:	1d3a      	adds	r2, r7, #4
 80037cc:	f015 0110 	ands.w	r1, r5, #16
 80037d0:	9204      	str	r2, [sp, #16]
 80037d2:	d002      	beq.n	80037da <_vfprintf_r+0x86a>
 80037d4:	683e      	ldr	r6, [r7, #0]
 80037d6:	2700      	movs	r7, #0
 80037d8:	e7dd      	b.n	8003796 <_vfprintf_r+0x826>
 80037da:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80037de:	d0f9      	beq.n	80037d4 <_vfprintf_r+0x864>
 80037e0:	883e      	ldrh	r6, [r7, #0]
 80037e2:	2700      	movs	r7, #0
 80037e4:	e7d6      	b.n	8003794 <_vfprintf_r+0x824>
 80037e6:	1d3b      	adds	r3, r7, #4
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	2330      	movs	r3, #48	; 0x30
 80037ec:	2278      	movs	r2, #120	; 0x78
 80037ee:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80037f2:	4b14      	ldr	r3, [pc, #80]	; (8003844 <_vfprintf_r+0x8d4>)
 80037f4:	683e      	ldr	r6, [r7, #0]
 80037f6:	9311      	str	r3, [sp, #68]	; 0x44
 80037f8:	2700      	movs	r7, #0
 80037fa:	f045 0502 	orr.w	r5, r5, #2
 80037fe:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003802:	2302      	movs	r3, #2
 8003804:	9202      	str	r2, [sp, #8]
 8003806:	e7c6      	b.n	8003796 <_vfprintf_r+0x826>
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	2600      	movs	r6, #0
 800380c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003810:	9304      	str	r3, [sp, #16]
 8003812:	f8d7 9000 	ldr.w	r9, [r7]
 8003816:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800381a:	d00a      	beq.n	8003832 <_vfprintf_r+0x8c2>
 800381c:	4652      	mov	r2, sl
 800381e:	4631      	mov	r1, r6
 8003820:	4648      	mov	r0, r9
 8003822:	f7fc fcd5 	bl	80001d0 <memchr>
 8003826:	2800      	cmp	r0, #0
 8003828:	f000 808c 	beq.w	8003944 <_vfprintf_r+0x9d4>
 800382c:	eba0 0a09 	sub.w	sl, r0, r9
 8003830:	e5cb      	b.n	80033ca <_vfprintf_r+0x45a>
 8003832:	4648      	mov	r0, r9
 8003834:	f7fc fd1c 	bl	8000270 <strlen>
 8003838:	4682      	mov	sl, r0
 800383a:	e5c6      	b.n	80033ca <_vfprintf_r+0x45a>
 800383c:	08006a74 	.word	0x08006a74
 8003840:	08006a84 	.word	0x08006a84
 8003844:	08006a61 	.word	0x08006a61
 8003848:	f045 0510 	orr.w	r5, r5, #16
 800384c:	06ae      	lsls	r6, r5, #26
 800384e:	d509      	bpl.n	8003864 <_vfprintf_r+0x8f4>
 8003850:	3707      	adds	r7, #7
 8003852:	f027 0707 	bic.w	r7, r7, #7
 8003856:	f107 0308 	add.w	r3, r7, #8
 800385a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800385e:	9304      	str	r3, [sp, #16]
 8003860:	2301      	movs	r3, #1
 8003862:	e798      	b.n	8003796 <_vfprintf_r+0x826>
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	f015 0f10 	tst.w	r5, #16
 800386a:	9304      	str	r3, [sp, #16]
 800386c:	d001      	beq.n	8003872 <_vfprintf_r+0x902>
 800386e:	683e      	ldr	r6, [r7, #0]
 8003870:	e002      	b.n	8003878 <_vfprintf_r+0x908>
 8003872:	0668      	lsls	r0, r5, #25
 8003874:	d5fb      	bpl.n	800386e <_vfprintf_r+0x8fe>
 8003876:	883e      	ldrh	r6, [r7, #0]
 8003878:	2700      	movs	r7, #0
 800387a:	e7f1      	b.n	8003860 <_vfprintf_r+0x8f0>
 800387c:	b10b      	cbz	r3, 8003882 <_vfprintf_r+0x912>
 800387e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003882:	4ba2      	ldr	r3, [pc, #648]	; (8003b0c <_vfprintf_r+0xb9c>)
 8003884:	e4ca      	b.n	800321c <_vfprintf_r+0x2ac>
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	f015 0f10 	tst.w	r5, #16
 800388c:	9304      	str	r3, [sp, #16]
 800388e:	d001      	beq.n	8003894 <_vfprintf_r+0x924>
 8003890:	683e      	ldr	r6, [r7, #0]
 8003892:	e002      	b.n	800389a <_vfprintf_r+0x92a>
 8003894:	066a      	lsls	r2, r5, #25
 8003896:	d5fb      	bpl.n	8003890 <_vfprintf_r+0x920>
 8003898:	883e      	ldrh	r6, [r7, #0]
 800389a:	2700      	movs	r7, #0
 800389c:	e4ca      	b.n	8003234 <_vfprintf_r+0x2c4>
 800389e:	464b      	mov	r3, r9
 80038a0:	e374      	b.n	8003f8c <_vfprintf_r+0x101c>
 80038a2:	2f00      	cmp	r7, #0
 80038a4:	bf08      	it	eq
 80038a6:	2e0a      	cmpeq	r6, #10
 80038a8:	d205      	bcs.n	80038b6 <_vfprintf_r+0x946>
 80038aa:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 80038ae:	3630      	adds	r6, #48	; 0x30
 80038b0:	f809 6d41 	strb.w	r6, [r9, #-65]!
 80038b4:	e385      	b.n	8003fc2 <_vfprintf_r+0x1052>
 80038b6:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80038ba:	4630      	mov	r0, r6
 80038bc:	4639      	mov	r1, r7
 80038be:	220a      	movs	r2, #10
 80038c0:	2300      	movs	r3, #0
 80038c2:	f7fd f9bd 	bl	8000c40 <__aeabi_uldivmod>
 80038c6:	3230      	adds	r2, #48	; 0x30
 80038c8:	f809 2d01 	strb.w	r2, [r9, #-1]!
 80038cc:	2300      	movs	r3, #0
 80038ce:	4630      	mov	r0, r6
 80038d0:	4639      	mov	r1, r7
 80038d2:	220a      	movs	r2, #10
 80038d4:	f7fd f9b4 	bl	8000c40 <__aeabi_uldivmod>
 80038d8:	4606      	mov	r6, r0
 80038da:	460f      	mov	r7, r1
 80038dc:	ea56 0307 	orrs.w	r3, r6, r7
 80038e0:	d1eb      	bne.n	80038ba <_vfprintf_r+0x94a>
 80038e2:	e36e      	b.n	8003fc2 <_vfprintf_r+0x1052>
 80038e4:	2600      	movs	r6, #0
 80038e6:	2700      	movs	r7, #0
 80038e8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80038ec:	f006 030f 	and.w	r3, r6, #15
 80038f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80038f8:	0933      	lsrs	r3, r6, #4
 80038fa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80038fe:	093a      	lsrs	r2, r7, #4
 8003900:	461e      	mov	r6, r3
 8003902:	4617      	mov	r7, r2
 8003904:	ea56 0307 	orrs.w	r3, r6, r7
 8003908:	d1f0      	bne.n	80038ec <_vfprintf_r+0x97c>
 800390a:	e35a      	b.n	8003fc2 <_vfprintf_r+0x1052>
 800390c:	b93b      	cbnz	r3, 800391e <_vfprintf_r+0x9ae>
 800390e:	07e8      	lsls	r0, r5, #31
 8003910:	d505      	bpl.n	800391e <_vfprintf_r+0x9ae>
 8003912:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8003916:	2330      	movs	r3, #48	; 0x30
 8003918:	f809 3d41 	strb.w	r3, [r9, #-65]!
 800391c:	e351      	b.n	8003fc2 <_vfprintf_r+0x1052>
 800391e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003922:	e34e      	b.n	8003fc2 <_vfprintf_r+0x1052>
 8003924:	b10b      	cbz	r3, 800392a <_vfprintf_r+0x9ba>
 8003926:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800392a:	9b02      	ldr	r3, [sp, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8302 	beq.w	8003f36 <_vfprintf_r+0xfc6>
 8003932:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003936:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800393a:	2600      	movs	r6, #0
 800393c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003940:	9704      	str	r7, [sp, #16]
 8003942:	e4e9      	b.n	8003318 <_vfprintf_r+0x3a8>
 8003944:	4606      	mov	r6, r0
 8003946:	e540      	b.n	80033ca <_vfprintf_r+0x45a>
 8003948:	2310      	movs	r3, #16
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800394e:	3310      	adds	r3, #16
 8003950:	9321      	str	r3, [sp, #132]	; 0x84
 8003952:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003954:	3301      	adds	r3, #1
 8003956:	2b07      	cmp	r3, #7
 8003958:	9320      	str	r3, [sp, #128]	; 0x80
 800395a:	dc02      	bgt.n	8003962 <_vfprintf_r+0x9f2>
 800395c:	3408      	adds	r4, #8
 800395e:	3f10      	subs	r7, #16
 8003960:	e61a      	b.n	8003598 <_vfprintf_r+0x628>
 8003962:	aa1f      	add	r2, sp, #124	; 0x7c
 8003964:	4641      	mov	r1, r8
 8003966:	4658      	mov	r0, fp
 8003968:	f002 faed 	bl	8005f46 <__sprint_r>
 800396c:	2800      	cmp	r0, #0
 800396e:	f040 82ba 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003972:	ac2c      	add	r4, sp, #176	; 0xb0
 8003974:	e7f3      	b.n	800395e <_vfprintf_r+0x9ee>
 8003976:	aa1f      	add	r2, sp, #124	; 0x7c
 8003978:	4641      	mov	r1, r8
 800397a:	4658      	mov	r0, fp
 800397c:	f002 fae3 	bl	8005f46 <__sprint_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	f040 82b0 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003986:	ac2c      	add	r4, sp, #176	; 0xb0
 8003988:	e616      	b.n	80035b8 <_vfprintf_r+0x648>
 800398a:	aa1f      	add	r2, sp, #124	; 0x7c
 800398c:	4641      	mov	r1, r8
 800398e:	4658      	mov	r0, fp
 8003990:	f002 fad9 	bl	8005f46 <__sprint_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	f040 82a6 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 800399a:	ac2c      	add	r4, sp, #176	; 0xb0
 800399c:	e61e      	b.n	80035dc <_vfprintf_r+0x66c>
 800399e:	aa1f      	add	r2, sp, #124	; 0x7c
 80039a0:	4641      	mov	r1, r8
 80039a2:	4658      	mov	r0, fp
 80039a4:	f002 facf 	bl	8005f46 <__sprint_r>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	f040 829c 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 80039ae:	ac2c      	add	r4, sp, #176	; 0xb0
 80039b0:	e624      	b.n	80035fc <_vfprintf_r+0x68c>
 80039b2:	2210      	movs	r2, #16
 80039b4:	6062      	str	r2, [r4, #4]
 80039b6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039b8:	3210      	adds	r2, #16
 80039ba:	9221      	str	r2, [sp, #132]	; 0x84
 80039bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80039be:	3201      	adds	r2, #1
 80039c0:	2a07      	cmp	r2, #7
 80039c2:	9220      	str	r2, [sp, #128]	; 0x80
 80039c4:	dc02      	bgt.n	80039cc <_vfprintf_r+0xa5c>
 80039c6:	3408      	adds	r4, #8
 80039c8:	3f10      	subs	r7, #16
 80039ca:	e620      	b.n	800360e <_vfprintf_r+0x69e>
 80039cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80039ce:	4641      	mov	r1, r8
 80039d0:	4658      	mov	r0, fp
 80039d2:	9314      	str	r3, [sp, #80]	; 0x50
 80039d4:	f002 fab7 	bl	8005f46 <__sprint_r>
 80039d8:	2800      	cmp	r0, #0
 80039da:	f040 8284 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 80039de:	ac2c      	add	r4, sp, #176	; 0xb0
 80039e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80039e2:	e7f1      	b.n	80039c8 <_vfprintf_r+0xa58>
 80039e4:	aa1f      	add	r2, sp, #124	; 0x7c
 80039e6:	4641      	mov	r1, r8
 80039e8:	4658      	mov	r0, fp
 80039ea:	f002 faac 	bl	8005f46 <__sprint_r>
 80039ee:	2800      	cmp	r0, #0
 80039f0:	f040 8279 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 80039f4:	ac2c      	add	r4, sp, #176	; 0xb0
 80039f6:	e619      	b.n	800362c <_vfprintf_r+0x6bc>
 80039f8:	2310      	movs	r3, #16
 80039fa:	6063      	str	r3, [r4, #4]
 80039fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039fe:	3310      	adds	r3, #16
 8003a00:	9321      	str	r3, [sp, #132]	; 0x84
 8003a02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a04:	3301      	adds	r3, #1
 8003a06:	2b07      	cmp	r3, #7
 8003a08:	9320      	str	r3, [sp, #128]	; 0x80
 8003a0a:	dc02      	bgt.n	8003a12 <_vfprintf_r+0xaa2>
 8003a0c:	3408      	adds	r4, #8
 8003a0e:	3e10      	subs	r6, #16
 8003a10:	e611      	b.n	8003636 <_vfprintf_r+0x6c6>
 8003a12:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a14:	4641      	mov	r1, r8
 8003a16:	4658      	mov	r0, fp
 8003a18:	f002 fa95 	bl	8005f46 <__sprint_r>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f040 8262 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003a22:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a24:	e7f3      	b.n	8003a0e <_vfprintf_r+0xa9e>
 8003a26:	aa1f      	add	r2, sp, #124	; 0x7c
 8003a28:	4641      	mov	r1, r8
 8003a2a:	4658      	mov	r0, fp
 8003a2c:	f002 fa8b 	bl	8005f46 <__sprint_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	f040 8258 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003a36:	ac2c      	add	r4, sp, #176	; 0xb0
 8003a38:	e60c      	b.n	8003654 <_vfprintf_r+0x6e4>
 8003a3a:	9b02      	ldr	r3, [sp, #8]
 8003a3c:	2b65      	cmp	r3, #101	; 0x65
 8003a3e:	f340 81ad 	ble.w	8003d9c <_vfprintf_r+0xe2c>
 8003a42:	2200      	movs	r2, #0
 8003a44:	2300      	movs	r3, #0
 8003a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a4a:	f7fd f839 	bl	8000ac0 <__aeabi_dcmpeq>
 8003a4e:	2800      	cmp	r0, #0
 8003a50:	d062      	beq.n	8003b18 <_vfprintf_r+0xba8>
 8003a52:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <_vfprintf_r+0xba0>)
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	2301      	movs	r3, #1
 8003a58:	6063      	str	r3, [r4, #4]
 8003a5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	9321      	str	r3, [sp, #132]	; 0x84
 8003a60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a62:	3301      	adds	r3, #1
 8003a64:	2b07      	cmp	r3, #7
 8003a66:	9320      	str	r3, [sp, #128]	; 0x80
 8003a68:	dc25      	bgt.n	8003ab6 <_vfprintf_r+0xb46>
 8003a6a:	3408      	adds	r4, #8
 8003a6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003a6e:	9a03      	ldr	r2, [sp, #12]
 8003a70:	4293      	cmp	r3, r2
 8003a72:	db02      	blt.n	8003a7a <_vfprintf_r+0xb0a>
 8003a74:	07ea      	lsls	r2, r5, #31
 8003a76:	f57f ae04 	bpl.w	8003682 <_vfprintf_r+0x712>
 8003a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a7c:	6023      	str	r3, [r4, #0]
 8003a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a86:	4413      	add	r3, r2
 8003a88:	9321      	str	r3, [sp, #132]	; 0x84
 8003a8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	2b07      	cmp	r3, #7
 8003a90:	9320      	str	r3, [sp, #128]	; 0x80
 8003a92:	dc1a      	bgt.n	8003aca <_vfprintf_r+0xb5a>
 8003a94:	3408      	adds	r4, #8
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	1e5e      	subs	r6, r3, #1
 8003a9a:	2e00      	cmp	r6, #0
 8003a9c:	f77f adf1 	ble.w	8003682 <_vfprintf_r+0x712>
 8003aa0:	4f1c      	ldr	r7, [pc, #112]	; (8003b14 <_vfprintf_r+0xba4>)
 8003aa2:	f04f 0910 	mov.w	r9, #16
 8003aa6:	2e10      	cmp	r6, #16
 8003aa8:	6027      	str	r7, [r4, #0]
 8003aaa:	dc18      	bgt.n	8003ade <_vfprintf_r+0xb6e>
 8003aac:	6066      	str	r6, [r4, #4]
 8003aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ab0:	441e      	add	r6, r3
 8003ab2:	9621      	str	r6, [sp, #132]	; 0x84
 8003ab4:	e5d6      	b.n	8003664 <_vfprintf_r+0x6f4>
 8003ab6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ab8:	4641      	mov	r1, r8
 8003aba:	4658      	mov	r0, fp
 8003abc:	f002 fa43 	bl	8005f46 <__sprint_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	f040 8210 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003ac6:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ac8:	e7d0      	b.n	8003a6c <_vfprintf_r+0xafc>
 8003aca:	aa1f      	add	r2, sp, #124	; 0x7c
 8003acc:	4641      	mov	r1, r8
 8003ace:	4658      	mov	r0, fp
 8003ad0:	f002 fa39 	bl	8005f46 <__sprint_r>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f040 8206 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003ada:	ac2c      	add	r4, sp, #176	; 0xb0
 8003adc:	e7db      	b.n	8003a96 <_vfprintf_r+0xb26>
 8003ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ae0:	f8c4 9004 	str.w	r9, [r4, #4]
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	9321      	str	r3, [sp, #132]	; 0x84
 8003ae8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003aea:	3301      	adds	r3, #1
 8003aec:	2b07      	cmp	r3, #7
 8003aee:	9320      	str	r3, [sp, #128]	; 0x80
 8003af0:	dc02      	bgt.n	8003af8 <_vfprintf_r+0xb88>
 8003af2:	3408      	adds	r4, #8
 8003af4:	3e10      	subs	r6, #16
 8003af6:	e7d6      	b.n	8003aa6 <_vfprintf_r+0xb36>
 8003af8:	aa1f      	add	r2, sp, #124	; 0x7c
 8003afa:	4641      	mov	r1, r8
 8003afc:	4658      	mov	r0, fp
 8003afe:	f002 fa22 	bl	8005f46 <__sprint_r>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f040 81ef 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003b08:	ac2c      	add	r4, sp, #176	; 0xb0
 8003b0a:	e7f3      	b.n	8003af4 <_vfprintf_r+0xb84>
 8003b0c:	08006a61 	.word	0x08006a61
 8003b10:	08006a72 	.word	0x08006a72
 8003b14:	08006a84 	.word	0x08006a84
 8003b18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	dc7a      	bgt.n	8003c14 <_vfprintf_r+0xca4>
 8003b1e:	4b9d      	ldr	r3, [pc, #628]	; (8003d94 <_vfprintf_r+0xe24>)
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	2301      	movs	r3, #1
 8003b24:	6063      	str	r3, [r4, #4]
 8003b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b28:	3301      	adds	r3, #1
 8003b2a:	9321      	str	r3, [sp, #132]	; 0x84
 8003b2c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b2e:	3301      	adds	r3, #1
 8003b30:	2b07      	cmp	r3, #7
 8003b32:	9320      	str	r3, [sp, #128]	; 0x80
 8003b34:	dc44      	bgt.n	8003bc0 <_vfprintf_r+0xc50>
 8003b36:	3408      	adds	r4, #8
 8003b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b3a:	b923      	cbnz	r3, 8003b46 <_vfprintf_r+0xbd6>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	b913      	cbnz	r3, 8003b46 <_vfprintf_r+0xbd6>
 8003b40:	07eb      	lsls	r3, r5, #31
 8003b42:	f57f ad9e 	bpl.w	8003682 <_vfprintf_r+0x712>
 8003b46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b4c:	6063      	str	r3, [r4, #4]
 8003b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b52:	4413      	add	r3, r2
 8003b54:	9321      	str	r3, [sp, #132]	; 0x84
 8003b56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003b58:	3301      	adds	r3, #1
 8003b5a:	2b07      	cmp	r3, #7
 8003b5c:	9320      	str	r3, [sp, #128]	; 0x80
 8003b5e:	dc39      	bgt.n	8003bd4 <_vfprintf_r+0xc64>
 8003b60:	f104 0308 	add.w	r3, r4, #8
 8003b64:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003b66:	2e00      	cmp	r6, #0
 8003b68:	da19      	bge.n	8003b9e <_vfprintf_r+0xc2e>
 8003b6a:	4f8b      	ldr	r7, [pc, #556]	; (8003d98 <_vfprintf_r+0xe28>)
 8003b6c:	4276      	negs	r6, r6
 8003b6e:	2410      	movs	r4, #16
 8003b70:	2e10      	cmp	r6, #16
 8003b72:	601f      	str	r7, [r3, #0]
 8003b74:	dc38      	bgt.n	8003be8 <_vfprintf_r+0xc78>
 8003b76:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003b78:	605e      	str	r6, [r3, #4]
 8003b7a:	4416      	add	r6, r2
 8003b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003b7e:	9621      	str	r6, [sp, #132]	; 0x84
 8003b80:	3201      	adds	r2, #1
 8003b82:	2a07      	cmp	r2, #7
 8003b84:	f103 0308 	add.w	r3, r3, #8
 8003b88:	9220      	str	r2, [sp, #128]	; 0x80
 8003b8a:	dd08      	ble.n	8003b9e <_vfprintf_r+0xc2e>
 8003b8c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003b8e:	4641      	mov	r1, r8
 8003b90:	4658      	mov	r0, fp
 8003b92:	f002 f9d8 	bl	8005f46 <__sprint_r>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f040 81a5 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003b9c:	ab2c      	add	r3, sp, #176	; 0xb0
 8003b9e:	9a03      	ldr	r2, [sp, #12]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	9903      	ldr	r1, [sp, #12]
 8003ba4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ba6:	f8c3 9000 	str.w	r9, [r3]
 8003baa:	440a      	add	r2, r1
 8003bac:	9221      	str	r2, [sp, #132]	; 0x84
 8003bae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bb0:	3201      	adds	r2, #1
 8003bb2:	2a07      	cmp	r2, #7
 8003bb4:	9220      	str	r2, [sp, #128]	; 0x80
 8003bb6:	f73f ad5b 	bgt.w	8003670 <_vfprintf_r+0x700>
 8003bba:	f103 0408 	add.w	r4, r3, #8
 8003bbe:	e560      	b.n	8003682 <_vfprintf_r+0x712>
 8003bc0:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bc2:	4641      	mov	r1, r8
 8003bc4:	4658      	mov	r0, fp
 8003bc6:	f002 f9be 	bl	8005f46 <__sprint_r>
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	f040 818b 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003bd0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003bd2:	e7b1      	b.n	8003b38 <_vfprintf_r+0xbc8>
 8003bd4:	aa1f      	add	r2, sp, #124	; 0x7c
 8003bd6:	4641      	mov	r1, r8
 8003bd8:	4658      	mov	r0, fp
 8003bda:	f002 f9b4 	bl	8005f46 <__sprint_r>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f040 8181 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003be4:	ab2c      	add	r3, sp, #176	; 0xb0
 8003be6:	e7bd      	b.n	8003b64 <_vfprintf_r+0xbf4>
 8003be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003bea:	605c      	str	r4, [r3, #4]
 8003bec:	3210      	adds	r2, #16
 8003bee:	9221      	str	r2, [sp, #132]	; 0x84
 8003bf0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	2a07      	cmp	r2, #7
 8003bf6:	9220      	str	r2, [sp, #128]	; 0x80
 8003bf8:	dc02      	bgt.n	8003c00 <_vfprintf_r+0xc90>
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	3e10      	subs	r6, #16
 8003bfe:	e7b7      	b.n	8003b70 <_vfprintf_r+0xc00>
 8003c00:	aa1f      	add	r2, sp, #124	; 0x7c
 8003c02:	4641      	mov	r1, r8
 8003c04:	4658      	mov	r0, fp
 8003c06:	f002 f99e 	bl	8005f46 <__sprint_r>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	f040 816b 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003c10:	ab2c      	add	r3, sp, #176	; 0xb0
 8003c12:	e7f3      	b.n	8003bfc <_vfprintf_r+0xc8c>
 8003c14:	9b08      	ldr	r3, [sp, #32]
 8003c16:	9a03      	ldr	r2, [sp, #12]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	bfa8      	it	ge
 8003c1c:	4613      	movge	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	461e      	mov	r6, r3
 8003c22:	dd0b      	ble.n	8003c3c <_vfprintf_r+0xccc>
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c28:	f8c4 9000 	str.w	r9, [r4]
 8003c2c:	4433      	add	r3, r6
 8003c2e:	9321      	str	r3, [sp, #132]	; 0x84
 8003c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c32:	3301      	adds	r3, #1
 8003c34:	2b07      	cmp	r3, #7
 8003c36:	9320      	str	r3, [sp, #128]	; 0x80
 8003c38:	dc62      	bgt.n	8003d00 <_vfprintf_r+0xd90>
 8003c3a:	3408      	adds	r4, #8
 8003c3c:	9b08      	ldr	r3, [sp, #32]
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	bfa8      	it	ge
 8003c42:	1b9b      	subge	r3, r3, r6
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	461e      	mov	r6, r3
 8003c48:	dd0f      	ble.n	8003c6a <_vfprintf_r+0xcfa>
 8003c4a:	4f53      	ldr	r7, [pc, #332]	; (8003d98 <_vfprintf_r+0xe28>)
 8003c4c:	f04f 0a10 	mov.w	sl, #16
 8003c50:	2e10      	cmp	r6, #16
 8003c52:	6027      	str	r7, [r4, #0]
 8003c54:	dc5e      	bgt.n	8003d14 <_vfprintf_r+0xda4>
 8003c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c58:	6066      	str	r6, [r4, #4]
 8003c5a:	441e      	add	r6, r3
 8003c5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c5e:	9621      	str	r6, [sp, #132]	; 0x84
 8003c60:	3301      	adds	r3, #1
 8003c62:	2b07      	cmp	r3, #7
 8003c64:	9320      	str	r3, [sp, #128]	; 0x80
 8003c66:	dc6c      	bgt.n	8003d42 <_vfprintf_r+0xdd2>
 8003c68:	3408      	adds	r4, #8
 8003c6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c6c:	9a03      	ldr	r2, [sp, #12]
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	db01      	blt.n	8003c76 <_vfprintf_r+0xd06>
 8003c72:	07ef      	lsls	r7, r5, #31
 8003c74:	d50d      	bpl.n	8003c92 <_vfprintf_r+0xd22>
 8003c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c7c:	6063      	str	r3, [r4, #4]
 8003c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c82:	4413      	add	r3, r2
 8003c84:	9321      	str	r3, [sp, #132]	; 0x84
 8003c86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003c88:	3301      	adds	r3, #1
 8003c8a:	2b07      	cmp	r3, #7
 8003c8c:	9320      	str	r3, [sp, #128]	; 0x80
 8003c8e:	dc62      	bgt.n	8003d56 <_vfprintf_r+0xde6>
 8003c90:	3408      	adds	r4, #8
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	9a08      	ldr	r2, [sp, #32]
 8003c96:	1a9e      	subs	r6, r3, r2
 8003c98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c9a:	9a03      	ldr	r2, [sp, #12]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	429e      	cmp	r6, r3
 8003ca0:	bfa8      	it	ge
 8003ca2:	461e      	movge	r6, r3
 8003ca4:	2e00      	cmp	r6, #0
 8003ca6:	dd0c      	ble.n	8003cc2 <_vfprintf_r+0xd52>
 8003ca8:	9b08      	ldr	r3, [sp, #32]
 8003caa:	444b      	add	r3, r9
 8003cac:	e884 0048 	stmia.w	r4, {r3, r6}
 8003cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cb2:	4433      	add	r3, r6
 8003cb4:	9321      	str	r3, [sp, #132]	; 0x84
 8003cb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cb8:	3301      	adds	r3, #1
 8003cba:	2b07      	cmp	r3, #7
 8003cbc:	9320      	str	r3, [sp, #128]	; 0x80
 8003cbe:	dc54      	bgt.n	8003d6a <_vfprintf_r+0xdfa>
 8003cc0:	3408      	adds	r4, #8
 8003cc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003cc4:	9a03      	ldr	r2, [sp, #12]
 8003cc6:	2e00      	cmp	r6, #0
 8003cc8:	eba2 0303 	sub.w	r3, r2, r3
 8003ccc:	bfac      	ite	ge
 8003cce:	1b9e      	subge	r6, r3, r6
 8003cd0:	461e      	movlt	r6, r3
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	f77f acd5 	ble.w	8003682 <_vfprintf_r+0x712>
 8003cd8:	4f2f      	ldr	r7, [pc, #188]	; (8003d98 <_vfprintf_r+0xe28>)
 8003cda:	f04f 0910 	mov.w	r9, #16
 8003cde:	2e10      	cmp	r6, #16
 8003ce0:	6027      	str	r7, [r4, #0]
 8003ce2:	f77f aee3 	ble.w	8003aac <_vfprintf_r+0xb3c>
 8003ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce8:	f8c4 9004 	str.w	r9, [r4, #4]
 8003cec:	3310      	adds	r3, #16
 8003cee:	9321      	str	r3, [sp, #132]	; 0x84
 8003cf0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	2b07      	cmp	r3, #7
 8003cf6:	9320      	str	r3, [sp, #128]	; 0x80
 8003cf8:	dc41      	bgt.n	8003d7e <_vfprintf_r+0xe0e>
 8003cfa:	3408      	adds	r4, #8
 8003cfc:	3e10      	subs	r6, #16
 8003cfe:	e7ee      	b.n	8003cde <_vfprintf_r+0xd6e>
 8003d00:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d02:	4641      	mov	r1, r8
 8003d04:	4658      	mov	r0, fp
 8003d06:	f002 f91e 	bl	8005f46 <__sprint_r>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f040 80eb 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d10:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d12:	e793      	b.n	8003c3c <_vfprintf_r+0xccc>
 8003d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d16:	f8c4 a004 	str.w	sl, [r4, #4]
 8003d1a:	3310      	adds	r3, #16
 8003d1c:	9321      	str	r3, [sp, #132]	; 0x84
 8003d1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d20:	3301      	adds	r3, #1
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	9320      	str	r3, [sp, #128]	; 0x80
 8003d26:	dc02      	bgt.n	8003d2e <_vfprintf_r+0xdbe>
 8003d28:	3408      	adds	r4, #8
 8003d2a:	3e10      	subs	r6, #16
 8003d2c:	e790      	b.n	8003c50 <_vfprintf_r+0xce0>
 8003d2e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d30:	4641      	mov	r1, r8
 8003d32:	4658      	mov	r0, fp
 8003d34:	f002 f907 	bl	8005f46 <__sprint_r>
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	f040 80d4 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d3e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d40:	e7f3      	b.n	8003d2a <_vfprintf_r+0xdba>
 8003d42:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d44:	4641      	mov	r1, r8
 8003d46:	4658      	mov	r0, fp
 8003d48:	f002 f8fd 	bl	8005f46 <__sprint_r>
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	f040 80ca 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d52:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d54:	e789      	b.n	8003c6a <_vfprintf_r+0xcfa>
 8003d56:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d58:	4641      	mov	r1, r8
 8003d5a:	4658      	mov	r0, fp
 8003d5c:	f002 f8f3 	bl	8005f46 <__sprint_r>
 8003d60:	2800      	cmp	r0, #0
 8003d62:	f040 80c0 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d66:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d68:	e793      	b.n	8003c92 <_vfprintf_r+0xd22>
 8003d6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	4658      	mov	r0, fp
 8003d70:	f002 f8e9 	bl	8005f46 <__sprint_r>
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f040 80b6 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d7c:	e7a1      	b.n	8003cc2 <_vfprintf_r+0xd52>
 8003d7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d80:	4641      	mov	r1, r8
 8003d82:	4658      	mov	r0, fp
 8003d84:	f002 f8df 	bl	8005f46 <__sprint_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	f040 80ac 	bne.w	8003ee6 <_vfprintf_r+0xf76>
 8003d8e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d90:	e7b4      	b.n	8003cfc <_vfprintf_r+0xd8c>
 8003d92:	bf00      	nop
 8003d94:	08006a72 	.word	0x08006a72
 8003d98:	08006a84 	.word	0x08006a84
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	dc01      	bgt.n	8003da6 <_vfprintf_r+0xe36>
 8003da2:	07ee      	lsls	r6, r5, #31
 8003da4:	d576      	bpl.n	8003e94 <_vfprintf_r+0xf24>
 8003da6:	2301      	movs	r3, #1
 8003da8:	6063      	str	r3, [r4, #4]
 8003daa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dac:	f8c4 9000 	str.w	r9, [r4]
 8003db0:	3301      	adds	r3, #1
 8003db2:	9321      	str	r3, [sp, #132]	; 0x84
 8003db4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003db6:	3301      	adds	r3, #1
 8003db8:	2b07      	cmp	r3, #7
 8003dba:	9320      	str	r3, [sp, #128]	; 0x80
 8003dbc:	dc36      	bgt.n	8003e2c <_vfprintf_r+0xebc>
 8003dbe:	3408      	adds	r4, #8
 8003dc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc6:	6063      	str	r3, [r4, #4]
 8003dc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dcc:	4413      	add	r3, r2
 8003dce:	9321      	str	r3, [sp, #132]	; 0x84
 8003dd0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	2b07      	cmp	r3, #7
 8003dd6:	9320      	str	r3, [sp, #128]	; 0x80
 8003dd8:	dc31      	bgt.n	8003e3e <_vfprintf_r+0xece>
 8003dda:	3408      	adds	r4, #8
 8003ddc:	2300      	movs	r3, #0
 8003dde:	2200      	movs	r2, #0
 8003de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003de4:	f7fc fe6c 	bl	8000ac0 <__aeabi_dcmpeq>
 8003de8:	9b03      	ldr	r3, [sp, #12]
 8003dea:	1e5e      	subs	r6, r3, #1
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d12f      	bne.n	8003e50 <_vfprintf_r+0xee0>
 8003df0:	f109 0301 	add.w	r3, r9, #1
 8003df4:	e884 0048 	stmia.w	r4, {r3, r6}
 8003df8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003dfa:	9a03      	ldr	r2, [sp, #12]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	4413      	add	r3, r2
 8003e00:	9321      	str	r3, [sp, #132]	; 0x84
 8003e02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e04:	3301      	adds	r3, #1
 8003e06:	2b07      	cmp	r3, #7
 8003e08:	9320      	str	r3, [sp, #128]	; 0x80
 8003e0a:	dd4a      	ble.n	8003ea2 <_vfprintf_r+0xf32>
 8003e0c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e0e:	4641      	mov	r1, r8
 8003e10:	4658      	mov	r0, fp
 8003e12:	f002 f898 	bl	8005f46 <__sprint_r>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d165      	bne.n	8003ee6 <_vfprintf_r+0xf76>
 8003e1a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003e1e:	6023      	str	r3, [r4, #0]
 8003e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e22:	6063      	str	r3, [r4, #4]
 8003e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003e26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e28:	4413      	add	r3, r2
 8003e2a:	e41a      	b.n	8003662 <_vfprintf_r+0x6f2>
 8003e2c:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e2e:	4641      	mov	r1, r8
 8003e30:	4658      	mov	r0, fp
 8003e32:	f002 f888 	bl	8005f46 <__sprint_r>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	d155      	bne.n	8003ee6 <_vfprintf_r+0xf76>
 8003e3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e3c:	e7c0      	b.n	8003dc0 <_vfprintf_r+0xe50>
 8003e3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e40:	4641      	mov	r1, r8
 8003e42:	4658      	mov	r0, fp
 8003e44:	f002 f87f 	bl	8005f46 <__sprint_r>
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d14c      	bne.n	8003ee6 <_vfprintf_r+0xf76>
 8003e4c:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e4e:	e7c5      	b.n	8003ddc <_vfprintf_r+0xe6c>
 8003e50:	2e00      	cmp	r6, #0
 8003e52:	dde3      	ble.n	8003e1c <_vfprintf_r+0xeac>
 8003e54:	4f60      	ldr	r7, [pc, #384]	; (8003fd8 <_vfprintf_r+0x1068>)
 8003e56:	f04f 0910 	mov.w	r9, #16
 8003e5a:	2e10      	cmp	r6, #16
 8003e5c:	6027      	str	r7, [r4, #0]
 8003e5e:	dc04      	bgt.n	8003e6a <_vfprintf_r+0xefa>
 8003e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e62:	6066      	str	r6, [r4, #4]
 8003e64:	441e      	add	r6, r3
 8003e66:	9621      	str	r6, [sp, #132]	; 0x84
 8003e68:	e7cb      	b.n	8003e02 <_vfprintf_r+0xe92>
 8003e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e6c:	f8c4 9004 	str.w	r9, [r4, #4]
 8003e70:	3310      	adds	r3, #16
 8003e72:	9321      	str	r3, [sp, #132]	; 0x84
 8003e74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003e76:	3301      	adds	r3, #1
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	9320      	str	r3, [sp, #128]	; 0x80
 8003e7c:	dc02      	bgt.n	8003e84 <_vfprintf_r+0xf14>
 8003e7e:	3408      	adds	r4, #8
 8003e80:	3e10      	subs	r6, #16
 8003e82:	e7ea      	b.n	8003e5a <_vfprintf_r+0xeea>
 8003e84:	aa1f      	add	r2, sp, #124	; 0x7c
 8003e86:	4641      	mov	r1, r8
 8003e88:	4658      	mov	r0, fp
 8003e8a:	f002 f85c 	bl	8005f46 <__sprint_r>
 8003e8e:	bb50      	cbnz	r0, 8003ee6 <_vfprintf_r+0xf76>
 8003e90:	ac2c      	add	r4, sp, #176	; 0xb0
 8003e92:	e7f5      	b.n	8003e80 <_vfprintf_r+0xf10>
 8003e94:	2301      	movs	r3, #1
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e9a:	f8c4 9000 	str.w	r9, [r4]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	e7ae      	b.n	8003e00 <_vfprintf_r+0xe90>
 8003ea2:	3408      	adds	r4, #8
 8003ea4:	e7ba      	b.n	8003e1c <_vfprintf_r+0xeac>
 8003ea6:	3408      	adds	r4, #8
 8003ea8:	f7ff bbeb 	b.w	8003682 <_vfprintf_r+0x712>
 8003eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eb0:	1a9d      	subs	r5, r3, r2
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	f77f abe8 	ble.w	8003688 <_vfprintf_r+0x718>
 8003eb8:	2610      	movs	r6, #16
 8003eba:	4b48      	ldr	r3, [pc, #288]	; (8003fdc <_vfprintf_r+0x106c>)
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	2d10      	cmp	r5, #16
 8003ec0:	dc24      	bgt.n	8003f0c <_vfprintf_r+0xf9c>
 8003ec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ec4:	6065      	str	r5, [r4, #4]
 8003ec6:	441d      	add	r5, r3
 8003ec8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003eca:	9521      	str	r5, [sp, #132]	; 0x84
 8003ecc:	3301      	adds	r3, #1
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	9320      	str	r3, [sp, #128]	; 0x80
 8003ed2:	f77f abd9 	ble.w	8003688 <_vfprintf_r+0x718>
 8003ed6:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ed8:	4641      	mov	r1, r8
 8003eda:	4658      	mov	r0, fp
 8003edc:	f002 f833 	bl	8005f46 <__sprint_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f43f abd1 	beq.w	8003688 <_vfprintf_r+0x718>
 8003ee6:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 8003eea:	07d9      	lsls	r1, r3, #31
 8003eec:	d407      	bmi.n	8003efe <_vfprintf_r+0xf8e>
 8003eee:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003ef2:	059a      	lsls	r2, r3, #22
 8003ef4:	d403      	bmi.n	8003efe <_vfprintf_r+0xf8e>
 8003ef6:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003efa:	f001 fa66 	bl	80053ca <__retarget_lock_release_recursive>
 8003efe:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003f02:	065b      	lsls	r3, r3, #25
 8003f04:	f57f a8af 	bpl.w	8003066 <_vfprintf_r+0xf6>
 8003f08:	f7ff b882 	b.w	8003010 <_vfprintf_r+0xa0>
 8003f0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f0e:	6066      	str	r6, [r4, #4]
 8003f10:	3310      	adds	r3, #16
 8003f12:	9321      	str	r3, [sp, #132]	; 0x84
 8003f14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f16:	3301      	adds	r3, #1
 8003f18:	2b07      	cmp	r3, #7
 8003f1a:	9320      	str	r3, [sp, #128]	; 0x80
 8003f1c:	dc02      	bgt.n	8003f24 <_vfprintf_r+0xfb4>
 8003f1e:	3408      	adds	r4, #8
 8003f20:	3d10      	subs	r5, #16
 8003f22:	e7ca      	b.n	8003eba <_vfprintf_r+0xf4a>
 8003f24:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f26:	4641      	mov	r1, r8
 8003f28:	4658      	mov	r0, fp
 8003f2a:	f002 f80c 	bl	8005f46 <__sprint_r>
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1d9      	bne.n	8003ee6 <_vfprintf_r+0xf76>
 8003f32:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f34:	e7f4      	b.n	8003f20 <_vfprintf_r+0xfb0>
 8003f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f38:	b913      	cbnz	r3, 8003f40 <_vfprintf_r+0xfd0>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9320      	str	r3, [sp, #128]	; 0x80
 8003f3e:	e7d2      	b.n	8003ee6 <_vfprintf_r+0xf76>
 8003f40:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f42:	4641      	mov	r1, r8
 8003f44:	4658      	mov	r0, fp
 8003f46:	f001 fffe 	bl	8005f46 <__sprint_r>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d0f5      	beq.n	8003f3a <_vfprintf_r+0xfca>
 8003f4e:	e7ca      	b.n	8003ee6 <_vfprintf_r+0xf76>
 8003f50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	f7fc fde4 	bl	8000b24 <__aeabi_dcmpun>
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f43f aa36 	beq.w	80033ce <_vfprintf_r+0x45e>
 8003f62:	4b1f      	ldr	r3, [pc, #124]	; (8003fe0 <_vfprintf_r+0x1070>)
 8003f64:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <_vfprintf_r+0x1074>)
 8003f66:	f7ff ba26 	b.w	80033b6 <_vfprintf_r+0x446>
 8003f6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f6c:	1a1b      	subs	r3, r3, r0
 8003f6e:	9303      	str	r3, [sp, #12]
 8003f70:	f7ff baa9 	b.w	80034c6 <_vfprintf_r+0x556>
 8003f74:	ea56 0207 	orrs.w	r2, r6, r7
 8003f78:	9508      	str	r5, [sp, #32]
 8003f7a:	f43f ac1e 	beq.w	80037ba <_vfprintf_r+0x84a>
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f43f ac8f 	beq.w	80038a2 <_vfprintf_r+0x932>
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	f43f acaf 	beq.w	80038e8 <_vfprintf_r+0x978>
 8003f8a:	ab2c      	add	r3, sp, #176	; 0xb0
 8003f8c:	08f1      	lsrs	r1, r6, #3
 8003f8e:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8003f92:	08f8      	lsrs	r0, r7, #3
 8003f94:	f006 0207 	and.w	r2, r6, #7
 8003f98:	4607      	mov	r7, r0
 8003f9a:	460e      	mov	r6, r1
 8003f9c:	3230      	adds	r2, #48	; 0x30
 8003f9e:	ea56 0107 	orrs.w	r1, r6, r7
 8003fa2:	f103 39ff 	add.w	r9, r3, #4294967295
 8003fa6:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003faa:	f47f ac78 	bne.w	800389e <_vfprintf_r+0x92e>
 8003fae:	9908      	ldr	r1, [sp, #32]
 8003fb0:	07cd      	lsls	r5, r1, #31
 8003fb2:	d506      	bpl.n	8003fc2 <_vfprintf_r+0x1052>
 8003fb4:	2a30      	cmp	r2, #48	; 0x30
 8003fb6:	d004      	beq.n	8003fc2 <_vfprintf_r+0x1052>
 8003fb8:	2230      	movs	r2, #48	; 0x30
 8003fba:	f809 2c01 	strb.w	r2, [r9, #-1]
 8003fbe:	f1a3 0902 	sub.w	r9, r3, #2
 8003fc2:	4656      	mov	r6, sl
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 8003fca:	9d08      	ldr	r5, [sp, #32]
 8003fcc:	9308      	str	r3, [sp, #32]
 8003fce:	ebaa 0a09 	sub.w	sl, sl, r9
 8003fd2:	f7ff bac6 	b.w	8003562 <_vfprintf_r+0x5f2>
 8003fd6:	bf00      	nop
 8003fd8:	08006a84 	.word	0x08006a84
 8003fdc:	08006a74 	.word	0x08006a74
 8003fe0:	08006a48 	.word	0x08006a48
 8003fe4:	08006a4c 	.word	0x08006a4c

08003fe8 <__sbprintf>:
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	460c      	mov	r4, r1
 8003fec:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003ff0:	461f      	mov	r7, r3
 8003ff2:	8989      	ldrh	r1, [r1, #12]
 8003ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff6:	9319      	str	r3, [sp, #100]	; 0x64
 8003ff8:	89e3      	ldrh	r3, [r4, #14]
 8003ffa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003ffe:	f021 0102 	bic.w	r1, r1, #2
 8004002:	6a23      	ldr	r3, [r4, #32]
 8004004:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004008:	9308      	str	r3, [sp, #32]
 800400a:	a91a      	add	r1, sp, #104	; 0x68
 800400c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800400e:	930a      	str	r3, [sp, #40]	; 0x28
 8004010:	4615      	mov	r5, r2
 8004012:	2300      	movs	r3, #0
 8004014:	4606      	mov	r6, r0
 8004016:	9100      	str	r1, [sp, #0]
 8004018:	9104      	str	r1, [sp, #16]
 800401a:	a816      	add	r0, sp, #88	; 0x58
 800401c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004020:	9102      	str	r1, [sp, #8]
 8004022:	9105      	str	r1, [sp, #20]
 8004024:	9306      	str	r3, [sp, #24]
 8004026:	f001 f9cd 	bl	80053c4 <__retarget_lock_init_recursive>
 800402a:	462a      	mov	r2, r5
 800402c:	463b      	mov	r3, r7
 800402e:	4669      	mov	r1, sp
 8004030:	4630      	mov	r0, r6
 8004032:	f7fe ff9d 	bl	8002f70 <_vfprintf_r>
 8004036:	1e05      	subs	r5, r0, #0
 8004038:	db07      	blt.n	800404a <__sbprintf+0x62>
 800403a:	4669      	mov	r1, sp
 800403c:	4630      	mov	r0, r6
 800403e:	f000 ff6f 	bl	8004f20 <_fflush_r>
 8004042:	2800      	cmp	r0, #0
 8004044:	bf18      	it	ne
 8004046:	f04f 35ff 	movne.w	r5, #4294967295
 800404a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800404e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004050:	065b      	lsls	r3, r3, #25
 8004052:	bf42      	ittt	mi
 8004054:	89a3      	ldrhmi	r3, [r4, #12]
 8004056:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800405a:	81a3      	strhmi	r3, [r4, #12]
 800405c:	f001 f9b3 	bl	80053c6 <__retarget_lock_close_recursive>
 8004060:	4628      	mov	r0, r5
 8004062:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004068 <__swsetup_r>:
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <__swsetup_r+0xcc>)
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	4606      	mov	r6, r0
 8004070:	460c      	mov	r4, r1
 8004072:	b125      	cbz	r5, 800407e <__swsetup_r+0x16>
 8004074:	69ab      	ldr	r3, [r5, #24]
 8004076:	b913      	cbnz	r3, 800407e <__swsetup_r+0x16>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 ffe5 	bl	8005048 <__sinit>
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <__swsetup_r+0xd0>)
 8004080:	429c      	cmp	r4, r3
 8004082:	d10f      	bne.n	80040a4 <__swsetup_r+0x3c>
 8004084:	686c      	ldr	r4, [r5, #4]
 8004086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800408a:	b29a      	uxth	r2, r3
 800408c:	0715      	lsls	r5, r2, #28
 800408e:	d42c      	bmi.n	80040ea <__swsetup_r+0x82>
 8004090:	06d0      	lsls	r0, r2, #27
 8004092:	d411      	bmi.n	80040b8 <__swsetup_r+0x50>
 8004094:	2209      	movs	r2, #9
 8004096:	6032      	str	r2, [r6, #0]
 8004098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <__swsetup_r+0xd4>)
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d101      	bne.n	80040ae <__swsetup_r+0x46>
 80040aa:	68ac      	ldr	r4, [r5, #8]
 80040ac:	e7eb      	b.n	8004086 <__swsetup_r+0x1e>
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <__swsetup_r+0xd8>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	bf08      	it	eq
 80040b4:	68ec      	ldreq	r4, [r5, #12]
 80040b6:	e7e6      	b.n	8004086 <__swsetup_r+0x1e>
 80040b8:	0751      	lsls	r1, r2, #29
 80040ba:	d512      	bpl.n	80040e2 <__swsetup_r+0x7a>
 80040bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040be:	b141      	cbz	r1, 80040d2 <__swsetup_r+0x6a>
 80040c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c4:	4299      	cmp	r1, r3
 80040c6:	d002      	beq.n	80040ce <__swsetup_r+0x66>
 80040c8:	4630      	mov	r0, r6
 80040ca:	f001 f893 	bl	80051f4 <_free_r>
 80040ce:	2300      	movs	r3, #0
 80040d0:	6363      	str	r3, [r4, #52]	; 0x34
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	2300      	movs	r3, #0
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	b94b      	cbnz	r3, 8004102 <__swsetup_r+0x9a>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d003      	beq.n	8004102 <__swsetup_r+0x9a>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4630      	mov	r0, r6
 80040fe:	f001 f991 	bl	8005424 <__smakebuf_r>
 8004102:	89a2      	ldrh	r2, [r4, #12]
 8004104:	f012 0301 	ands.w	r3, r2, #1
 8004108:	d00c      	beq.n	8004124 <__swsetup_r+0xbc>
 800410a:	2300      	movs	r3, #0
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	6963      	ldr	r3, [r4, #20]
 8004110:	425b      	negs	r3, r3
 8004112:	61a3      	str	r3, [r4, #24]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b953      	cbnz	r3, 800412e <__swsetup_r+0xc6>
 8004118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004120:	d1ba      	bne.n	8004098 <__swsetup_r+0x30>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	0792      	lsls	r2, r2, #30
 8004126:	bf58      	it	pl
 8004128:	6963      	ldrpl	r3, [r4, #20]
 800412a:	60a3      	str	r3, [r4, #8]
 800412c:	e7f2      	b.n	8004114 <__swsetup_r+0xac>
 800412e:	2000      	movs	r0, #0
 8004130:	e7f7      	b.n	8004122 <__swsetup_r+0xba>
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c
 8004138:	08006ac4 	.word	0x08006ac4
 800413c:	08006ae4 	.word	0x08006ae4
 8004140:	08006aa4 	.word	0x08006aa4

08004144 <quorem>:
 8004144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004148:	6903      	ldr	r3, [r0, #16]
 800414a:	690c      	ldr	r4, [r1, #16]
 800414c:	429c      	cmp	r4, r3
 800414e:	4680      	mov	r8, r0
 8004150:	f300 8082 	bgt.w	8004258 <quorem+0x114>
 8004154:	3c01      	subs	r4, #1
 8004156:	f101 0714 	add.w	r7, r1, #20
 800415a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800415e:	f100 0614 	add.w	r6, r0, #20
 8004162:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004166:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800416a:	eb06 030e 	add.w	r3, r6, lr
 800416e:	3501      	adds	r5, #1
 8004170:	eb07 090e 	add.w	r9, r7, lr
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	fbb0 f5f5 	udiv	r5, r0, r5
 800417a:	b395      	cbz	r5, 80041e2 <quorem+0x9e>
 800417c:	f04f 0a00 	mov.w	sl, #0
 8004180:	4638      	mov	r0, r7
 8004182:	46b4      	mov	ip, r6
 8004184:	46d3      	mov	fp, sl
 8004186:	f850 2b04 	ldr.w	r2, [r0], #4
 800418a:	b293      	uxth	r3, r2
 800418c:	fb05 a303 	mla	r3, r5, r3, sl
 8004190:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004194:	b29b      	uxth	r3, r3
 8004196:	ebab 0303 	sub.w	r3, fp, r3
 800419a:	0c12      	lsrs	r2, r2, #16
 800419c:	f8bc b000 	ldrh.w	fp, [ip]
 80041a0:	fb05 a202 	mla	r2, r5, r2, sl
 80041a4:	fa13 f38b 	uxtah	r3, r3, fp
 80041a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80041ac:	fa1f fb82 	uxth.w	fp, r2
 80041b0:	f8dc 2000 	ldr.w	r2, [ip]
 80041b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80041b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041c2:	4581      	cmp	r9, r0
 80041c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80041c8:	f84c 3b04 	str.w	r3, [ip], #4
 80041cc:	d2db      	bcs.n	8004186 <quorem+0x42>
 80041ce:	f856 300e 	ldr.w	r3, [r6, lr]
 80041d2:	b933      	cbnz	r3, 80041e2 <quorem+0x9e>
 80041d4:	9b01      	ldr	r3, [sp, #4]
 80041d6:	3b04      	subs	r3, #4
 80041d8:	429e      	cmp	r6, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	d330      	bcc.n	8004240 <quorem+0xfc>
 80041de:	f8c8 4010 	str.w	r4, [r8, #16]
 80041e2:	4640      	mov	r0, r8
 80041e4:	f001 fd95 	bl	8005d12 <__mcmp>
 80041e8:	2800      	cmp	r0, #0
 80041ea:	db25      	blt.n	8004238 <quorem+0xf4>
 80041ec:	3501      	adds	r5, #1
 80041ee:	4630      	mov	r0, r6
 80041f0:	f04f 0e00 	mov.w	lr, #0
 80041f4:	f857 2b04 	ldr.w	r2, [r7], #4
 80041f8:	f8d0 c000 	ldr.w	ip, [r0]
 80041fc:	b293      	uxth	r3, r2
 80041fe:	ebae 0303 	sub.w	r3, lr, r3
 8004202:	0c12      	lsrs	r2, r2, #16
 8004204:	fa13 f38c 	uxtah	r3, r3, ip
 8004208:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800420c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004210:	b29b      	uxth	r3, r3
 8004212:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004216:	45b9      	cmp	r9, r7
 8004218:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800421c:	f840 3b04 	str.w	r3, [r0], #4
 8004220:	d2e8      	bcs.n	80041f4 <quorem+0xb0>
 8004222:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004226:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800422a:	b92a      	cbnz	r2, 8004238 <quorem+0xf4>
 800422c:	3b04      	subs	r3, #4
 800422e:	429e      	cmp	r6, r3
 8004230:	461a      	mov	r2, r3
 8004232:	d30b      	bcc.n	800424c <quorem+0x108>
 8004234:	f8c8 4010 	str.w	r4, [r8, #16]
 8004238:	4628      	mov	r0, r5
 800423a:	b003      	add	sp, #12
 800423c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004240:	6812      	ldr	r2, [r2, #0]
 8004242:	3b04      	subs	r3, #4
 8004244:	2a00      	cmp	r2, #0
 8004246:	d1ca      	bne.n	80041de <quorem+0x9a>
 8004248:	3c01      	subs	r4, #1
 800424a:	e7c5      	b.n	80041d8 <quorem+0x94>
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	3b04      	subs	r3, #4
 8004250:	2a00      	cmp	r2, #0
 8004252:	d1ef      	bne.n	8004234 <quorem+0xf0>
 8004254:	3c01      	subs	r4, #1
 8004256:	e7ea      	b.n	800422e <quorem+0xea>
 8004258:	2000      	movs	r0, #0
 800425a:	e7ee      	b.n	800423a <quorem+0xf6>
 800425c:	0000      	movs	r0, r0
	...

08004260 <_dtoa_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	ec57 6b10 	vmov	r6, r7, d0
 8004268:	b097      	sub	sp, #92	; 0x5c
 800426a:	e9cd 6700 	strd	r6, r7, [sp]
 800426e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004270:	9107      	str	r1, [sp, #28]
 8004272:	4604      	mov	r4, r0
 8004274:	920a      	str	r2, [sp, #40]	; 0x28
 8004276:	930f      	str	r3, [sp, #60]	; 0x3c
 8004278:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800427a:	b93e      	cbnz	r6, 800428c <_dtoa_r+0x2c>
 800427c:	2010      	movs	r0, #16
 800427e:	f001 f911 	bl	80054a4 <malloc>
 8004282:	6260      	str	r0, [r4, #36]	; 0x24
 8004284:	6046      	str	r6, [r0, #4]
 8004286:	6086      	str	r6, [r0, #8]
 8004288:	6006      	str	r6, [r0, #0]
 800428a:	60c6      	str	r6, [r0, #12]
 800428c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	b151      	cbz	r1, 80042a8 <_dtoa_r+0x48>
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	604a      	str	r2, [r1, #4]
 8004296:	2301      	movs	r3, #1
 8004298:	4093      	lsls	r3, r2
 800429a:	608b      	str	r3, [r1, #8]
 800429c:	4620      	mov	r0, r4
 800429e:	f001 fb63 	bl	8005968 <_Bfree>
 80042a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bfbf      	itttt	lt
 80042ae:	2301      	movlt	r3, #1
 80042b0:	602b      	strlt	r3, [r5, #0]
 80042b2:	9b01      	ldrlt	r3, [sp, #4]
 80042b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042b8:	bfb2      	itee	lt
 80042ba:	9301      	strlt	r3, [sp, #4]
 80042bc:	2300      	movge	r3, #0
 80042be:	602b      	strge	r3, [r5, #0]
 80042c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80042c4:	4ba8      	ldr	r3, [pc, #672]	; (8004568 <_dtoa_r+0x308>)
 80042c6:	ea33 0308 	bics.w	r3, r3, r8
 80042ca:	d11b      	bne.n	8004304 <_dtoa_r+0xa4>
 80042cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80042ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	9b00      	ldr	r3, [sp, #0]
 80042d6:	b923      	cbnz	r3, 80042e2 <_dtoa_r+0x82>
 80042d8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80042dc:	2800      	cmp	r0, #0
 80042de:	f000 8578 	beq.w	8004dd2 <_dtoa_r+0xb72>
 80042e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042e4:	b953      	cbnz	r3, 80042fc <_dtoa_r+0x9c>
 80042e6:	4ba1      	ldr	r3, [pc, #644]	; (800456c <_dtoa_r+0x30c>)
 80042e8:	e021      	b.n	800432e <_dtoa_r+0xce>
 80042ea:	4ba1      	ldr	r3, [pc, #644]	; (8004570 <_dtoa_r+0x310>)
 80042ec:	9302      	str	r3, [sp, #8]
 80042ee:	3308      	adds	r3, #8
 80042f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	9802      	ldr	r0, [sp, #8]
 80042f6:	b017      	add	sp, #92	; 0x5c
 80042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042fc:	4b9b      	ldr	r3, [pc, #620]	; (800456c <_dtoa_r+0x30c>)
 80042fe:	9302      	str	r3, [sp, #8]
 8004300:	3303      	adds	r3, #3
 8004302:	e7f5      	b.n	80042f0 <_dtoa_r+0x90>
 8004304:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f7fc fbd6 	bl	8000ac0 <__aeabi_dcmpeq>
 8004314:	4681      	mov	r9, r0
 8004316:	b160      	cbz	r0, 8004332 <_dtoa_r+0xd2>
 8004318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800431a:	2301      	movs	r3, #1
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8553 	beq.w	8004dcc <_dtoa_r+0xb6c>
 8004326:	4b93      	ldr	r3, [pc, #588]	; (8004574 <_dtoa_r+0x314>)
 8004328:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	9302      	str	r3, [sp, #8]
 8004330:	e7e0      	b.n	80042f4 <_dtoa_r+0x94>
 8004332:	aa14      	add	r2, sp, #80	; 0x50
 8004334:	a915      	add	r1, sp, #84	; 0x54
 8004336:	ec47 6b10 	vmov	d0, r6, r7
 800433a:	4620      	mov	r0, r4
 800433c:	f001 fd61 	bl	8005e02 <__d2b>
 8004340:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004344:	4682      	mov	sl, r0
 8004346:	2d00      	cmp	r5, #0
 8004348:	d07e      	beq.n	8004448 <_dtoa_r+0x1e8>
 800434a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800434e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004352:	4630      	mov	r0, r6
 8004354:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004358:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800435c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004360:	2200      	movs	r2, #0
 8004362:	4b85      	ldr	r3, [pc, #532]	; (8004578 <_dtoa_r+0x318>)
 8004364:	f7fb ff90 	bl	8000288 <__aeabi_dsub>
 8004368:	a379      	add	r3, pc, #484	; (adr r3, 8004550 <_dtoa_r+0x2f0>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f93f 	bl	80005f0 <__aeabi_dmul>
 8004372:	a379      	add	r3, pc, #484	; (adr r3, 8004558 <_dtoa_r+0x2f8>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fb ff88 	bl	800028c <__adddf3>
 800437c:	4606      	mov	r6, r0
 800437e:	4628      	mov	r0, r5
 8004380:	460f      	mov	r7, r1
 8004382:	f7fc f8cf 	bl	8000524 <__aeabi_i2d>
 8004386:	a376      	add	r3, pc, #472	; (adr r3, 8004560 <_dtoa_r+0x300>)
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f7fc f930 	bl	80005f0 <__aeabi_dmul>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4630      	mov	r0, r6
 8004396:	4639      	mov	r1, r7
 8004398:	f7fb ff78 	bl	800028c <__adddf3>
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	f7fc fbd6 	bl	8000b50 <__aeabi_d2iz>
 80043a4:	2200      	movs	r2, #0
 80043a6:	4683      	mov	fp, r0
 80043a8:	2300      	movs	r3, #0
 80043aa:	4630      	mov	r0, r6
 80043ac:	4639      	mov	r1, r7
 80043ae:	f7fc fb91 	bl	8000ad4 <__aeabi_dcmplt>
 80043b2:	b158      	cbz	r0, 80043cc <_dtoa_r+0x16c>
 80043b4:	4658      	mov	r0, fp
 80043b6:	f7fc f8b5 	bl	8000524 <__aeabi_i2d>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4630      	mov	r0, r6
 80043c0:	4639      	mov	r1, r7
 80043c2:	f7fc fb7d 	bl	8000ac0 <__aeabi_dcmpeq>
 80043c6:	b908      	cbnz	r0, 80043cc <_dtoa_r+0x16c>
 80043c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043cc:	f1bb 0f16 	cmp.w	fp, #22
 80043d0:	d859      	bhi.n	8004486 <_dtoa_r+0x226>
 80043d2:	496a      	ldr	r1, [pc, #424]	; (800457c <_dtoa_r+0x31c>)
 80043d4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80043d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80043dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043e0:	f7fc fb96 	bl	8000b10 <__aeabi_dcmpgt>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d050      	beq.n	800448a <_dtoa_r+0x22a>
 80043e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80043ec:	2300      	movs	r3, #0
 80043ee:	930e      	str	r3, [sp, #56]	; 0x38
 80043f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043f2:	1b5d      	subs	r5, r3, r5
 80043f4:	1e6b      	subs	r3, r5, #1
 80043f6:	9306      	str	r3, [sp, #24]
 80043f8:	bf45      	ittet	mi
 80043fa:	f1c5 0301 	rsbmi	r3, r5, #1
 80043fe:	9305      	strmi	r3, [sp, #20]
 8004400:	2300      	movpl	r3, #0
 8004402:	2300      	movmi	r3, #0
 8004404:	bf4c      	ite	mi
 8004406:	9306      	strmi	r3, [sp, #24]
 8004408:	9305      	strpl	r3, [sp, #20]
 800440a:	f1bb 0f00 	cmp.w	fp, #0
 800440e:	db3e      	blt.n	800448e <_dtoa_r+0x22e>
 8004410:	9b06      	ldr	r3, [sp, #24]
 8004412:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004416:	445b      	add	r3, fp
 8004418:	9306      	str	r3, [sp, #24]
 800441a:	2300      	movs	r3, #0
 800441c:	9308      	str	r3, [sp, #32]
 800441e:	9b07      	ldr	r3, [sp, #28]
 8004420:	2b09      	cmp	r3, #9
 8004422:	f200 80af 	bhi.w	8004584 <_dtoa_r+0x324>
 8004426:	2b05      	cmp	r3, #5
 8004428:	bfc4      	itt	gt
 800442a:	3b04      	subgt	r3, #4
 800442c:	9307      	strgt	r3, [sp, #28]
 800442e:	9b07      	ldr	r3, [sp, #28]
 8004430:	f1a3 0302 	sub.w	r3, r3, #2
 8004434:	bfcc      	ite	gt
 8004436:	2600      	movgt	r6, #0
 8004438:	2601      	movle	r6, #1
 800443a:	2b03      	cmp	r3, #3
 800443c:	f200 80ae 	bhi.w	800459c <_dtoa_r+0x33c>
 8004440:	e8df f003 	tbb	[pc, r3]
 8004444:	772f8482 	.word	0x772f8482
 8004448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800444a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800444c:	441d      	add	r5, r3
 800444e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004452:	2b20      	cmp	r3, #32
 8004454:	dd11      	ble.n	800447a <_dtoa_r+0x21a>
 8004456:	9a00      	ldr	r2, [sp, #0]
 8004458:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800445c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004460:	fa22 f000 	lsr.w	r0, r2, r0
 8004464:	fa08 f303 	lsl.w	r3, r8, r3
 8004468:	4318      	orrs	r0, r3
 800446a:	f7fc f84b 	bl	8000504 <__aeabi_ui2d>
 800446e:	2301      	movs	r3, #1
 8004470:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004474:	3d01      	subs	r5, #1
 8004476:	9312      	str	r3, [sp, #72]	; 0x48
 8004478:	e772      	b.n	8004360 <_dtoa_r+0x100>
 800447a:	f1c3 0020 	rsb	r0, r3, #32
 800447e:	9b00      	ldr	r3, [sp, #0]
 8004480:	fa03 f000 	lsl.w	r0, r3, r0
 8004484:	e7f1      	b.n	800446a <_dtoa_r+0x20a>
 8004486:	2301      	movs	r3, #1
 8004488:	e7b1      	b.n	80043ee <_dtoa_r+0x18e>
 800448a:	900e      	str	r0, [sp, #56]	; 0x38
 800448c:	e7b0      	b.n	80043f0 <_dtoa_r+0x190>
 800448e:	9b05      	ldr	r3, [sp, #20]
 8004490:	eba3 030b 	sub.w	r3, r3, fp
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	f1cb 0300 	rsb	r3, fp, #0
 800449a:	9308      	str	r3, [sp, #32]
 800449c:	2300      	movs	r3, #0
 800449e:	930b      	str	r3, [sp, #44]	; 0x2c
 80044a0:	e7bd      	b.n	800441e <_dtoa_r+0x1be>
 80044a2:	2301      	movs	r3, #1
 80044a4:	9309      	str	r3, [sp, #36]	; 0x24
 80044a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd7a      	ble.n	80045a2 <_dtoa_r+0x342>
 80044ac:	9304      	str	r3, [sp, #16]
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80044b2:	2200      	movs	r2, #0
 80044b4:	606a      	str	r2, [r5, #4]
 80044b6:	2104      	movs	r1, #4
 80044b8:	f101 0214 	add.w	r2, r1, #20
 80044bc:	429a      	cmp	r2, r3
 80044be:	d975      	bls.n	80045ac <_dtoa_r+0x34c>
 80044c0:	6869      	ldr	r1, [r5, #4]
 80044c2:	4620      	mov	r0, r4
 80044c4:	f001 fa1c 	bl	8005900 <_Balloc>
 80044c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ca:	6028      	str	r0, [r5, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	9302      	str	r3, [sp, #8]
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	2b0e      	cmp	r3, #14
 80044d4:	f200 80e5 	bhi.w	80046a2 <_dtoa_r+0x442>
 80044d8:	2e00      	cmp	r6, #0
 80044da:	f000 80e2 	beq.w	80046a2 <_dtoa_r+0x442>
 80044de:	ed9d 7b00 	vldr	d7, [sp]
 80044e2:	f1bb 0f00 	cmp.w	fp, #0
 80044e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80044ea:	dd74      	ble.n	80045d6 <_dtoa_r+0x376>
 80044ec:	4a23      	ldr	r2, [pc, #140]	; (800457c <_dtoa_r+0x31c>)
 80044ee:	f00b 030f 	and.w	r3, fp, #15
 80044f2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80044f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044fa:	06f0      	lsls	r0, r6, #27
 80044fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004500:	d559      	bpl.n	80045b6 <_dtoa_r+0x356>
 8004502:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <_dtoa_r+0x320>)
 8004504:	ec51 0b17 	vmov	r0, r1, d7
 8004508:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800450c:	f7fc f99a 	bl	8000844 <__aeabi_ddiv>
 8004510:	e9cd 0100 	strd	r0, r1, [sp]
 8004514:	f006 060f 	and.w	r6, r6, #15
 8004518:	2503      	movs	r5, #3
 800451a:	4f19      	ldr	r7, [pc, #100]	; (8004580 <_dtoa_r+0x320>)
 800451c:	2e00      	cmp	r6, #0
 800451e:	d14c      	bne.n	80045ba <_dtoa_r+0x35a>
 8004520:	4642      	mov	r2, r8
 8004522:	464b      	mov	r3, r9
 8004524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004528:	f7fc f98c 	bl	8000844 <__aeabi_ddiv>
 800452c:	e9cd 0100 	strd	r0, r1, [sp]
 8004530:	e06a      	b.n	8004608 <_dtoa_r+0x3a8>
 8004532:	2301      	movs	r3, #1
 8004534:	9309      	str	r3, [sp, #36]	; 0x24
 8004536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004538:	445b      	add	r3, fp
 800453a:	9304      	str	r3, [sp, #16]
 800453c:	3301      	adds	r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	9303      	str	r3, [sp, #12]
 8004542:	bfb8      	it	lt
 8004544:	2301      	movlt	r3, #1
 8004546:	e7b3      	b.n	80044b0 <_dtoa_r+0x250>
 8004548:	2300      	movs	r3, #0
 800454a:	e7ab      	b.n	80044a4 <_dtoa_r+0x244>
 800454c:	2300      	movs	r3, #0
 800454e:	e7f1      	b.n	8004534 <_dtoa_r+0x2d4>
 8004550:	636f4361 	.word	0x636f4361
 8004554:	3fd287a7 	.word	0x3fd287a7
 8004558:	8b60c8b3 	.word	0x8b60c8b3
 800455c:	3fc68a28 	.word	0x3fc68a28
 8004560:	509f79fb 	.word	0x509f79fb
 8004564:	3fd34413 	.word	0x3fd34413
 8004568:	7ff00000 	.word	0x7ff00000
 800456c:	08006a9d 	.word	0x08006a9d
 8004570:	08006a94 	.word	0x08006a94
 8004574:	08006a73 	.word	0x08006a73
 8004578:	3ff80000 	.word	0x3ff80000
 800457c:	08006b30 	.word	0x08006b30
 8004580:	08006b08 	.word	0x08006b08
 8004584:	2601      	movs	r6, #1
 8004586:	2300      	movs	r3, #0
 8004588:	9307      	str	r3, [sp, #28]
 800458a:	9609      	str	r6, [sp, #36]	; 0x24
 800458c:	f04f 33ff 	mov.w	r3, #4294967295
 8004590:	9304      	str	r3, [sp, #16]
 8004592:	9303      	str	r3, [sp, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	2312      	movs	r3, #18
 8004598:	920a      	str	r2, [sp, #40]	; 0x28
 800459a:	e789      	b.n	80044b0 <_dtoa_r+0x250>
 800459c:	2301      	movs	r3, #1
 800459e:	9309      	str	r3, [sp, #36]	; 0x24
 80045a0:	e7f4      	b.n	800458c <_dtoa_r+0x32c>
 80045a2:	2301      	movs	r3, #1
 80045a4:	9304      	str	r3, [sp, #16]
 80045a6:	9303      	str	r3, [sp, #12]
 80045a8:	461a      	mov	r2, r3
 80045aa:	e7f5      	b.n	8004598 <_dtoa_r+0x338>
 80045ac:	686a      	ldr	r2, [r5, #4]
 80045ae:	3201      	adds	r2, #1
 80045b0:	606a      	str	r2, [r5, #4]
 80045b2:	0049      	lsls	r1, r1, #1
 80045b4:	e780      	b.n	80044b8 <_dtoa_r+0x258>
 80045b6:	2502      	movs	r5, #2
 80045b8:	e7af      	b.n	800451a <_dtoa_r+0x2ba>
 80045ba:	07f1      	lsls	r1, r6, #31
 80045bc:	d508      	bpl.n	80045d0 <_dtoa_r+0x370>
 80045be:	4640      	mov	r0, r8
 80045c0:	4649      	mov	r1, r9
 80045c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045c6:	f7fc f813 	bl	80005f0 <__aeabi_dmul>
 80045ca:	3501      	adds	r5, #1
 80045cc:	4680      	mov	r8, r0
 80045ce:	4689      	mov	r9, r1
 80045d0:	1076      	asrs	r6, r6, #1
 80045d2:	3708      	adds	r7, #8
 80045d4:	e7a2      	b.n	800451c <_dtoa_r+0x2bc>
 80045d6:	f000 809d 	beq.w	8004714 <_dtoa_r+0x4b4>
 80045da:	f1cb 0600 	rsb	r6, fp, #0
 80045de:	4b9f      	ldr	r3, [pc, #636]	; (800485c <_dtoa_r+0x5fc>)
 80045e0:	4f9f      	ldr	r7, [pc, #636]	; (8004860 <_dtoa_r+0x600>)
 80045e2:	f006 020f 	and.w	r2, r6, #15
 80045e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80045f2:	f7fb fffd 	bl	80005f0 <__aeabi_dmul>
 80045f6:	e9cd 0100 	strd	r0, r1, [sp]
 80045fa:	1136      	asrs	r6, r6, #4
 80045fc:	2300      	movs	r3, #0
 80045fe:	2502      	movs	r5, #2
 8004600:	2e00      	cmp	r6, #0
 8004602:	d17c      	bne.n	80046fe <_dtoa_r+0x49e>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d191      	bne.n	800452c <_dtoa_r+0x2cc>
 8004608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8084 	beq.w	8004718 <_dtoa_r+0x4b8>
 8004610:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004614:	2200      	movs	r2, #0
 8004616:	4b93      	ldr	r3, [pc, #588]	; (8004864 <_dtoa_r+0x604>)
 8004618:	4640      	mov	r0, r8
 800461a:	4649      	mov	r1, r9
 800461c:	f7fc fa5a 	bl	8000ad4 <__aeabi_dcmplt>
 8004620:	2800      	cmp	r0, #0
 8004622:	d079      	beq.n	8004718 <_dtoa_r+0x4b8>
 8004624:	9b03      	ldr	r3, [sp, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d076      	beq.n	8004718 <_dtoa_r+0x4b8>
 800462a:	9b04      	ldr	r3, [sp, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	dd34      	ble.n	800469a <_dtoa_r+0x43a>
 8004630:	2200      	movs	r2, #0
 8004632:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <_dtoa_r+0x608>)
 8004634:	4640      	mov	r0, r8
 8004636:	4649      	mov	r1, r9
 8004638:	f7fb ffda 	bl	80005f0 <__aeabi_dmul>
 800463c:	e9cd 0100 	strd	r0, r1, [sp]
 8004640:	9e04      	ldr	r6, [sp, #16]
 8004642:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004646:	3501      	adds	r5, #1
 8004648:	4628      	mov	r0, r5
 800464a:	f7fb ff6b 	bl	8000524 <__aeabi_i2d>
 800464e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004652:	f7fb ffcd 	bl	80005f0 <__aeabi_dmul>
 8004656:	2200      	movs	r2, #0
 8004658:	4b84      	ldr	r3, [pc, #528]	; (800486c <_dtoa_r+0x60c>)
 800465a:	f7fb fe17 	bl	800028c <__adddf3>
 800465e:	4680      	mov	r8, r0
 8004660:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004664:	2e00      	cmp	r6, #0
 8004666:	d15a      	bne.n	800471e <_dtoa_r+0x4be>
 8004668:	2200      	movs	r2, #0
 800466a:	4b81      	ldr	r3, [pc, #516]	; (8004870 <_dtoa_r+0x610>)
 800466c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004670:	f7fb fe0a 	bl	8000288 <__aeabi_dsub>
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	e9cd 0100 	strd	r0, r1, [sp]
 800467c:	f7fc fa48 	bl	8000b10 <__aeabi_dcmpgt>
 8004680:	2800      	cmp	r0, #0
 8004682:	f040 829b 	bne.w	8004bbc <_dtoa_r+0x95c>
 8004686:	4642      	mov	r2, r8
 8004688:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800468c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004690:	f7fc fa20 	bl	8000ad4 <__aeabi_dcmplt>
 8004694:	2800      	cmp	r0, #0
 8004696:	f040 828f 	bne.w	8004bb8 <_dtoa_r+0x958>
 800469a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800469e:	e9cd 2300 	strd	r2, r3, [sp]
 80046a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f2c0 8150 	blt.w	800494a <_dtoa_r+0x6ea>
 80046aa:	f1bb 0f0e 	cmp.w	fp, #14
 80046ae:	f300 814c 	bgt.w	800494a <_dtoa_r+0x6ea>
 80046b2:	4b6a      	ldr	r3, [pc, #424]	; (800485c <_dtoa_r+0x5fc>)
 80046b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f280 80da 	bge.w	8004878 <_dtoa_r+0x618>
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f300 80d6 	bgt.w	8004878 <_dtoa_r+0x618>
 80046cc:	f040 8273 	bne.w	8004bb6 <_dtoa_r+0x956>
 80046d0:	2200      	movs	r2, #0
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <_dtoa_r+0x610>)
 80046d4:	4640      	mov	r0, r8
 80046d6:	4649      	mov	r1, r9
 80046d8:	f7fb ff8a 	bl	80005f0 <__aeabi_dmul>
 80046dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046e0:	f7fc fa0c 	bl	8000afc <__aeabi_dcmpge>
 80046e4:	9e03      	ldr	r6, [sp, #12]
 80046e6:	4637      	mov	r7, r6
 80046e8:	2800      	cmp	r0, #0
 80046ea:	f040 824a 	bne.w	8004b82 <_dtoa_r+0x922>
 80046ee:	9b02      	ldr	r3, [sp, #8]
 80046f0:	9a02      	ldr	r2, [sp, #8]
 80046f2:	1c5d      	adds	r5, r3, #1
 80046f4:	2331      	movs	r3, #49	; 0x31
 80046f6:	7013      	strb	r3, [r2, #0]
 80046f8:	f10b 0b01 	add.w	fp, fp, #1
 80046fc:	e245      	b.n	8004b8a <_dtoa_r+0x92a>
 80046fe:	07f2      	lsls	r2, r6, #31
 8004700:	d505      	bpl.n	800470e <_dtoa_r+0x4ae>
 8004702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004706:	f7fb ff73 	bl	80005f0 <__aeabi_dmul>
 800470a:	3501      	adds	r5, #1
 800470c:	2301      	movs	r3, #1
 800470e:	1076      	asrs	r6, r6, #1
 8004710:	3708      	adds	r7, #8
 8004712:	e775      	b.n	8004600 <_dtoa_r+0x3a0>
 8004714:	2502      	movs	r5, #2
 8004716:	e777      	b.n	8004608 <_dtoa_r+0x3a8>
 8004718:	465f      	mov	r7, fp
 800471a:	9e03      	ldr	r6, [sp, #12]
 800471c:	e794      	b.n	8004648 <_dtoa_r+0x3e8>
 800471e:	9a02      	ldr	r2, [sp, #8]
 8004720:	4b4e      	ldr	r3, [pc, #312]	; (800485c <_dtoa_r+0x5fc>)
 8004722:	4432      	add	r2, r6
 8004724:	9213      	str	r2, [sp, #76]	; 0x4c
 8004726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004728:	1e71      	subs	r1, r6, #1
 800472a:	2a00      	cmp	r2, #0
 800472c:	d048      	beq.n	80047c0 <_dtoa_r+0x560>
 800472e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2000      	movs	r0, #0
 8004738:	494e      	ldr	r1, [pc, #312]	; (8004874 <_dtoa_r+0x614>)
 800473a:	f7fc f883 	bl	8000844 <__aeabi_ddiv>
 800473e:	4642      	mov	r2, r8
 8004740:	464b      	mov	r3, r9
 8004742:	f7fb fda1 	bl	8000288 <__aeabi_dsub>
 8004746:	9d02      	ldr	r5, [sp, #8]
 8004748:	4680      	mov	r8, r0
 800474a:	4689      	mov	r9, r1
 800474c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004750:	f7fc f9fe 	bl	8000b50 <__aeabi_d2iz>
 8004754:	4606      	mov	r6, r0
 8004756:	f7fb fee5 	bl	8000524 <__aeabi_i2d>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004762:	f7fb fd91 	bl	8000288 <__aeabi_dsub>
 8004766:	3630      	adds	r6, #48	; 0x30
 8004768:	f805 6b01 	strb.w	r6, [r5], #1
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	e9cd 0100 	strd	r0, r1, [sp]
 8004774:	f7fc f9ae 	bl	8000ad4 <__aeabi_dcmplt>
 8004778:	2800      	cmp	r0, #0
 800477a:	d165      	bne.n	8004848 <_dtoa_r+0x5e8>
 800477c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004780:	2000      	movs	r0, #0
 8004782:	4938      	ldr	r1, [pc, #224]	; (8004864 <_dtoa_r+0x604>)
 8004784:	f7fb fd80 	bl	8000288 <__aeabi_dsub>
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	f7fc f9a2 	bl	8000ad4 <__aeabi_dcmplt>
 8004790:	2800      	cmp	r0, #0
 8004792:	f040 80ba 	bne.w	800490a <_dtoa_r+0x6aa>
 8004796:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004798:	429d      	cmp	r5, r3
 800479a:	f43f af7e 	beq.w	800469a <_dtoa_r+0x43a>
 800479e:	2200      	movs	r2, #0
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <_dtoa_r+0x608>)
 80047a2:	4640      	mov	r0, r8
 80047a4:	4649      	mov	r1, r9
 80047a6:	f7fb ff23 	bl	80005f0 <__aeabi_dmul>
 80047aa:	2200      	movs	r2, #0
 80047ac:	4680      	mov	r8, r0
 80047ae:	4689      	mov	r9, r1
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <_dtoa_r+0x608>)
 80047b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047b6:	f7fb ff1b 	bl	80005f0 <__aeabi_dmul>
 80047ba:	e9cd 0100 	strd	r0, r1, [sp]
 80047be:	e7c5      	b.n	800474c <_dtoa_r+0x4ec>
 80047c0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047cc:	f7fb ff10 	bl	80005f0 <__aeabi_dmul>
 80047d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80047d4:	9d02      	ldr	r5, [sp, #8]
 80047d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047da:	f7fc f9b9 	bl	8000b50 <__aeabi_d2iz>
 80047de:	4606      	mov	r6, r0
 80047e0:	f7fb fea0 	bl	8000524 <__aeabi_i2d>
 80047e4:	3630      	adds	r6, #48	; 0x30
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047ee:	f7fb fd4b 	bl	8000288 <__aeabi_dsub>
 80047f2:	f805 6b01 	strb.w	r6, [r5], #1
 80047f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80047f8:	42ab      	cmp	r3, r5
 80047fa:	4680      	mov	r8, r0
 80047fc:	4689      	mov	r9, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	d125      	bne.n	8004850 <_dtoa_r+0x5f0>
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <_dtoa_r+0x614>)
 8004806:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800480a:	f7fb fd3f 	bl	800028c <__adddf3>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fc f97b 	bl	8000b10 <__aeabi_dcmpgt>
 800481a:	2800      	cmp	r0, #0
 800481c:	d175      	bne.n	800490a <_dtoa_r+0x6aa>
 800481e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004822:	2000      	movs	r0, #0
 8004824:	4913      	ldr	r1, [pc, #76]	; (8004874 <_dtoa_r+0x614>)
 8004826:	f7fb fd2f 	bl	8000288 <__aeabi_dsub>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fc f94f 	bl	8000ad4 <__aeabi_dcmplt>
 8004836:	2800      	cmp	r0, #0
 8004838:	f43f af2f 	beq.w	800469a <_dtoa_r+0x43a>
 800483c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004840:	2b30      	cmp	r3, #48	; 0x30
 8004842:	f105 32ff 	add.w	r2, r5, #4294967295
 8004846:	d001      	beq.n	800484c <_dtoa_r+0x5ec>
 8004848:	46bb      	mov	fp, r7
 800484a:	e04d      	b.n	80048e8 <_dtoa_r+0x688>
 800484c:	4615      	mov	r5, r2
 800484e:	e7f5      	b.n	800483c <_dtoa_r+0x5dc>
 8004850:	4b05      	ldr	r3, [pc, #20]	; (8004868 <_dtoa_r+0x608>)
 8004852:	f7fb fecd 	bl	80005f0 <__aeabi_dmul>
 8004856:	e9cd 0100 	strd	r0, r1, [sp]
 800485a:	e7bc      	b.n	80047d6 <_dtoa_r+0x576>
 800485c:	08006b30 	.word	0x08006b30
 8004860:	08006b08 	.word	0x08006b08
 8004864:	3ff00000 	.word	0x3ff00000
 8004868:	40240000 	.word	0x40240000
 800486c:	401c0000 	.word	0x401c0000
 8004870:	40140000 	.word	0x40140000
 8004874:	3fe00000 	.word	0x3fe00000
 8004878:	e9dd 6700 	ldrd	r6, r7, [sp]
 800487c:	9d02      	ldr	r5, [sp, #8]
 800487e:	4642      	mov	r2, r8
 8004880:	464b      	mov	r3, r9
 8004882:	4630      	mov	r0, r6
 8004884:	4639      	mov	r1, r7
 8004886:	f7fb ffdd 	bl	8000844 <__aeabi_ddiv>
 800488a:	f7fc f961 	bl	8000b50 <__aeabi_d2iz>
 800488e:	9000      	str	r0, [sp, #0]
 8004890:	f7fb fe48 	bl	8000524 <__aeabi_i2d>
 8004894:	4642      	mov	r2, r8
 8004896:	464b      	mov	r3, r9
 8004898:	f7fb feaa 	bl	80005f0 <__aeabi_dmul>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4630      	mov	r0, r6
 80048a2:	4639      	mov	r1, r7
 80048a4:	f7fb fcf0 	bl	8000288 <__aeabi_dsub>
 80048a8:	9e00      	ldr	r6, [sp, #0]
 80048aa:	9f03      	ldr	r7, [sp, #12]
 80048ac:	3630      	adds	r6, #48	; 0x30
 80048ae:	f805 6b01 	strb.w	r6, [r5], #1
 80048b2:	9e02      	ldr	r6, [sp, #8]
 80048b4:	1bae      	subs	r6, r5, r6
 80048b6:	42b7      	cmp	r7, r6
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	d138      	bne.n	8004930 <_dtoa_r+0x6d0>
 80048be:	f7fb fce5 	bl	800028c <__adddf3>
 80048c2:	4606      	mov	r6, r0
 80048c4:	460f      	mov	r7, r1
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	4640      	mov	r0, r8
 80048cc:	4649      	mov	r1, r9
 80048ce:	f7fc f901 	bl	8000ad4 <__aeabi_dcmplt>
 80048d2:	b9c8      	cbnz	r0, 8004908 <_dtoa_r+0x6a8>
 80048d4:	4632      	mov	r2, r6
 80048d6:	463b      	mov	r3, r7
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fc f8f0 	bl	8000ac0 <__aeabi_dcmpeq>
 80048e0:	b110      	cbz	r0, 80048e8 <_dtoa_r+0x688>
 80048e2:	9b00      	ldr	r3, [sp, #0]
 80048e4:	07db      	lsls	r3, r3, #31
 80048e6:	d40f      	bmi.n	8004908 <_dtoa_r+0x6a8>
 80048e8:	4651      	mov	r1, sl
 80048ea:	4620      	mov	r0, r4
 80048ec:	f001 f83c 	bl	8005968 <_Bfree>
 80048f0:	2300      	movs	r3, #0
 80048f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048f4:	702b      	strb	r3, [r5, #0]
 80048f6:	f10b 0301 	add.w	r3, fp, #1
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f43f acf8 	beq.w	80042f4 <_dtoa_r+0x94>
 8004904:	601d      	str	r5, [r3, #0]
 8004906:	e4f5      	b.n	80042f4 <_dtoa_r+0x94>
 8004908:	465f      	mov	r7, fp
 800490a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800490e:	2a39      	cmp	r2, #57	; 0x39
 8004910:	f105 33ff 	add.w	r3, r5, #4294967295
 8004914:	d106      	bne.n	8004924 <_dtoa_r+0x6c4>
 8004916:	9a02      	ldr	r2, [sp, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <_dtoa_r+0x6cc>
 800491c:	2330      	movs	r3, #48	; 0x30
 800491e:	7013      	strb	r3, [r2, #0]
 8004920:	3701      	adds	r7, #1
 8004922:	4613      	mov	r3, r2
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	3201      	adds	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e78d      	b.n	8004848 <_dtoa_r+0x5e8>
 800492c:	461d      	mov	r5, r3
 800492e:	e7ec      	b.n	800490a <_dtoa_r+0x6aa>
 8004930:	2200      	movs	r2, #0
 8004932:	4ba4      	ldr	r3, [pc, #656]	; (8004bc4 <_dtoa_r+0x964>)
 8004934:	f7fb fe5c 	bl	80005f0 <__aeabi_dmul>
 8004938:	2200      	movs	r2, #0
 800493a:	2300      	movs	r3, #0
 800493c:	4606      	mov	r6, r0
 800493e:	460f      	mov	r7, r1
 8004940:	f7fc f8be 	bl	8000ac0 <__aeabi_dcmpeq>
 8004944:	2800      	cmp	r0, #0
 8004946:	d09a      	beq.n	800487e <_dtoa_r+0x61e>
 8004948:	e7ce      	b.n	80048e8 <_dtoa_r+0x688>
 800494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494c:	2a00      	cmp	r2, #0
 800494e:	f000 80cd 	beq.w	8004aec <_dtoa_r+0x88c>
 8004952:	9a07      	ldr	r2, [sp, #28]
 8004954:	2a01      	cmp	r2, #1
 8004956:	f300 80af 	bgt.w	8004ab8 <_dtoa_r+0x858>
 800495a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800495c:	2a00      	cmp	r2, #0
 800495e:	f000 80a7 	beq.w	8004ab0 <_dtoa_r+0x850>
 8004962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004966:	9e08      	ldr	r6, [sp, #32]
 8004968:	9d05      	ldr	r5, [sp, #20]
 800496a:	9a05      	ldr	r2, [sp, #20]
 800496c:	441a      	add	r2, r3
 800496e:	9205      	str	r2, [sp, #20]
 8004970:	9a06      	ldr	r2, [sp, #24]
 8004972:	2101      	movs	r1, #1
 8004974:	441a      	add	r2, r3
 8004976:	4620      	mov	r0, r4
 8004978:	9206      	str	r2, [sp, #24]
 800497a:	f001 f895 	bl	8005aa8 <__i2b>
 800497e:	4607      	mov	r7, r0
 8004980:	2d00      	cmp	r5, #0
 8004982:	dd0c      	ble.n	800499e <_dtoa_r+0x73e>
 8004984:	9b06      	ldr	r3, [sp, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	dd09      	ble.n	800499e <_dtoa_r+0x73e>
 800498a:	42ab      	cmp	r3, r5
 800498c:	9a05      	ldr	r2, [sp, #20]
 800498e:	bfa8      	it	ge
 8004990:	462b      	movge	r3, r5
 8004992:	1ad2      	subs	r2, r2, r3
 8004994:	9205      	str	r2, [sp, #20]
 8004996:	9a06      	ldr	r2, [sp, #24]
 8004998:	1aed      	subs	r5, r5, r3
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	9306      	str	r3, [sp, #24]
 800499e:	9b08      	ldr	r3, [sp, #32]
 80049a0:	b1f3      	cbz	r3, 80049e0 <_dtoa_r+0x780>
 80049a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 80a5 	beq.w	8004af4 <_dtoa_r+0x894>
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	dd10      	ble.n	80049d0 <_dtoa_r+0x770>
 80049ae:	4639      	mov	r1, r7
 80049b0:	4632      	mov	r2, r6
 80049b2:	4620      	mov	r0, r4
 80049b4:	f001 f90e 	bl	8005bd4 <__pow5mult>
 80049b8:	4652      	mov	r2, sl
 80049ba:	4601      	mov	r1, r0
 80049bc:	4607      	mov	r7, r0
 80049be:	4620      	mov	r0, r4
 80049c0:	f001 f87b 	bl	8005aba <__multiply>
 80049c4:	4651      	mov	r1, sl
 80049c6:	4680      	mov	r8, r0
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 ffcd 	bl	8005968 <_Bfree>
 80049ce:	46c2      	mov	sl, r8
 80049d0:	9b08      	ldr	r3, [sp, #32]
 80049d2:	1b9a      	subs	r2, r3, r6
 80049d4:	d004      	beq.n	80049e0 <_dtoa_r+0x780>
 80049d6:	4651      	mov	r1, sl
 80049d8:	4620      	mov	r0, r4
 80049da:	f001 f8fb 	bl	8005bd4 <__pow5mult>
 80049de:	4682      	mov	sl, r0
 80049e0:	2101      	movs	r1, #1
 80049e2:	4620      	mov	r0, r4
 80049e4:	f001 f860 	bl	8005aa8 <__i2b>
 80049e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	4606      	mov	r6, r0
 80049ee:	f340 8083 	ble.w	8004af8 <_dtoa_r+0x898>
 80049f2:	461a      	mov	r2, r3
 80049f4:	4601      	mov	r1, r0
 80049f6:	4620      	mov	r0, r4
 80049f8:	f001 f8ec 	bl	8005bd4 <__pow5mult>
 80049fc:	9b07      	ldr	r3, [sp, #28]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	4606      	mov	r6, r0
 8004a02:	dd7c      	ble.n	8004afe <_dtoa_r+0x89e>
 8004a04:	f04f 0800 	mov.w	r8, #0
 8004a08:	6933      	ldr	r3, [r6, #16]
 8004a0a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a0e:	6918      	ldr	r0, [r3, #16]
 8004a10:	f000 fffc 	bl	8005a0c <__hi0bits>
 8004a14:	f1c0 0020 	rsb	r0, r0, #32
 8004a18:	9b06      	ldr	r3, [sp, #24]
 8004a1a:	4418      	add	r0, r3
 8004a1c:	f010 001f 	ands.w	r0, r0, #31
 8004a20:	f000 8096 	beq.w	8004b50 <_dtoa_r+0x8f0>
 8004a24:	f1c0 0320 	rsb	r3, r0, #32
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	f340 8087 	ble.w	8004b3c <_dtoa_r+0x8dc>
 8004a2e:	9b05      	ldr	r3, [sp, #20]
 8004a30:	f1c0 001c 	rsb	r0, r0, #28
 8004a34:	4403      	add	r3, r0
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	9b06      	ldr	r3, [sp, #24]
 8004a3a:	4405      	add	r5, r0
 8004a3c:	4403      	add	r3, r0
 8004a3e:	9306      	str	r3, [sp, #24]
 8004a40:	9b05      	ldr	r3, [sp, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dd05      	ble.n	8004a52 <_dtoa_r+0x7f2>
 8004a46:	4651      	mov	r1, sl
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f001 f910 	bl	8005c70 <__lshift>
 8004a50:	4682      	mov	sl, r0
 8004a52:	9b06      	ldr	r3, [sp, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	dd05      	ble.n	8004a64 <_dtoa_r+0x804>
 8004a58:	4631      	mov	r1, r6
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f001 f907 	bl	8005c70 <__lshift>
 8004a62:	4606      	mov	r6, r0
 8004a64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d074      	beq.n	8004b54 <_dtoa_r+0x8f4>
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	f001 f950 	bl	8005d12 <__mcmp>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	da6e      	bge.n	8004b54 <_dtoa_r+0x8f4>
 8004a76:	2300      	movs	r3, #0
 8004a78:	4651      	mov	r1, sl
 8004a7a:	220a      	movs	r2, #10
 8004a7c:	4620      	mov	r0, r4
 8004a7e:	f000 ff8a 	bl	8005996 <__multadd>
 8004a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004a88:	4682      	mov	sl, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 81a8 	beq.w	8004de0 <_dtoa_r+0xb80>
 8004a90:	2300      	movs	r3, #0
 8004a92:	4639      	mov	r1, r7
 8004a94:	220a      	movs	r2, #10
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 ff7d 	bl	8005996 <__multadd>
 8004a9c:	9b04      	ldr	r3, [sp, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	f300 80c8 	bgt.w	8004c36 <_dtoa_r+0x9d6>
 8004aa6:	9b07      	ldr	r3, [sp, #28]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	f340 80c4 	ble.w	8004c36 <_dtoa_r+0x9d6>
 8004aae:	e059      	b.n	8004b64 <_dtoa_r+0x904>
 8004ab0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ab2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ab6:	e756      	b.n	8004966 <_dtoa_r+0x706>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	1e5e      	subs	r6, r3, #1
 8004abc:	9b08      	ldr	r3, [sp, #32]
 8004abe:	42b3      	cmp	r3, r6
 8004ac0:	bfbf      	itttt	lt
 8004ac2:	9b08      	ldrlt	r3, [sp, #32]
 8004ac4:	9608      	strlt	r6, [sp, #32]
 8004ac6:	1af2      	sublt	r2, r6, r3
 8004ac8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004aca:	bfb6      	itet	lt
 8004acc:	189b      	addlt	r3, r3, r2
 8004ace:	1b9e      	subge	r6, r3, r6
 8004ad0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004ad2:	9b03      	ldr	r3, [sp, #12]
 8004ad4:	bfb8      	it	lt
 8004ad6:	2600      	movlt	r6, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bfb9      	ittee	lt
 8004adc:	9b05      	ldrlt	r3, [sp, #20]
 8004ade:	9a03      	ldrlt	r2, [sp, #12]
 8004ae0:	9d05      	ldrge	r5, [sp, #20]
 8004ae2:	9b03      	ldrge	r3, [sp, #12]
 8004ae4:	bfbc      	itt	lt
 8004ae6:	1a9d      	sublt	r5, r3, r2
 8004ae8:	2300      	movlt	r3, #0
 8004aea:	e73e      	b.n	800496a <_dtoa_r+0x70a>
 8004aec:	9e08      	ldr	r6, [sp, #32]
 8004aee:	9d05      	ldr	r5, [sp, #20]
 8004af0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004af2:	e745      	b.n	8004980 <_dtoa_r+0x720>
 8004af4:	9a08      	ldr	r2, [sp, #32]
 8004af6:	e76e      	b.n	80049d6 <_dtoa_r+0x776>
 8004af8:	9b07      	ldr	r3, [sp, #28]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	dc19      	bgt.n	8004b32 <_dtoa_r+0x8d2>
 8004afe:	9b00      	ldr	r3, [sp, #0]
 8004b00:	b9bb      	cbnz	r3, 8004b32 <_dtoa_r+0x8d2>
 8004b02:	9b01      	ldr	r3, [sp, #4]
 8004b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b08:	b99b      	cbnz	r3, 8004b32 <_dtoa_r+0x8d2>
 8004b0a:	9b01      	ldr	r3, [sp, #4]
 8004b0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b10:	0d1b      	lsrs	r3, r3, #20
 8004b12:	051b      	lsls	r3, r3, #20
 8004b14:	b183      	cbz	r3, 8004b38 <_dtoa_r+0x8d8>
 8004b16:	9b05      	ldr	r3, [sp, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	9305      	str	r3, [sp, #20]
 8004b1c:	9b06      	ldr	r3, [sp, #24]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	9306      	str	r3, [sp, #24]
 8004b22:	f04f 0801 	mov.w	r8, #1
 8004b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f47f af6d 	bne.w	8004a08 <_dtoa_r+0x7a8>
 8004b2e:	2001      	movs	r0, #1
 8004b30:	e772      	b.n	8004a18 <_dtoa_r+0x7b8>
 8004b32:	f04f 0800 	mov.w	r8, #0
 8004b36:	e7f6      	b.n	8004b26 <_dtoa_r+0x8c6>
 8004b38:	4698      	mov	r8, r3
 8004b3a:	e7f4      	b.n	8004b26 <_dtoa_r+0x8c6>
 8004b3c:	d080      	beq.n	8004a40 <_dtoa_r+0x7e0>
 8004b3e:	9a05      	ldr	r2, [sp, #20]
 8004b40:	331c      	adds	r3, #28
 8004b42:	441a      	add	r2, r3
 8004b44:	9205      	str	r2, [sp, #20]
 8004b46:	9a06      	ldr	r2, [sp, #24]
 8004b48:	441a      	add	r2, r3
 8004b4a:	441d      	add	r5, r3
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	e776      	b.n	8004a3e <_dtoa_r+0x7de>
 8004b50:	4603      	mov	r3, r0
 8004b52:	e7f4      	b.n	8004b3e <_dtoa_r+0x8de>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	dc36      	bgt.n	8004bc8 <_dtoa_r+0x968>
 8004b5a:	9b07      	ldr	r3, [sp, #28]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	dd33      	ble.n	8004bc8 <_dtoa_r+0x968>
 8004b60:	9b03      	ldr	r3, [sp, #12]
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	9b04      	ldr	r3, [sp, #16]
 8004b66:	b963      	cbnz	r3, 8004b82 <_dtoa_r+0x922>
 8004b68:	4631      	mov	r1, r6
 8004b6a:	2205      	movs	r2, #5
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f000 ff12 	bl	8005996 <__multadd>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4606      	mov	r6, r0
 8004b76:	4650      	mov	r0, sl
 8004b78:	f001 f8cb 	bl	8005d12 <__mcmp>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f73f adb6 	bgt.w	80046ee <_dtoa_r+0x48e>
 8004b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b84:	9d02      	ldr	r5, [sp, #8]
 8004b86:	ea6f 0b03 	mvn.w	fp, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9303      	str	r3, [sp, #12]
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 fee9 	bl	8005968 <_Bfree>
 8004b96:	2f00      	cmp	r7, #0
 8004b98:	f43f aea6 	beq.w	80048e8 <_dtoa_r+0x688>
 8004b9c:	9b03      	ldr	r3, [sp, #12]
 8004b9e:	b12b      	cbz	r3, 8004bac <_dtoa_r+0x94c>
 8004ba0:	42bb      	cmp	r3, r7
 8004ba2:	d003      	beq.n	8004bac <_dtoa_r+0x94c>
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 fede 	bl	8005968 <_Bfree>
 8004bac:	4639      	mov	r1, r7
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f000 feda 	bl	8005968 <_Bfree>
 8004bb4:	e698      	b.n	80048e8 <_dtoa_r+0x688>
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	4637      	mov	r7, r6
 8004bba:	e7e2      	b.n	8004b82 <_dtoa_r+0x922>
 8004bbc:	46bb      	mov	fp, r7
 8004bbe:	4637      	mov	r7, r6
 8004bc0:	e595      	b.n	80046ee <_dtoa_r+0x48e>
 8004bc2:	bf00      	nop
 8004bc4:	40240000 	.word	0x40240000
 8004bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bca:	bb93      	cbnz	r3, 8004c32 <_dtoa_r+0x9d2>
 8004bcc:	9b03      	ldr	r3, [sp, #12]
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	9d02      	ldr	r5, [sp, #8]
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	f7ff fab5 	bl	8004144 <quorem>
 8004bda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004bde:	f805 9b01 	strb.w	r9, [r5], #1
 8004be2:	9b02      	ldr	r3, [sp, #8]
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	1aeb      	subs	r3, r5, r3
 8004be8:	429a      	cmp	r2, r3
 8004bea:	f300 80dc 	bgt.w	8004da6 <_dtoa_r+0xb46>
 8004bee:	9b02      	ldr	r3, [sp, #8]
 8004bf0:	2a01      	cmp	r2, #1
 8004bf2:	bfac      	ite	ge
 8004bf4:	189b      	addge	r3, r3, r2
 8004bf6:	3301      	addlt	r3, #1
 8004bf8:	4698      	mov	r8, r3
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9303      	str	r3, [sp, #12]
 8004bfe:	4651      	mov	r1, sl
 8004c00:	2201      	movs	r2, #1
 8004c02:	4620      	mov	r0, r4
 8004c04:	f001 f834 	bl	8005c70 <__lshift>
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4682      	mov	sl, r0
 8004c0c:	f001 f881 	bl	8005d12 <__mcmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	f300 808d 	bgt.w	8004d30 <_dtoa_r+0xad0>
 8004c16:	d103      	bne.n	8004c20 <_dtoa_r+0x9c0>
 8004c18:	f019 0f01 	tst.w	r9, #1
 8004c1c:	f040 8088 	bne.w	8004d30 <_dtoa_r+0xad0>
 8004c20:	4645      	mov	r5, r8
 8004c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004c26:	2b30      	cmp	r3, #48	; 0x30
 8004c28:	f105 32ff 	add.w	r2, r5, #4294967295
 8004c2c:	d1af      	bne.n	8004b8e <_dtoa_r+0x92e>
 8004c2e:	4615      	mov	r5, r2
 8004c30:	e7f7      	b.n	8004c22 <_dtoa_r+0x9c2>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	dd05      	ble.n	8004c46 <_dtoa_r+0x9e6>
 8004c3a:	4639      	mov	r1, r7
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f001 f816 	bl	8005c70 <__lshift>
 8004c44:	4607      	mov	r7, r0
 8004c46:	f1b8 0f00 	cmp.w	r8, #0
 8004c4a:	d04c      	beq.n	8004ce6 <_dtoa_r+0xa86>
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4620      	mov	r0, r4
 8004c50:	f000 fe56 	bl	8005900 <_Balloc>
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	3202      	adds	r2, #2
 8004c58:	4605      	mov	r5, r0
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	f107 010c 	add.w	r1, r7, #12
 8004c60:	300c      	adds	r0, #12
 8004c62:	f000 fe35 	bl	80058d0 <memcpy>
 8004c66:	2201      	movs	r2, #1
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f001 f800 	bl	8005c70 <__lshift>
 8004c70:	9b00      	ldr	r3, [sp, #0]
 8004c72:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004c76:	9703      	str	r7, [sp, #12]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	9305      	str	r3, [sp, #20]
 8004c80:	4631      	mov	r1, r6
 8004c82:	4650      	mov	r0, sl
 8004c84:	f7ff fa5e 	bl	8004144 <quorem>
 8004c88:	9903      	ldr	r1, [sp, #12]
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c90:	4650      	mov	r0, sl
 8004c92:	f001 f83e 	bl	8005d12 <__mcmp>
 8004c96:	463a      	mov	r2, r7
 8004c98:	9000      	str	r0, [sp, #0]
 8004c9a:	4631      	mov	r1, r6
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f001 f852 	bl	8005d46 <__mdiff>
 8004ca2:	68c3      	ldr	r3, [r0, #12]
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	bb03      	cbnz	r3, 8004cea <_dtoa_r+0xa8a>
 8004ca8:	4601      	mov	r1, r0
 8004caa:	9006      	str	r0, [sp, #24]
 8004cac:	4650      	mov	r0, sl
 8004cae:	f001 f830 	bl	8005d12 <__mcmp>
 8004cb2:	9a06      	ldr	r2, [sp, #24]
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4620      	mov	r0, r4
 8004cba:	9306      	str	r3, [sp, #24]
 8004cbc:	f000 fe54 	bl	8005968 <_Bfree>
 8004cc0:	9b06      	ldr	r3, [sp, #24]
 8004cc2:	b9a3      	cbnz	r3, 8004cee <_dtoa_r+0xa8e>
 8004cc4:	9a07      	ldr	r2, [sp, #28]
 8004cc6:	b992      	cbnz	r2, 8004cee <_dtoa_r+0xa8e>
 8004cc8:	9a05      	ldr	r2, [sp, #20]
 8004cca:	b982      	cbnz	r2, 8004cee <_dtoa_r+0xa8e>
 8004ccc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cd0:	d029      	beq.n	8004d26 <_dtoa_r+0xac6>
 8004cd2:	9b00      	ldr	r3, [sp, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	dd01      	ble.n	8004cdc <_dtoa_r+0xa7c>
 8004cd8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004cdc:	f108 0501 	add.w	r5, r8, #1
 8004ce0:	f888 9000 	strb.w	r9, [r8]
 8004ce4:	e753      	b.n	8004b8e <_dtoa_r+0x92e>
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	e7c2      	b.n	8004c70 <_dtoa_r+0xa10>
 8004cea:	2301      	movs	r3, #1
 8004cec:	e7e3      	b.n	8004cb6 <_dtoa_r+0xa56>
 8004cee:	9a00      	ldr	r2, [sp, #0]
 8004cf0:	2a00      	cmp	r2, #0
 8004cf2:	db04      	blt.n	8004cfe <_dtoa_r+0xa9e>
 8004cf4:	d125      	bne.n	8004d42 <_dtoa_r+0xae2>
 8004cf6:	9a07      	ldr	r2, [sp, #28]
 8004cf8:	bb1a      	cbnz	r2, 8004d42 <_dtoa_r+0xae2>
 8004cfa:	9a05      	ldr	r2, [sp, #20]
 8004cfc:	bb0a      	cbnz	r2, 8004d42 <_dtoa_r+0xae2>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	ddec      	ble.n	8004cdc <_dtoa_r+0xa7c>
 8004d02:	4651      	mov	r1, sl
 8004d04:	2201      	movs	r2, #1
 8004d06:	4620      	mov	r0, r4
 8004d08:	f000 ffb2 	bl	8005c70 <__lshift>
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4682      	mov	sl, r0
 8004d10:	f000 ffff 	bl	8005d12 <__mcmp>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	dc03      	bgt.n	8004d20 <_dtoa_r+0xac0>
 8004d18:	d1e0      	bne.n	8004cdc <_dtoa_r+0xa7c>
 8004d1a:	f019 0f01 	tst.w	r9, #1
 8004d1e:	d0dd      	beq.n	8004cdc <_dtoa_r+0xa7c>
 8004d20:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d24:	d1d8      	bne.n	8004cd8 <_dtoa_r+0xa78>
 8004d26:	2339      	movs	r3, #57	; 0x39
 8004d28:	f888 3000 	strb.w	r3, [r8]
 8004d2c:	f108 0801 	add.w	r8, r8, #1
 8004d30:	4645      	mov	r5, r8
 8004d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d36:	2b39      	cmp	r3, #57	; 0x39
 8004d38:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d3c:	d03b      	beq.n	8004db6 <_dtoa_r+0xb56>
 8004d3e:	3301      	adds	r3, #1
 8004d40:	e040      	b.n	8004dc4 <_dtoa_r+0xb64>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f108 0501 	add.w	r5, r8, #1
 8004d48:	dd05      	ble.n	8004d56 <_dtoa_r+0xaf6>
 8004d4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d4e:	d0ea      	beq.n	8004d26 <_dtoa_r+0xac6>
 8004d50:	f109 0901 	add.w	r9, r9, #1
 8004d54:	e7c4      	b.n	8004ce0 <_dtoa_r+0xa80>
 8004d56:	9b02      	ldr	r3, [sp, #8]
 8004d58:	9a04      	ldr	r2, [sp, #16]
 8004d5a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004d5e:	1aeb      	subs	r3, r5, r3
 8004d60:	4293      	cmp	r3, r2
 8004d62:	46a8      	mov	r8, r5
 8004d64:	f43f af4b 	beq.w	8004bfe <_dtoa_r+0x99e>
 8004d68:	4651      	mov	r1, sl
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	220a      	movs	r2, #10
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 fe11 	bl	8005996 <__multadd>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	9903      	ldr	r1, [sp, #12]
 8004d78:	42bb      	cmp	r3, r7
 8004d7a:	4682      	mov	sl, r0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	f04f 020a 	mov.w	r2, #10
 8004d84:	4620      	mov	r0, r4
 8004d86:	d104      	bne.n	8004d92 <_dtoa_r+0xb32>
 8004d88:	f000 fe05 	bl	8005996 <__multadd>
 8004d8c:	9003      	str	r0, [sp, #12]
 8004d8e:	4607      	mov	r7, r0
 8004d90:	e776      	b.n	8004c80 <_dtoa_r+0xa20>
 8004d92:	f000 fe00 	bl	8005996 <__multadd>
 8004d96:	2300      	movs	r3, #0
 8004d98:	9003      	str	r0, [sp, #12]
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	4639      	mov	r1, r7
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 fdf9 	bl	8005996 <__multadd>
 8004da4:	e7f3      	b.n	8004d8e <_dtoa_r+0xb2e>
 8004da6:	4651      	mov	r1, sl
 8004da8:	2300      	movs	r3, #0
 8004daa:	220a      	movs	r2, #10
 8004dac:	4620      	mov	r0, r4
 8004dae:	f000 fdf2 	bl	8005996 <__multadd>
 8004db2:	4682      	mov	sl, r0
 8004db4:	e70d      	b.n	8004bd2 <_dtoa_r+0x972>
 8004db6:	9b02      	ldr	r3, [sp, #8]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d105      	bne.n	8004dc8 <_dtoa_r+0xb68>
 8004dbc:	9a02      	ldr	r2, [sp, #8]
 8004dbe:	f10b 0b01 	add.w	fp, fp, #1
 8004dc2:	2331      	movs	r3, #49	; 0x31
 8004dc4:	7013      	strb	r3, [r2, #0]
 8004dc6:	e6e2      	b.n	8004b8e <_dtoa_r+0x92e>
 8004dc8:	4615      	mov	r5, r2
 8004dca:	e7b2      	b.n	8004d32 <_dtoa_r+0xad2>
 8004dcc:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <_dtoa_r+0xb94>)
 8004dce:	f7ff baae 	b.w	800432e <_dtoa_r+0xce>
 8004dd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f aa88 	bne.w	80042ea <_dtoa_r+0x8a>
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <_dtoa_r+0xb98>)
 8004ddc:	f7ff baa7 	b.w	800432e <_dtoa_r+0xce>
 8004de0:	9b04      	ldr	r3, [sp, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f73f aef4 	bgt.w	8004bd0 <_dtoa_r+0x970>
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	f77f aef0 	ble.w	8004bd0 <_dtoa_r+0x970>
 8004df0:	e6b8      	b.n	8004b64 <_dtoa_r+0x904>
 8004df2:	bf00      	nop
 8004df4:	08006a72 	.word	0x08006a72
 8004df8:	08006a94 	.word	0x08006a94

08004dfc <__sflush_r>:
 8004dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e00:	b293      	uxth	r3, r2
 8004e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e06:	4605      	mov	r5, r0
 8004e08:	0718      	lsls	r0, r3, #28
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	d461      	bmi.n	8004ed2 <__sflush_r+0xd6>
 8004e0e:	684b      	ldr	r3, [r1, #4]
 8004e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	818a      	strh	r2, [r1, #12]
 8004e18:	dc05      	bgt.n	8004e26 <__sflush_r+0x2a>
 8004e1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc02      	bgt.n	8004e26 <__sflush_r+0x2a>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e28:	2e00      	cmp	r6, #0
 8004e2a:	d0f9      	beq.n	8004e20 <__sflush_r+0x24>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e32:	682f      	ldr	r7, [r5, #0]
 8004e34:	602b      	str	r3, [r5, #0]
 8004e36:	d037      	beq.n	8004ea8 <__sflush_r+0xac>
 8004e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	075a      	lsls	r2, r3, #29
 8004e3e:	d505      	bpl.n	8004e4c <__sflush_r+0x50>
 8004e40:	6863      	ldr	r3, [r4, #4]
 8004e42:	1ac0      	subs	r0, r0, r3
 8004e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e46:	b10b      	cbz	r3, 8004e4c <__sflush_r+0x50>
 8004e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e4a:	1ac0      	subs	r0, r0, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e52:	6a21      	ldr	r1, [r4, #32]
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b0      	blx	r6
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	d106      	bne.n	8004e6c <__sflush_r+0x70>
 8004e5e:	6829      	ldr	r1, [r5, #0]
 8004e60:	291d      	cmp	r1, #29
 8004e62:	d84f      	bhi.n	8004f04 <__sflush_r+0x108>
 8004e64:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <__sflush_r+0x120>)
 8004e66:	40ca      	lsrs	r2, r1
 8004e68:	07d6      	lsls	r6, r2, #31
 8004e6a:	d54b      	bpl.n	8004f04 <__sflush_r+0x108>
 8004e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e70:	b21b      	sxth	r3, r3
 8004e72:	2200      	movs	r2, #0
 8004e74:	6062      	str	r2, [r4, #4]
 8004e76:	04d9      	lsls	r1, r3, #19
 8004e78:	6922      	ldr	r2, [r4, #16]
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	6022      	str	r2, [r4, #0]
 8004e7e:	d504      	bpl.n	8004e8a <__sflush_r+0x8e>
 8004e80:	1c42      	adds	r2, r0, #1
 8004e82:	d101      	bne.n	8004e88 <__sflush_r+0x8c>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b903      	cbnz	r3, 8004e8a <__sflush_r+0x8e>
 8004e88:	6560      	str	r0, [r4, #84]	; 0x54
 8004e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8c:	602f      	str	r7, [r5, #0]
 8004e8e:	2900      	cmp	r1, #0
 8004e90:	d0c6      	beq.n	8004e20 <__sflush_r+0x24>
 8004e92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e96:	4299      	cmp	r1, r3
 8004e98:	d002      	beq.n	8004ea0 <__sflush_r+0xa4>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f000 f9aa 	bl	80051f4 <_free_r>
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	6360      	str	r0, [r4, #52]	; 0x34
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	6a21      	ldr	r1, [r4, #32]
 8004eaa:	2301      	movs	r3, #1
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b0      	blx	r6
 8004eb0:	1c41      	adds	r1, r0, #1
 8004eb2:	d1c2      	bne.n	8004e3a <__sflush_r+0x3e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d0bf      	beq.n	8004e3a <__sflush_r+0x3e>
 8004eba:	2b1d      	cmp	r3, #29
 8004ebc:	d001      	beq.n	8004ec2 <__sflush_r+0xc6>
 8004ebe:	2b16      	cmp	r3, #22
 8004ec0:	d101      	bne.n	8004ec6 <__sflush_r+0xca>
 8004ec2:	602f      	str	r7, [r5, #0]
 8004ec4:	e7ac      	b.n	8004e20 <__sflush_r+0x24>
 8004ec6:	89a3      	ldrh	r3, [r4, #12]
 8004ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ecc:	81a3      	strh	r3, [r4, #12]
 8004ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed2:	690f      	ldr	r7, [r1, #16]
 8004ed4:	2f00      	cmp	r7, #0
 8004ed6:	d0a3      	beq.n	8004e20 <__sflush_r+0x24>
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	680e      	ldr	r6, [r1, #0]
 8004edc:	bf08      	it	eq
 8004ede:	694b      	ldreq	r3, [r1, #20]
 8004ee0:	600f      	str	r7, [r1, #0]
 8004ee2:	bf18      	it	ne
 8004ee4:	2300      	movne	r3, #0
 8004ee6:	eba6 0807 	sub.w	r8, r6, r7
 8004eea:	608b      	str	r3, [r1, #8]
 8004eec:	f1b8 0f00 	cmp.w	r8, #0
 8004ef0:	dd96      	ble.n	8004e20 <__sflush_r+0x24>
 8004ef2:	4643      	mov	r3, r8
 8004ef4:	463a      	mov	r2, r7
 8004ef6:	6a21      	ldr	r1, [r4, #32]
 8004ef8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004efa:	4628      	mov	r0, r5
 8004efc:	47b0      	blx	r6
 8004efe:	2800      	cmp	r0, #0
 8004f00:	dc07      	bgt.n	8004f12 <__sflush_r+0x116>
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f12:	4407      	add	r7, r0
 8004f14:	eba8 0800 	sub.w	r8, r8, r0
 8004f18:	e7e8      	b.n	8004eec <__sflush_r+0xf0>
 8004f1a:	bf00      	nop
 8004f1c:	20400001 	.word	0x20400001

08004f20 <_fflush_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	690b      	ldr	r3, [r1, #16]
 8004f24:	4605      	mov	r5, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	b913      	cbnz	r3, 8004f30 <_fflush_r+0x10>
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	b118      	cbz	r0, 8004f3a <_fflush_r+0x1a>
 8004f32:	6983      	ldr	r3, [r0, #24]
 8004f34:	b90b      	cbnz	r3, 8004f3a <_fflush_r+0x1a>
 8004f36:	f000 f887 	bl	8005048 <__sinit>
 8004f3a:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <_fflush_r+0x6c>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	d11b      	bne.n	8004f78 <_fflush_r+0x58>
 8004f40:	686c      	ldr	r4, [r5, #4]
 8004f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0ef      	beq.n	8004f2a <_fflush_r+0xa>
 8004f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f4c:	07d0      	lsls	r0, r2, #31
 8004f4e:	d404      	bmi.n	8004f5a <_fflush_r+0x3a>
 8004f50:	0599      	lsls	r1, r3, #22
 8004f52:	d402      	bmi.n	8004f5a <_fflush_r+0x3a>
 8004f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f56:	f000 fa37 	bl	80053c8 <__retarget_lock_acquire_recursive>
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	4621      	mov	r1, r4
 8004f5e:	f7ff ff4d 	bl	8004dfc <__sflush_r>
 8004f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f64:	07da      	lsls	r2, r3, #31
 8004f66:	4605      	mov	r5, r0
 8004f68:	d4e0      	bmi.n	8004f2c <_fflush_r+0xc>
 8004f6a:	89a3      	ldrh	r3, [r4, #12]
 8004f6c:	059b      	lsls	r3, r3, #22
 8004f6e:	d4dd      	bmi.n	8004f2c <_fflush_r+0xc>
 8004f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f72:	f000 fa2a 	bl	80053ca <__retarget_lock_release_recursive>
 8004f76:	e7d9      	b.n	8004f2c <_fflush_r+0xc>
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <_fflush_r+0x70>)
 8004f7a:	429c      	cmp	r4, r3
 8004f7c:	d101      	bne.n	8004f82 <_fflush_r+0x62>
 8004f7e:	68ac      	ldr	r4, [r5, #8]
 8004f80:	e7df      	b.n	8004f42 <_fflush_r+0x22>
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <_fflush_r+0x74>)
 8004f84:	429c      	cmp	r4, r3
 8004f86:	bf08      	it	eq
 8004f88:	68ec      	ldreq	r4, [r5, #12]
 8004f8a:	e7da      	b.n	8004f42 <_fflush_r+0x22>
 8004f8c:	08006ac4 	.word	0x08006ac4
 8004f90:	08006ae4 	.word	0x08006ae4
 8004f94:	08006aa4 	.word	0x08006aa4

08004f98 <_cleanup_r>:
 8004f98:	4901      	ldr	r1, [pc, #4]	; (8004fa0 <_cleanup_r+0x8>)
 8004f9a:	f000 b9e7 	b.w	800536c <_fwalk_reent>
 8004f9e:	bf00      	nop
 8004fa0:	08006051 	.word	0x08006051

08004fa4 <std.isra.0>:
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	b510      	push	{r4, lr}
 8004fa8:	4604      	mov	r4, r0
 8004faa:	6003      	str	r3, [r0, #0]
 8004fac:	6043      	str	r3, [r0, #4]
 8004fae:	6083      	str	r3, [r0, #8]
 8004fb0:	8181      	strh	r1, [r0, #12]
 8004fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004fb4:	81c2      	strh	r2, [r0, #14]
 8004fb6:	6103      	str	r3, [r0, #16]
 8004fb8:	6143      	str	r3, [r0, #20]
 8004fba:	6183      	str	r3, [r0, #24]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	305c      	adds	r0, #92	; 0x5c
 8004fc2:	f7fd ffb3 	bl	8002f2c <memset>
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <std.isra.0+0x38>)
 8004fc8:	6263      	str	r3, [r4, #36]	; 0x24
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <std.isra.0+0x3c>)
 8004fcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <std.isra.0+0x40>)
 8004fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fd2:	4b05      	ldr	r3, [pc, #20]	; (8004fe8 <std.isra.0+0x44>)
 8004fd4:	6224      	str	r4, [r4, #32]
 8004fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8004fd8:	bd10      	pop	{r4, pc}
 8004fda:	bf00      	nop
 8004fdc:	08005ec1 	.word	0x08005ec1
 8004fe0:	08005ee3 	.word	0x08005ee3
 8004fe4:	08005f1b 	.word	0x08005f1b
 8004fe8:	08005f3f 	.word	0x08005f3f

08004fec <__sfmoreglue>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	1e4a      	subs	r2, r1, #1
 8004ff0:	2568      	movs	r5, #104	; 0x68
 8004ff2:	4355      	muls	r5, r2
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ffa:	f000 fa5b 	bl	80054b4 <_malloc_r>
 8004ffe:	4604      	mov	r4, r0
 8005000:	b140      	cbz	r0, 8005014 <__sfmoreglue+0x28>
 8005002:	2100      	movs	r1, #0
 8005004:	e880 0042 	stmia.w	r0, {r1, r6}
 8005008:	300c      	adds	r0, #12
 800500a:	60a0      	str	r0, [r4, #8]
 800500c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005010:	f7fd ff8c 	bl	8002f2c <memset>
 8005014:	4620      	mov	r0, r4
 8005016:	bd70      	pop	{r4, r5, r6, pc}

08005018 <__sfp_lock_acquire>:
 8005018:	4801      	ldr	r0, [pc, #4]	; (8005020 <__sfp_lock_acquire+0x8>)
 800501a:	f000 b9d5 	b.w	80053c8 <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	20000748 	.word	0x20000748

08005024 <__sfp_lock_release>:
 8005024:	4801      	ldr	r0, [pc, #4]	; (800502c <__sfp_lock_release+0x8>)
 8005026:	f000 b9d0 	b.w	80053ca <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	20000748 	.word	0x20000748

08005030 <__sinit_lock_acquire>:
 8005030:	4801      	ldr	r0, [pc, #4]	; (8005038 <__sinit_lock_acquire+0x8>)
 8005032:	f000 b9c9 	b.w	80053c8 <__retarget_lock_acquire_recursive>
 8005036:	bf00      	nop
 8005038:	20000743 	.word	0x20000743

0800503c <__sinit_lock_release>:
 800503c:	4801      	ldr	r0, [pc, #4]	; (8005044 <__sinit_lock_release+0x8>)
 800503e:	f000 b9c4 	b.w	80053ca <__retarget_lock_release_recursive>
 8005042:	bf00      	nop
 8005044:	20000743 	.word	0x20000743

08005048 <__sinit>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4604      	mov	r4, r0
 800504c:	f7ff fff0 	bl	8005030 <__sinit_lock_acquire>
 8005050:	69a3      	ldr	r3, [r4, #24]
 8005052:	b11b      	cbz	r3, 800505c <__sinit+0x14>
 8005054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005058:	f7ff bff0 	b.w	800503c <__sinit_lock_release>
 800505c:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005060:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8005064:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005068:	4b12      	ldr	r3, [pc, #72]	; (80050b4 <__sinit+0x6c>)
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <__sinit+0x70>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	62a2      	str	r2, [r4, #40]	; 0x28
 8005070:	429c      	cmp	r4, r3
 8005072:	bf04      	itt	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	61a3      	streq	r3, [r4, #24]
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f81f 	bl	80050bc <__sfp>
 800507e:	6060      	str	r0, [r4, #4]
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f81b 	bl	80050bc <__sfp>
 8005086:	60a0      	str	r0, [r4, #8]
 8005088:	4620      	mov	r0, r4
 800508a:	f000 f817 	bl	80050bc <__sfp>
 800508e:	2200      	movs	r2, #0
 8005090:	60e0      	str	r0, [r4, #12]
 8005092:	2104      	movs	r1, #4
 8005094:	6860      	ldr	r0, [r4, #4]
 8005096:	f7ff ff85 	bl	8004fa4 <std.isra.0>
 800509a:	2201      	movs	r2, #1
 800509c:	2109      	movs	r1, #9
 800509e:	68a0      	ldr	r0, [r4, #8]
 80050a0:	f7ff ff80 	bl	8004fa4 <std.isra.0>
 80050a4:	2202      	movs	r2, #2
 80050a6:	2112      	movs	r1, #18
 80050a8:	68e0      	ldr	r0, [r4, #12]
 80050aa:	f7ff ff7b 	bl	8004fa4 <std.isra.0>
 80050ae:	2301      	movs	r3, #1
 80050b0:	61a3      	str	r3, [r4, #24]
 80050b2:	e7cf      	b.n	8005054 <__sinit+0xc>
 80050b4:	08006a3c 	.word	0x08006a3c
 80050b8:	08004f99 	.word	0x08004f99

080050bc <__sfp>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	f7ff ffaa 	bl	8005018 <__sfp_lock_acquire>
 80050c4:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <__sfp+0x88>)
 80050c6:	681e      	ldr	r6, [r3, #0]
 80050c8:	69b3      	ldr	r3, [r6, #24]
 80050ca:	b913      	cbnz	r3, 80050d2 <__sfp+0x16>
 80050cc:	4630      	mov	r0, r6
 80050ce:	f7ff ffbb 	bl	8005048 <__sinit>
 80050d2:	36d8      	adds	r6, #216	; 0xd8
 80050d4:	68b4      	ldr	r4, [r6, #8]
 80050d6:	6873      	ldr	r3, [r6, #4]
 80050d8:	3b01      	subs	r3, #1
 80050da:	d503      	bpl.n	80050e4 <__sfp+0x28>
 80050dc:	6833      	ldr	r3, [r6, #0]
 80050de:	b133      	cbz	r3, 80050ee <__sfp+0x32>
 80050e0:	6836      	ldr	r6, [r6, #0]
 80050e2:	e7f7      	b.n	80050d4 <__sfp+0x18>
 80050e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050e8:	b17d      	cbz	r5, 800510a <__sfp+0x4e>
 80050ea:	3468      	adds	r4, #104	; 0x68
 80050ec:	e7f4      	b.n	80050d8 <__sfp+0x1c>
 80050ee:	2104      	movs	r1, #4
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ff7b 	bl	8004fec <__sfmoreglue>
 80050f6:	4604      	mov	r4, r0
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d1f0      	bne.n	80050e0 <__sfp+0x24>
 80050fe:	f7ff ff91 	bl	8005024 <__sfp_lock_release>
 8005102:	230c      	movs	r3, #12
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4620      	mov	r0, r4
 8005108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800510a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800510e:	81e3      	strh	r3, [r4, #14]
 8005110:	2301      	movs	r3, #1
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005118:	6665      	str	r5, [r4, #100]	; 0x64
 800511a:	f000 f953 	bl	80053c4 <__retarget_lock_init_recursive>
 800511e:	f7ff ff81 	bl	8005024 <__sfp_lock_release>
 8005122:	6025      	str	r5, [r4, #0]
 8005124:	60a5      	str	r5, [r4, #8]
 8005126:	6065      	str	r5, [r4, #4]
 8005128:	6125      	str	r5, [r4, #16]
 800512a:	6165      	str	r5, [r4, #20]
 800512c:	61a5      	str	r5, [r4, #24]
 800512e:	2208      	movs	r2, #8
 8005130:	4629      	mov	r1, r5
 8005132:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005136:	f7fd fef9 	bl	8002f2c <memset>
 800513a:	6365      	str	r5, [r4, #52]	; 0x34
 800513c:	63a5      	str	r5, [r4, #56]	; 0x38
 800513e:	64a5      	str	r5, [r4, #72]	; 0x48
 8005140:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005142:	e7e0      	b.n	8005106 <__sfp+0x4a>
 8005144:	08006a3c 	.word	0x08006a3c

08005148 <_malloc_trim_r>:
 8005148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800514c:	4f25      	ldr	r7, [pc, #148]	; (80051e4 <_malloc_trim_r+0x9c>)
 800514e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80051f0 <_malloc_trim_r+0xa8>
 8005152:	4689      	mov	r9, r1
 8005154:	4606      	mov	r6, r0
 8005156:	f000 fbc7 	bl	80058e8 <__malloc_lock>
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685d      	ldr	r5, [r3, #4]
 800515e:	f1a8 0411 	sub.w	r4, r8, #17
 8005162:	f025 0503 	bic.w	r5, r5, #3
 8005166:	eba4 0409 	sub.w	r4, r4, r9
 800516a:	442c      	add	r4, r5
 800516c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005170:	3c01      	subs	r4, #1
 8005172:	fb08 f404 	mul.w	r4, r8, r4
 8005176:	4544      	cmp	r4, r8
 8005178:	da05      	bge.n	8005186 <_malloc_trim_r+0x3e>
 800517a:	4630      	mov	r0, r6
 800517c:	f000 fbba 	bl	80058f4 <__malloc_unlock>
 8005180:	2000      	movs	r0, #0
 8005182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005186:	2100      	movs	r1, #0
 8005188:	4630      	mov	r0, r6
 800518a:	f000 fe89 	bl	8005ea0 <_sbrk_r>
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	442b      	add	r3, r5
 8005192:	4298      	cmp	r0, r3
 8005194:	d1f1      	bne.n	800517a <_malloc_trim_r+0x32>
 8005196:	4261      	negs	r1, r4
 8005198:	4630      	mov	r0, r6
 800519a:	f000 fe81 	bl	8005ea0 <_sbrk_r>
 800519e:	3001      	adds	r0, #1
 80051a0:	d110      	bne.n	80051c4 <_malloc_trim_r+0x7c>
 80051a2:	2100      	movs	r1, #0
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 fe7b 	bl	8005ea0 <_sbrk_r>
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	1a83      	subs	r3, r0, r2
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	dde3      	ble.n	800517a <_malloc_trim_r+0x32>
 80051b2:	490d      	ldr	r1, [pc, #52]	; (80051e8 <_malloc_trim_r+0xa0>)
 80051b4:	6809      	ldr	r1, [r1, #0]
 80051b6:	1a40      	subs	r0, r0, r1
 80051b8:	490c      	ldr	r1, [pc, #48]	; (80051ec <_malloc_trim_r+0xa4>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6008      	str	r0, [r1, #0]
 80051c0:	6053      	str	r3, [r2, #4]
 80051c2:	e7da      	b.n	800517a <_malloc_trim_r+0x32>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4a09      	ldr	r2, [pc, #36]	; (80051ec <_malloc_trim_r+0xa4>)
 80051c8:	1b2d      	subs	r5, r5, r4
 80051ca:	f045 0501 	orr.w	r5, r5, #1
 80051ce:	605d      	str	r5, [r3, #4]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	4630      	mov	r0, r6
 80051d4:	1b1c      	subs	r4, r3, r4
 80051d6:	6014      	str	r4, [r2, #0]
 80051d8:	f000 fb8c 	bl	80058f4 <__malloc_unlock>
 80051dc:	2001      	movs	r0, #1
 80051de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051e2:	bf00      	nop
 80051e4:	20000100 	.word	0x20000100
 80051e8:	20000508 	.word	0x20000508
 80051ec:	2000069c 	.word	0x2000069c
 80051f0:	00000080 	.word	0x00000080

080051f4 <_free_r>:
 80051f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f8:	4604      	mov	r4, r0
 80051fa:	4688      	mov	r8, r1
 80051fc:	2900      	cmp	r1, #0
 80051fe:	f000 80ab 	beq.w	8005358 <_free_r+0x164>
 8005202:	f000 fb71 	bl	80058e8 <__malloc_lock>
 8005206:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800520a:	4d54      	ldr	r5, [pc, #336]	; (800535c <_free_r+0x168>)
 800520c:	f022 0001 	bic.w	r0, r2, #1
 8005210:	f1a8 0308 	sub.w	r3, r8, #8
 8005214:	181f      	adds	r7, r3, r0
 8005216:	68a9      	ldr	r1, [r5, #8]
 8005218:	687e      	ldr	r6, [r7, #4]
 800521a:	428f      	cmp	r7, r1
 800521c:	f026 0603 	bic.w	r6, r6, #3
 8005220:	f002 0201 	and.w	r2, r2, #1
 8005224:	d11b      	bne.n	800525e <_free_r+0x6a>
 8005226:	4430      	add	r0, r6
 8005228:	b93a      	cbnz	r2, 800523a <_free_r+0x46>
 800522a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	4410      	add	r0, r2
 8005232:	6899      	ldr	r1, [r3, #8]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	60ca      	str	r2, [r1, #12]
 8005238:	6091      	str	r1, [r2, #8]
 800523a:	f040 0201 	orr.w	r2, r0, #1
 800523e:	605a      	str	r2, [r3, #4]
 8005240:	60ab      	str	r3, [r5, #8]
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <_free_r+0x16c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4298      	cmp	r0, r3
 8005248:	d304      	bcc.n	8005254 <_free_r+0x60>
 800524a:	4b46      	ldr	r3, [pc, #280]	; (8005364 <_free_r+0x170>)
 800524c:	4620      	mov	r0, r4
 800524e:	6819      	ldr	r1, [r3, #0]
 8005250:	f7ff ff7a 	bl	8005148 <_malloc_trim_r>
 8005254:	4620      	mov	r0, r4
 8005256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525a:	f000 bb4b 	b.w	80058f4 <__malloc_unlock>
 800525e:	607e      	str	r6, [r7, #4]
 8005260:	2a00      	cmp	r2, #0
 8005262:	d139      	bne.n	80052d8 <_free_r+0xe4>
 8005264:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005268:	1a5b      	subs	r3, r3, r1
 800526a:	4408      	add	r0, r1
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	f105 0e08 	add.w	lr, r5, #8
 8005272:	4571      	cmp	r1, lr
 8005274:	d032      	beq.n	80052dc <_free_r+0xe8>
 8005276:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800527a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800527e:	f8ce 1008 	str.w	r1, [lr, #8]
 8005282:	19b9      	adds	r1, r7, r6
 8005284:	6849      	ldr	r1, [r1, #4]
 8005286:	07c9      	lsls	r1, r1, #31
 8005288:	d40a      	bmi.n	80052a0 <_free_r+0xac>
 800528a:	4430      	add	r0, r6
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	bb3a      	cbnz	r2, 80052e0 <_free_r+0xec>
 8005290:	4e35      	ldr	r6, [pc, #212]	; (8005368 <_free_r+0x174>)
 8005292:	42b1      	cmp	r1, r6
 8005294:	d124      	bne.n	80052e0 <_free_r+0xec>
 8005296:	616b      	str	r3, [r5, #20]
 8005298:	612b      	str	r3, [r5, #16]
 800529a:	2201      	movs	r2, #1
 800529c:	60d9      	str	r1, [r3, #12]
 800529e:	6099      	str	r1, [r3, #8]
 80052a0:	f040 0101 	orr.w	r1, r0, #1
 80052a4:	6059      	str	r1, [r3, #4]
 80052a6:	5018      	str	r0, [r3, r0]
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d1d3      	bne.n	8005254 <_free_r+0x60>
 80052ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80052b0:	d21a      	bcs.n	80052e8 <_free_r+0xf4>
 80052b2:	08c0      	lsrs	r0, r0, #3
 80052b4:	1081      	asrs	r1, r0, #2
 80052b6:	2201      	movs	r2, #1
 80052b8:	408a      	lsls	r2, r1
 80052ba:	6869      	ldr	r1, [r5, #4]
 80052bc:	3001      	adds	r0, #1
 80052be:	430a      	orrs	r2, r1
 80052c0:	606a      	str	r2, [r5, #4]
 80052c2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80052c6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80052ca:	6099      	str	r1, [r3, #8]
 80052cc:	3a08      	subs	r2, #8
 80052ce:	60da      	str	r2, [r3, #12]
 80052d0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80052d4:	60cb      	str	r3, [r1, #12]
 80052d6:	e7bd      	b.n	8005254 <_free_r+0x60>
 80052d8:	2200      	movs	r2, #0
 80052da:	e7d2      	b.n	8005282 <_free_r+0x8e>
 80052dc:	2201      	movs	r2, #1
 80052de:	e7d0      	b.n	8005282 <_free_r+0x8e>
 80052e0:	68fe      	ldr	r6, [r7, #12]
 80052e2:	60ce      	str	r6, [r1, #12]
 80052e4:	60b1      	str	r1, [r6, #8]
 80052e6:	e7db      	b.n	80052a0 <_free_r+0xac>
 80052e8:	0a42      	lsrs	r2, r0, #9
 80052ea:	2a04      	cmp	r2, #4
 80052ec:	d813      	bhi.n	8005316 <_free_r+0x122>
 80052ee:	0982      	lsrs	r2, r0, #6
 80052f0:	3238      	adds	r2, #56	; 0x38
 80052f2:	1c51      	adds	r1, r2, #1
 80052f4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80052f8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80052fc:	428e      	cmp	r6, r1
 80052fe:	d124      	bne.n	800534a <_free_r+0x156>
 8005300:	2001      	movs	r0, #1
 8005302:	1092      	asrs	r2, r2, #2
 8005304:	fa00 f202 	lsl.w	r2, r0, r2
 8005308:	6868      	ldr	r0, [r5, #4]
 800530a:	4302      	orrs	r2, r0
 800530c:	606a      	str	r2, [r5, #4]
 800530e:	60de      	str	r6, [r3, #12]
 8005310:	6099      	str	r1, [r3, #8]
 8005312:	60b3      	str	r3, [r6, #8]
 8005314:	e7de      	b.n	80052d4 <_free_r+0xe0>
 8005316:	2a14      	cmp	r2, #20
 8005318:	d801      	bhi.n	800531e <_free_r+0x12a>
 800531a:	325b      	adds	r2, #91	; 0x5b
 800531c:	e7e9      	b.n	80052f2 <_free_r+0xfe>
 800531e:	2a54      	cmp	r2, #84	; 0x54
 8005320:	d802      	bhi.n	8005328 <_free_r+0x134>
 8005322:	0b02      	lsrs	r2, r0, #12
 8005324:	326e      	adds	r2, #110	; 0x6e
 8005326:	e7e4      	b.n	80052f2 <_free_r+0xfe>
 8005328:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800532c:	d802      	bhi.n	8005334 <_free_r+0x140>
 800532e:	0bc2      	lsrs	r2, r0, #15
 8005330:	3277      	adds	r2, #119	; 0x77
 8005332:	e7de      	b.n	80052f2 <_free_r+0xfe>
 8005334:	f240 5154 	movw	r1, #1364	; 0x554
 8005338:	428a      	cmp	r2, r1
 800533a:	bf9a      	itte	ls
 800533c:	0c82      	lsrls	r2, r0, #18
 800533e:	327c      	addls	r2, #124	; 0x7c
 8005340:	227e      	movhi	r2, #126	; 0x7e
 8005342:	e7d6      	b.n	80052f2 <_free_r+0xfe>
 8005344:	6889      	ldr	r1, [r1, #8]
 8005346:	428e      	cmp	r6, r1
 8005348:	d004      	beq.n	8005354 <_free_r+0x160>
 800534a:	684a      	ldr	r2, [r1, #4]
 800534c:	f022 0203 	bic.w	r2, r2, #3
 8005350:	4290      	cmp	r0, r2
 8005352:	d3f7      	bcc.n	8005344 <_free_r+0x150>
 8005354:	68ce      	ldr	r6, [r1, #12]
 8005356:	e7da      	b.n	800530e <_free_r+0x11a>
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800535c:	20000100 	.word	0x20000100
 8005360:	2000050c 	.word	0x2000050c
 8005364:	200006cc 	.word	0x200006cc
 8005368:	20000108 	.word	0x20000108

0800536c <_fwalk_reent>:
 800536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005370:	4680      	mov	r8, r0
 8005372:	4689      	mov	r9, r1
 8005374:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005378:	2600      	movs	r6, #0
 800537a:	b914      	cbnz	r4, 8005382 <_fwalk_reent+0x16>
 800537c:	4630      	mov	r0, r6
 800537e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005382:	68a5      	ldr	r5, [r4, #8]
 8005384:	6867      	ldr	r7, [r4, #4]
 8005386:	3f01      	subs	r7, #1
 8005388:	d501      	bpl.n	800538e <_fwalk_reent+0x22>
 800538a:	6824      	ldr	r4, [r4, #0]
 800538c:	e7f5      	b.n	800537a <_fwalk_reent+0xe>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d907      	bls.n	80053a4 <_fwalk_reent+0x38>
 8005394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005398:	3301      	adds	r3, #1
 800539a:	d003      	beq.n	80053a4 <_fwalk_reent+0x38>
 800539c:	4629      	mov	r1, r5
 800539e:	4640      	mov	r0, r8
 80053a0:	47c8      	blx	r9
 80053a2:	4306      	orrs	r6, r0
 80053a4:	3568      	adds	r5, #104	; 0x68
 80053a6:	e7ee      	b.n	8005386 <_fwalk_reent+0x1a>

080053a8 <_localeconv_r>:
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <_localeconv_r+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a18      	ldr	r0, [r3, #32]
 80053ae:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <_localeconv_r+0x18>)
 80053b0:	2800      	cmp	r0, #0
 80053b2:	bf08      	it	eq
 80053b4:	4618      	moveq	r0, r3
 80053b6:	30f0      	adds	r0, #240	; 0xf0
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000000c 	.word	0x2000000c
 80053c0:	20000510 	.word	0x20000510

080053c4 <__retarget_lock_init_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_close_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <__retarget_lock_acquire_recursive>:
 80053c8:	4770      	bx	lr

080053ca <__retarget_lock_release_recursive>:
 80053ca:	4770      	bx	lr

080053cc <__swhatbuf_r>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	460e      	mov	r6, r1
 80053d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d4:	2900      	cmp	r1, #0
 80053d6:	b090      	sub	sp, #64	; 0x40
 80053d8:	4614      	mov	r4, r2
 80053da:	461d      	mov	r5, r3
 80053dc:	da09      	bge.n	80053f2 <__swhatbuf_r+0x26>
 80053de:	89b3      	ldrh	r3, [r6, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80053e6:	602a      	str	r2, [r5, #0]
 80053e8:	d116      	bne.n	8005418 <__swhatbuf_r+0x4c>
 80053ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ee:	6023      	str	r3, [r4, #0]
 80053f0:	e015      	b.n	800541e <__swhatbuf_r+0x52>
 80053f2:	aa01      	add	r2, sp, #4
 80053f4:	f000 ff02 	bl	80061fc <_fstat_r>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	dbf0      	blt.n	80053de <__swhatbuf_r+0x12>
 80053fc:	9a02      	ldr	r2, [sp, #8]
 80053fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005406:	425a      	negs	r2, r3
 8005408:	415a      	adcs	r2, r3
 800540a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	e002      	b.n	800541e <__swhatbuf_r+0x52>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	4610      	mov	r0, r2
 800541e:	b010      	add	sp, #64	; 0x40
 8005420:	bd70      	pop	{r4, r5, r6, pc}
	...

08005424 <__smakebuf_r>:
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005428:	079d      	lsls	r5, r3, #30
 800542a:	4606      	mov	r6, r0
 800542c:	460c      	mov	r4, r1
 800542e:	d507      	bpl.n	8005440 <__smakebuf_r+0x1c>
 8005430:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	2301      	movs	r3, #1
 800543a:	6163      	str	r3, [r4, #20]
 800543c:	b002      	add	sp, #8
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	ab01      	add	r3, sp, #4
 8005442:	466a      	mov	r2, sp
 8005444:	f7ff ffc2 	bl	80053cc <__swhatbuf_r>
 8005448:	9900      	ldr	r1, [sp, #0]
 800544a:	4605      	mov	r5, r0
 800544c:	4630      	mov	r0, r6
 800544e:	f000 f831 	bl	80054b4 <_malloc_r>
 8005452:	b948      	cbnz	r0, 8005468 <__smakebuf_r+0x44>
 8005454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005458:	059a      	lsls	r2, r3, #22
 800545a:	d4ef      	bmi.n	800543c <__smakebuf_r+0x18>
 800545c:	f023 0303 	bic.w	r3, r3, #3
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	81a3      	strh	r3, [r4, #12]
 8005466:	e7e3      	b.n	8005430 <__smakebuf_r+0xc>
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <__smakebuf_r+0x7c>)
 800546a:	62b3      	str	r3, [r6, #40]	; 0x28
 800546c:	89a3      	ldrh	r3, [r4, #12]
 800546e:	6020      	str	r0, [r4, #0]
 8005470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005474:	81a3      	strh	r3, [r4, #12]
 8005476:	9b00      	ldr	r3, [sp, #0]
 8005478:	6163      	str	r3, [r4, #20]
 800547a:	9b01      	ldr	r3, [sp, #4]
 800547c:	6120      	str	r0, [r4, #16]
 800547e:	b15b      	cbz	r3, 8005498 <__smakebuf_r+0x74>
 8005480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005484:	4630      	mov	r0, r6
 8005486:	f001 f819 	bl	80064bc <_isatty_r>
 800548a:	b128      	cbz	r0, 8005498 <__smakebuf_r+0x74>
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	f023 0303 	bic.w	r3, r3, #3
 8005492:	f043 0301 	orr.w	r3, r3, #1
 8005496:	81a3      	strh	r3, [r4, #12]
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	431d      	orrs	r5, r3
 800549c:	81a5      	strh	r5, [r4, #12]
 800549e:	e7cd      	b.n	800543c <__smakebuf_r+0x18>
 80054a0:	08004f99 	.word	0x08004f99

080054a4 <malloc>:
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <malloc+0xc>)
 80054a6:	4601      	mov	r1, r0
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f000 b803 	b.w	80054b4 <_malloc_r>
 80054ae:	bf00      	nop
 80054b0:	2000000c 	.word	0x2000000c

080054b4 <_malloc_r>:
 80054b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	f101 040b 	add.w	r4, r1, #11
 80054bc:	2c16      	cmp	r4, #22
 80054be:	4681      	mov	r9, r0
 80054c0:	d907      	bls.n	80054d2 <_malloc_r+0x1e>
 80054c2:	f034 0407 	bics.w	r4, r4, #7
 80054c6:	d505      	bpl.n	80054d4 <_malloc_r+0x20>
 80054c8:	230c      	movs	r3, #12
 80054ca:	f8c9 3000 	str.w	r3, [r9]
 80054ce:	2600      	movs	r6, #0
 80054d0:	e131      	b.n	8005736 <_malloc_r+0x282>
 80054d2:	2410      	movs	r4, #16
 80054d4:	428c      	cmp	r4, r1
 80054d6:	d3f7      	bcc.n	80054c8 <_malloc_r+0x14>
 80054d8:	4648      	mov	r0, r9
 80054da:	f000 fa05 	bl	80058e8 <__malloc_lock>
 80054de:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80054e2:	4d9c      	ldr	r5, [pc, #624]	; (8005754 <_malloc_r+0x2a0>)
 80054e4:	d236      	bcs.n	8005554 <_malloc_r+0xa0>
 80054e6:	f104 0208 	add.w	r2, r4, #8
 80054ea:	442a      	add	r2, r5
 80054ec:	f1a2 0108 	sub.w	r1, r2, #8
 80054f0:	6856      	ldr	r6, [r2, #4]
 80054f2:	428e      	cmp	r6, r1
 80054f4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80054f8:	d102      	bne.n	8005500 <_malloc_r+0x4c>
 80054fa:	68d6      	ldr	r6, [r2, #12]
 80054fc:	42b2      	cmp	r2, r6
 80054fe:	d010      	beq.n	8005522 <_malloc_r+0x6e>
 8005500:	6873      	ldr	r3, [r6, #4]
 8005502:	68f2      	ldr	r2, [r6, #12]
 8005504:	68b1      	ldr	r1, [r6, #8]
 8005506:	f023 0303 	bic.w	r3, r3, #3
 800550a:	60ca      	str	r2, [r1, #12]
 800550c:	4433      	add	r3, r6
 800550e:	6091      	str	r1, [r2, #8]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	4648      	mov	r0, r9
 800551a:	f000 f9eb 	bl	80058f4 <__malloc_unlock>
 800551e:	3608      	adds	r6, #8
 8005520:	e109      	b.n	8005736 <_malloc_r+0x282>
 8005522:	3302      	adds	r3, #2
 8005524:	4a8c      	ldr	r2, [pc, #560]	; (8005758 <_malloc_r+0x2a4>)
 8005526:	692e      	ldr	r6, [r5, #16]
 8005528:	4296      	cmp	r6, r2
 800552a:	4611      	mov	r1, r2
 800552c:	d06d      	beq.n	800560a <_malloc_r+0x156>
 800552e:	6870      	ldr	r0, [r6, #4]
 8005530:	f020 0003 	bic.w	r0, r0, #3
 8005534:	1b07      	subs	r7, r0, r4
 8005536:	2f0f      	cmp	r7, #15
 8005538:	dd47      	ble.n	80055ca <_malloc_r+0x116>
 800553a:	1933      	adds	r3, r6, r4
 800553c:	f044 0401 	orr.w	r4, r4, #1
 8005540:	6074      	str	r4, [r6, #4]
 8005542:	616b      	str	r3, [r5, #20]
 8005544:	612b      	str	r3, [r5, #16]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	609a      	str	r2, [r3, #8]
 800554a:	f047 0201 	orr.w	r2, r7, #1
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	5037      	str	r7, [r6, r0]
 8005552:	e7e1      	b.n	8005518 <_malloc_r+0x64>
 8005554:	0a63      	lsrs	r3, r4, #9
 8005556:	d02a      	beq.n	80055ae <_malloc_r+0xfa>
 8005558:	2b04      	cmp	r3, #4
 800555a:	d812      	bhi.n	8005582 <_malloc_r+0xce>
 800555c:	09a3      	lsrs	r3, r4, #6
 800555e:	3338      	adds	r3, #56	; 0x38
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005566:	f1a2 0008 	sub.w	r0, r2, #8
 800556a:	6856      	ldr	r6, [r2, #4]
 800556c:	4286      	cmp	r6, r0
 800556e:	d006      	beq.n	800557e <_malloc_r+0xca>
 8005570:	6872      	ldr	r2, [r6, #4]
 8005572:	f022 0203 	bic.w	r2, r2, #3
 8005576:	1b11      	subs	r1, r2, r4
 8005578:	290f      	cmp	r1, #15
 800557a:	dd1c      	ble.n	80055b6 <_malloc_r+0x102>
 800557c:	3b01      	subs	r3, #1
 800557e:	3301      	adds	r3, #1
 8005580:	e7d0      	b.n	8005524 <_malloc_r+0x70>
 8005582:	2b14      	cmp	r3, #20
 8005584:	d801      	bhi.n	800558a <_malloc_r+0xd6>
 8005586:	335b      	adds	r3, #91	; 0x5b
 8005588:	e7ea      	b.n	8005560 <_malloc_r+0xac>
 800558a:	2b54      	cmp	r3, #84	; 0x54
 800558c:	d802      	bhi.n	8005594 <_malloc_r+0xe0>
 800558e:	0b23      	lsrs	r3, r4, #12
 8005590:	336e      	adds	r3, #110	; 0x6e
 8005592:	e7e5      	b.n	8005560 <_malloc_r+0xac>
 8005594:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005598:	d802      	bhi.n	80055a0 <_malloc_r+0xec>
 800559a:	0be3      	lsrs	r3, r4, #15
 800559c:	3377      	adds	r3, #119	; 0x77
 800559e:	e7df      	b.n	8005560 <_malloc_r+0xac>
 80055a0:	f240 5254 	movw	r2, #1364	; 0x554
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d804      	bhi.n	80055b2 <_malloc_r+0xfe>
 80055a8:	0ca3      	lsrs	r3, r4, #18
 80055aa:	337c      	adds	r3, #124	; 0x7c
 80055ac:	e7d8      	b.n	8005560 <_malloc_r+0xac>
 80055ae:	233f      	movs	r3, #63	; 0x3f
 80055b0:	e7d6      	b.n	8005560 <_malloc_r+0xac>
 80055b2:	237e      	movs	r3, #126	; 0x7e
 80055b4:	e7d4      	b.n	8005560 <_malloc_r+0xac>
 80055b6:	2900      	cmp	r1, #0
 80055b8:	68f1      	ldr	r1, [r6, #12]
 80055ba:	db04      	blt.n	80055c6 <_malloc_r+0x112>
 80055bc:	68b3      	ldr	r3, [r6, #8]
 80055be:	60d9      	str	r1, [r3, #12]
 80055c0:	608b      	str	r3, [r1, #8]
 80055c2:	18b3      	adds	r3, r6, r2
 80055c4:	e7a4      	b.n	8005510 <_malloc_r+0x5c>
 80055c6:	460e      	mov	r6, r1
 80055c8:	e7d0      	b.n	800556c <_malloc_r+0xb8>
 80055ca:	2f00      	cmp	r7, #0
 80055cc:	616a      	str	r2, [r5, #20]
 80055ce:	612a      	str	r2, [r5, #16]
 80055d0:	db05      	blt.n	80055de <_malloc_r+0x12a>
 80055d2:	4430      	add	r0, r6
 80055d4:	6843      	ldr	r3, [r0, #4]
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	6043      	str	r3, [r0, #4]
 80055dc:	e79c      	b.n	8005518 <_malloc_r+0x64>
 80055de:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80055e2:	d244      	bcs.n	800566e <_malloc_r+0x1ba>
 80055e4:	08c0      	lsrs	r0, r0, #3
 80055e6:	1087      	asrs	r7, r0, #2
 80055e8:	2201      	movs	r2, #1
 80055ea:	fa02 f707 	lsl.w	r7, r2, r7
 80055ee:	686a      	ldr	r2, [r5, #4]
 80055f0:	3001      	adds	r0, #1
 80055f2:	433a      	orrs	r2, r7
 80055f4:	606a      	str	r2, [r5, #4]
 80055f6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80055fa:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80055fe:	60b7      	str	r7, [r6, #8]
 8005600:	3a08      	subs	r2, #8
 8005602:	60f2      	str	r2, [r6, #12]
 8005604:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005608:	60fe      	str	r6, [r7, #12]
 800560a:	2001      	movs	r0, #1
 800560c:	109a      	asrs	r2, r3, #2
 800560e:	fa00 f202 	lsl.w	r2, r0, r2
 8005612:	6868      	ldr	r0, [r5, #4]
 8005614:	4282      	cmp	r2, r0
 8005616:	f200 80a1 	bhi.w	800575c <_malloc_r+0x2a8>
 800561a:	4202      	tst	r2, r0
 800561c:	d106      	bne.n	800562c <_malloc_r+0x178>
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	0052      	lsls	r2, r2, #1
 8005624:	4202      	tst	r2, r0
 8005626:	f103 0304 	add.w	r3, r3, #4
 800562a:	d0fa      	beq.n	8005622 <_malloc_r+0x16e>
 800562c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005630:	46e0      	mov	r8, ip
 8005632:	469e      	mov	lr, r3
 8005634:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005638:	4546      	cmp	r6, r8
 800563a:	d153      	bne.n	80056e4 <_malloc_r+0x230>
 800563c:	f10e 0e01 	add.w	lr, lr, #1
 8005640:	f01e 0f03 	tst.w	lr, #3
 8005644:	f108 0808 	add.w	r8, r8, #8
 8005648:	d1f4      	bne.n	8005634 <_malloc_r+0x180>
 800564a:	0798      	lsls	r0, r3, #30
 800564c:	d179      	bne.n	8005742 <_malloc_r+0x28e>
 800564e:	686b      	ldr	r3, [r5, #4]
 8005650:	ea23 0302 	bic.w	r3, r3, r2
 8005654:	606b      	str	r3, [r5, #4]
 8005656:	6868      	ldr	r0, [r5, #4]
 8005658:	0052      	lsls	r2, r2, #1
 800565a:	4282      	cmp	r2, r0
 800565c:	d87e      	bhi.n	800575c <_malloc_r+0x2a8>
 800565e:	2a00      	cmp	r2, #0
 8005660:	d07c      	beq.n	800575c <_malloc_r+0x2a8>
 8005662:	4673      	mov	r3, lr
 8005664:	4202      	tst	r2, r0
 8005666:	d1e1      	bne.n	800562c <_malloc_r+0x178>
 8005668:	3304      	adds	r3, #4
 800566a:	0052      	lsls	r2, r2, #1
 800566c:	e7fa      	b.n	8005664 <_malloc_r+0x1b0>
 800566e:	0a42      	lsrs	r2, r0, #9
 8005670:	2a04      	cmp	r2, #4
 8005672:	d815      	bhi.n	80056a0 <_malloc_r+0x1ec>
 8005674:	0982      	lsrs	r2, r0, #6
 8005676:	3238      	adds	r2, #56	; 0x38
 8005678:	1c57      	adds	r7, r2, #1
 800567a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800567e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005682:	45be      	cmp	lr, r7
 8005684:	d126      	bne.n	80056d4 <_malloc_r+0x220>
 8005686:	2001      	movs	r0, #1
 8005688:	1092      	asrs	r2, r2, #2
 800568a:	fa00 f202 	lsl.w	r2, r0, r2
 800568e:	6868      	ldr	r0, [r5, #4]
 8005690:	4310      	orrs	r0, r2
 8005692:	6068      	str	r0, [r5, #4]
 8005694:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005698:	60b7      	str	r7, [r6, #8]
 800569a:	f8ce 6008 	str.w	r6, [lr, #8]
 800569e:	e7b3      	b.n	8005608 <_malloc_r+0x154>
 80056a0:	2a14      	cmp	r2, #20
 80056a2:	d801      	bhi.n	80056a8 <_malloc_r+0x1f4>
 80056a4:	325b      	adds	r2, #91	; 0x5b
 80056a6:	e7e7      	b.n	8005678 <_malloc_r+0x1c4>
 80056a8:	2a54      	cmp	r2, #84	; 0x54
 80056aa:	d802      	bhi.n	80056b2 <_malloc_r+0x1fe>
 80056ac:	0b02      	lsrs	r2, r0, #12
 80056ae:	326e      	adds	r2, #110	; 0x6e
 80056b0:	e7e2      	b.n	8005678 <_malloc_r+0x1c4>
 80056b2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056b6:	d802      	bhi.n	80056be <_malloc_r+0x20a>
 80056b8:	0bc2      	lsrs	r2, r0, #15
 80056ba:	3277      	adds	r2, #119	; 0x77
 80056bc:	e7dc      	b.n	8005678 <_malloc_r+0x1c4>
 80056be:	f240 5754 	movw	r7, #1364	; 0x554
 80056c2:	42ba      	cmp	r2, r7
 80056c4:	bf9a      	itte	ls
 80056c6:	0c82      	lsrls	r2, r0, #18
 80056c8:	327c      	addls	r2, #124	; 0x7c
 80056ca:	227e      	movhi	r2, #126	; 0x7e
 80056cc:	e7d4      	b.n	8005678 <_malloc_r+0x1c4>
 80056ce:	68bf      	ldr	r7, [r7, #8]
 80056d0:	45be      	cmp	lr, r7
 80056d2:	d004      	beq.n	80056de <_malloc_r+0x22a>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	f022 0203 	bic.w	r2, r2, #3
 80056da:	4290      	cmp	r0, r2
 80056dc:	d3f7      	bcc.n	80056ce <_malloc_r+0x21a>
 80056de:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80056e2:	e7d7      	b.n	8005694 <_malloc_r+0x1e0>
 80056e4:	6870      	ldr	r0, [r6, #4]
 80056e6:	68f7      	ldr	r7, [r6, #12]
 80056e8:	f020 0003 	bic.w	r0, r0, #3
 80056ec:	eba0 0a04 	sub.w	sl, r0, r4
 80056f0:	f1ba 0f0f 	cmp.w	sl, #15
 80056f4:	dd10      	ble.n	8005718 <_malloc_r+0x264>
 80056f6:	68b2      	ldr	r2, [r6, #8]
 80056f8:	1933      	adds	r3, r6, r4
 80056fa:	f044 0401 	orr.w	r4, r4, #1
 80056fe:	6074      	str	r4, [r6, #4]
 8005700:	60d7      	str	r7, [r2, #12]
 8005702:	60ba      	str	r2, [r7, #8]
 8005704:	f04a 0201 	orr.w	r2, sl, #1
 8005708:	616b      	str	r3, [r5, #20]
 800570a:	612b      	str	r3, [r5, #16]
 800570c:	60d9      	str	r1, [r3, #12]
 800570e:	6099      	str	r1, [r3, #8]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	f846 a000 	str.w	sl, [r6, r0]
 8005716:	e6ff      	b.n	8005518 <_malloc_r+0x64>
 8005718:	f1ba 0f00 	cmp.w	sl, #0
 800571c:	db0f      	blt.n	800573e <_malloc_r+0x28a>
 800571e:	4430      	add	r0, r6
 8005720:	6843      	ldr	r3, [r0, #4]
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6043      	str	r3, [r0, #4]
 8005728:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800572c:	4648      	mov	r0, r9
 800572e:	60df      	str	r7, [r3, #12]
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	f000 f8df 	bl	80058f4 <__malloc_unlock>
 8005736:	4630      	mov	r0, r6
 8005738:	b003      	add	sp, #12
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	463e      	mov	r6, r7
 8005740:	e77a      	b.n	8005638 <_malloc_r+0x184>
 8005742:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005746:	4584      	cmp	ip, r0
 8005748:	f103 33ff 	add.w	r3, r3, #4294967295
 800574c:	f43f af7d 	beq.w	800564a <_malloc_r+0x196>
 8005750:	e781      	b.n	8005656 <_malloc_r+0x1a2>
 8005752:	bf00      	nop
 8005754:	20000100 	.word	0x20000100
 8005758:	20000108 	.word	0x20000108
 800575c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005760:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005764:	f026 0603 	bic.w	r6, r6, #3
 8005768:	42b4      	cmp	r4, r6
 800576a:	d803      	bhi.n	8005774 <_malloc_r+0x2c0>
 800576c:	1b33      	subs	r3, r6, r4
 800576e:	2b0f      	cmp	r3, #15
 8005770:	f300 8096 	bgt.w	80058a0 <_malloc_r+0x3ec>
 8005774:	4a4f      	ldr	r2, [pc, #316]	; (80058b4 <_malloc_r+0x400>)
 8005776:	6817      	ldr	r7, [r2, #0]
 8005778:	4a4f      	ldr	r2, [pc, #316]	; (80058b8 <_malloc_r+0x404>)
 800577a:	6811      	ldr	r1, [r2, #0]
 800577c:	3710      	adds	r7, #16
 800577e:	3101      	adds	r1, #1
 8005780:	eb0b 0306 	add.w	r3, fp, r6
 8005784:	4427      	add	r7, r4
 8005786:	d005      	beq.n	8005794 <_malloc_r+0x2e0>
 8005788:	494c      	ldr	r1, [pc, #304]	; (80058bc <_malloc_r+0x408>)
 800578a:	3901      	subs	r1, #1
 800578c:	440f      	add	r7, r1
 800578e:	3101      	adds	r1, #1
 8005790:	4249      	negs	r1, r1
 8005792:	400f      	ands	r7, r1
 8005794:	4639      	mov	r1, r7
 8005796:	4648      	mov	r0, r9
 8005798:	9201      	str	r2, [sp, #4]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	f000 fb80 	bl	8005ea0 <_sbrk_r>
 80057a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057a4:	4680      	mov	r8, r0
 80057a6:	d056      	beq.n	8005856 <_malloc_r+0x3a2>
 80057a8:	9b00      	ldr	r3, [sp, #0]
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	4283      	cmp	r3, r0
 80057ae:	d901      	bls.n	80057b4 <_malloc_r+0x300>
 80057b0:	45ab      	cmp	fp, r5
 80057b2:	d150      	bne.n	8005856 <_malloc_r+0x3a2>
 80057b4:	4842      	ldr	r0, [pc, #264]	; (80058c0 <_malloc_r+0x40c>)
 80057b6:	6801      	ldr	r1, [r0, #0]
 80057b8:	4543      	cmp	r3, r8
 80057ba:	eb07 0e01 	add.w	lr, r7, r1
 80057be:	f8c0 e000 	str.w	lr, [r0]
 80057c2:	4940      	ldr	r1, [pc, #256]	; (80058c4 <_malloc_r+0x410>)
 80057c4:	4682      	mov	sl, r0
 80057c6:	d113      	bne.n	80057f0 <_malloc_r+0x33c>
 80057c8:	420b      	tst	r3, r1
 80057ca:	d111      	bne.n	80057f0 <_malloc_r+0x33c>
 80057cc:	68ab      	ldr	r3, [r5, #8]
 80057ce:	443e      	add	r6, r7
 80057d0:	f046 0601 	orr.w	r6, r6, #1
 80057d4:	605e      	str	r6, [r3, #4]
 80057d6:	4a3c      	ldr	r2, [pc, #240]	; (80058c8 <_malloc_r+0x414>)
 80057d8:	f8da 3000 	ldr.w	r3, [sl]
 80057dc:	6811      	ldr	r1, [r2, #0]
 80057de:	428b      	cmp	r3, r1
 80057e0:	bf88      	it	hi
 80057e2:	6013      	strhi	r3, [r2, #0]
 80057e4:	4a39      	ldr	r2, [pc, #228]	; (80058cc <_malloc_r+0x418>)
 80057e6:	6811      	ldr	r1, [r2, #0]
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf88      	it	hi
 80057ec:	6013      	strhi	r3, [r2, #0]
 80057ee:	e032      	b.n	8005856 <_malloc_r+0x3a2>
 80057f0:	6810      	ldr	r0, [r2, #0]
 80057f2:	3001      	adds	r0, #1
 80057f4:	bf1b      	ittet	ne
 80057f6:	eba8 0303 	subne.w	r3, r8, r3
 80057fa:	4473      	addne	r3, lr
 80057fc:	f8c2 8000 	streq.w	r8, [r2]
 8005800:	f8ca 3000 	strne.w	r3, [sl]
 8005804:	f018 0007 	ands.w	r0, r8, #7
 8005808:	bf1c      	itt	ne
 800580a:	f1c0 0008 	rsbne	r0, r0, #8
 800580e:	4480      	addne	r8, r0
 8005810:	4b2a      	ldr	r3, [pc, #168]	; (80058bc <_malloc_r+0x408>)
 8005812:	4447      	add	r7, r8
 8005814:	4418      	add	r0, r3
 8005816:	400f      	ands	r7, r1
 8005818:	1bc7      	subs	r7, r0, r7
 800581a:	4639      	mov	r1, r7
 800581c:	4648      	mov	r0, r9
 800581e:	f000 fb3f 	bl	8005ea0 <_sbrk_r>
 8005822:	1c43      	adds	r3, r0, #1
 8005824:	bf08      	it	eq
 8005826:	4640      	moveq	r0, r8
 8005828:	f8da 3000 	ldr.w	r3, [sl]
 800582c:	f8c5 8008 	str.w	r8, [r5, #8]
 8005830:	bf08      	it	eq
 8005832:	2700      	moveq	r7, #0
 8005834:	eba0 0008 	sub.w	r0, r0, r8
 8005838:	443b      	add	r3, r7
 800583a:	4407      	add	r7, r0
 800583c:	f047 0701 	orr.w	r7, r7, #1
 8005840:	45ab      	cmp	fp, r5
 8005842:	f8ca 3000 	str.w	r3, [sl]
 8005846:	f8c8 7004 	str.w	r7, [r8, #4]
 800584a:	d0c4      	beq.n	80057d6 <_malloc_r+0x322>
 800584c:	2e0f      	cmp	r6, #15
 800584e:	d810      	bhi.n	8005872 <_malloc_r+0x3be>
 8005850:	2301      	movs	r3, #1
 8005852:	f8c8 3004 	str.w	r3, [r8, #4]
 8005856:	68ab      	ldr	r3, [r5, #8]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	f022 0203 	bic.w	r2, r2, #3
 800585e:	4294      	cmp	r4, r2
 8005860:	eba2 0304 	sub.w	r3, r2, r4
 8005864:	d801      	bhi.n	800586a <_malloc_r+0x3b6>
 8005866:	2b0f      	cmp	r3, #15
 8005868:	dc1a      	bgt.n	80058a0 <_malloc_r+0x3ec>
 800586a:	4648      	mov	r0, r9
 800586c:	f000 f842 	bl	80058f4 <__malloc_unlock>
 8005870:	e62d      	b.n	80054ce <_malloc_r+0x1a>
 8005872:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005876:	3e0c      	subs	r6, #12
 8005878:	f026 0607 	bic.w	r6, r6, #7
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	4333      	orrs	r3, r6
 8005882:	f8cb 3004 	str.w	r3, [fp, #4]
 8005886:	eb0b 0306 	add.w	r3, fp, r6
 800588a:	2205      	movs	r2, #5
 800588c:	2e0f      	cmp	r6, #15
 800588e:	605a      	str	r2, [r3, #4]
 8005890:	609a      	str	r2, [r3, #8]
 8005892:	d9a0      	bls.n	80057d6 <_malloc_r+0x322>
 8005894:	f10b 0108 	add.w	r1, fp, #8
 8005898:	4648      	mov	r0, r9
 800589a:	f7ff fcab 	bl	80051f4 <_free_r>
 800589e:	e79a      	b.n	80057d6 <_malloc_r+0x322>
 80058a0:	68ae      	ldr	r6, [r5, #8]
 80058a2:	f044 0201 	orr.w	r2, r4, #1
 80058a6:	4434      	add	r4, r6
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	6072      	str	r2, [r6, #4]
 80058ae:	60ac      	str	r4, [r5, #8]
 80058b0:	6063      	str	r3, [r4, #4]
 80058b2:	e631      	b.n	8005518 <_malloc_r+0x64>
 80058b4:	200006cc 	.word	0x200006cc
 80058b8:	20000508 	.word	0x20000508
 80058bc:	00000080 	.word	0x00000080
 80058c0:	2000069c 	.word	0x2000069c
 80058c4:	0000007f 	.word	0x0000007f
 80058c8:	200006c4 	.word	0x200006c4
 80058cc:	200006c8 	.word	0x200006c8

080058d0 <memcpy>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	1e43      	subs	r3, r0, #1
 80058d4:	440a      	add	r2, r1
 80058d6:	4291      	cmp	r1, r2
 80058d8:	d100      	bne.n	80058dc <memcpy+0xc>
 80058da:	bd10      	pop	{r4, pc}
 80058dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e4:	e7f7      	b.n	80058d6 <memcpy+0x6>
	...

080058e8 <__malloc_lock>:
 80058e8:	4801      	ldr	r0, [pc, #4]	; (80058f0 <__malloc_lock+0x8>)
 80058ea:	f7ff bd6d 	b.w	80053c8 <__retarget_lock_acquire_recursive>
 80058ee:	bf00      	nop
 80058f0:	20000744 	.word	0x20000744

080058f4 <__malloc_unlock>:
 80058f4:	4801      	ldr	r0, [pc, #4]	; (80058fc <__malloc_unlock+0x8>)
 80058f6:	f7ff bd68 	b.w	80053ca <__retarget_lock_release_recursive>
 80058fa:	bf00      	nop
 80058fc:	20000744 	.word	0x20000744

08005900 <_Balloc>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005904:	4604      	mov	r4, r0
 8005906:	460e      	mov	r6, r1
 8005908:	b93d      	cbnz	r5, 800591a <_Balloc+0x1a>
 800590a:	2010      	movs	r0, #16
 800590c:	f7ff fdca 	bl	80054a4 <malloc>
 8005910:	6260      	str	r0, [r4, #36]	; 0x24
 8005912:	6045      	str	r5, [r0, #4]
 8005914:	6085      	str	r5, [r0, #8]
 8005916:	6005      	str	r5, [r0, #0]
 8005918:	60c5      	str	r5, [r0, #12]
 800591a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800591c:	68eb      	ldr	r3, [r5, #12]
 800591e:	b183      	cbz	r3, 8005942 <_Balloc+0x42>
 8005920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005928:	b9b8      	cbnz	r0, 800595a <_Balloc+0x5a>
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f506 	lsl.w	r5, r1, r6
 8005930:	1d6a      	adds	r2, r5, #5
 8005932:	0092      	lsls	r2, r2, #2
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fb4d 	bl	8005fd4 <_calloc_r>
 800593a:	b160      	cbz	r0, 8005956 <_Balloc+0x56>
 800593c:	6046      	str	r6, [r0, #4]
 800593e:	6085      	str	r5, [r0, #8]
 8005940:	e00e      	b.n	8005960 <_Balloc+0x60>
 8005942:	2221      	movs	r2, #33	; 0x21
 8005944:	2104      	movs	r1, #4
 8005946:	4620      	mov	r0, r4
 8005948:	f000 fb44 	bl	8005fd4 <_calloc_r>
 800594c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800594e:	60e8      	str	r0, [r5, #12]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e4      	bne.n	8005920 <_Balloc+0x20>
 8005956:	2000      	movs	r0, #0
 8005958:	bd70      	pop	{r4, r5, r6, pc}
 800595a:	6802      	ldr	r2, [r0, #0]
 800595c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005960:	2300      	movs	r3, #0
 8005962:	6103      	str	r3, [r0, #16]
 8005964:	60c3      	str	r3, [r0, #12]
 8005966:	bd70      	pop	{r4, r5, r6, pc}

08005968 <_Bfree>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800596c:	4606      	mov	r6, r0
 800596e:	460d      	mov	r5, r1
 8005970:	b93c      	cbnz	r4, 8005982 <_Bfree+0x1a>
 8005972:	2010      	movs	r0, #16
 8005974:	f7ff fd96 	bl	80054a4 <malloc>
 8005978:	6270      	str	r0, [r6, #36]	; 0x24
 800597a:	6044      	str	r4, [r0, #4]
 800597c:	6084      	str	r4, [r0, #8]
 800597e:	6004      	str	r4, [r0, #0]
 8005980:	60c4      	str	r4, [r0, #12]
 8005982:	b13d      	cbz	r5, 8005994 <_Bfree+0x2c>
 8005984:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005986:	686a      	ldr	r2, [r5, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800598e:	6029      	str	r1, [r5, #0]
 8005990:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005994:	bd70      	pop	{r4, r5, r6, pc}

08005996 <__multadd>:
 8005996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800599a:	690d      	ldr	r5, [r1, #16]
 800599c:	461f      	mov	r7, r3
 800599e:	4606      	mov	r6, r0
 80059a0:	460c      	mov	r4, r1
 80059a2:	f101 0e14 	add.w	lr, r1, #20
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8de 0000 	ldr.w	r0, [lr]
 80059ac:	b281      	uxth	r1, r0
 80059ae:	fb02 7101 	mla	r1, r2, r1, r7
 80059b2:	0c0f      	lsrs	r7, r1, #16
 80059b4:	0c00      	lsrs	r0, r0, #16
 80059b6:	fb02 7000 	mla	r0, r2, r0, r7
 80059ba:	b289      	uxth	r1, r1
 80059bc:	3301      	adds	r3, #1
 80059be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059c2:	429d      	cmp	r5, r3
 80059c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059c8:	f84e 1b04 	str.w	r1, [lr], #4
 80059cc:	dcec      	bgt.n	80059a8 <__multadd+0x12>
 80059ce:	b1d7      	cbz	r7, 8005a06 <__multadd+0x70>
 80059d0:	68a3      	ldr	r3, [r4, #8]
 80059d2:	429d      	cmp	r5, r3
 80059d4:	db12      	blt.n	80059fc <__multadd+0x66>
 80059d6:	6861      	ldr	r1, [r4, #4]
 80059d8:	4630      	mov	r0, r6
 80059da:	3101      	adds	r1, #1
 80059dc:	f7ff ff90 	bl	8005900 <_Balloc>
 80059e0:	6922      	ldr	r2, [r4, #16]
 80059e2:	3202      	adds	r2, #2
 80059e4:	f104 010c 	add.w	r1, r4, #12
 80059e8:	4680      	mov	r8, r0
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	300c      	adds	r0, #12
 80059ee:	f7ff ff6f 	bl	80058d0 <memcpy>
 80059f2:	4621      	mov	r1, r4
 80059f4:	4630      	mov	r0, r6
 80059f6:	f7ff ffb7 	bl	8005968 <_Bfree>
 80059fa:	4644      	mov	r4, r8
 80059fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a00:	3501      	adds	r5, #1
 8005a02:	615f      	str	r7, [r3, #20]
 8005a04:	6125      	str	r5, [r4, #16]
 8005a06:	4620      	mov	r0, r4
 8005a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a0c <__hi0bits>:
 8005a0c:	0c02      	lsrs	r2, r0, #16
 8005a0e:	0412      	lsls	r2, r2, #16
 8005a10:	4603      	mov	r3, r0
 8005a12:	b9b2      	cbnz	r2, 8005a42 <__hi0bits+0x36>
 8005a14:	0403      	lsls	r3, r0, #16
 8005a16:	2010      	movs	r0, #16
 8005a18:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a1c:	bf04      	itt	eq
 8005a1e:	021b      	lsleq	r3, r3, #8
 8005a20:	3008      	addeq	r0, #8
 8005a22:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a26:	bf04      	itt	eq
 8005a28:	011b      	lsleq	r3, r3, #4
 8005a2a:	3004      	addeq	r0, #4
 8005a2c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a30:	bf04      	itt	eq
 8005a32:	009b      	lsleq	r3, r3, #2
 8005a34:	3002      	addeq	r0, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	db06      	blt.n	8005a48 <__hi0bits+0x3c>
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	d503      	bpl.n	8005a46 <__hi0bits+0x3a>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	4770      	bx	lr
 8005a42:	2000      	movs	r0, #0
 8005a44:	e7e8      	b.n	8005a18 <__hi0bits+0xc>
 8005a46:	2020      	movs	r0, #32
 8005a48:	4770      	bx	lr

08005a4a <__lo0bits>:
 8005a4a:	6803      	ldr	r3, [r0, #0]
 8005a4c:	f013 0207 	ands.w	r2, r3, #7
 8005a50:	4601      	mov	r1, r0
 8005a52:	d00b      	beq.n	8005a6c <__lo0bits+0x22>
 8005a54:	07da      	lsls	r2, r3, #31
 8005a56:	d423      	bmi.n	8005aa0 <__lo0bits+0x56>
 8005a58:	0798      	lsls	r0, r3, #30
 8005a5a:	bf49      	itett	mi
 8005a5c:	085b      	lsrmi	r3, r3, #1
 8005a5e:	089b      	lsrpl	r3, r3, #2
 8005a60:	2001      	movmi	r0, #1
 8005a62:	600b      	strmi	r3, [r1, #0]
 8005a64:	bf5c      	itt	pl
 8005a66:	600b      	strpl	r3, [r1, #0]
 8005a68:	2002      	movpl	r0, #2
 8005a6a:	4770      	bx	lr
 8005a6c:	b298      	uxth	r0, r3
 8005a6e:	b9a8      	cbnz	r0, 8005a9c <__lo0bits+0x52>
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	2010      	movs	r0, #16
 8005a74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005a78:	bf04      	itt	eq
 8005a7a:	0a1b      	lsreq	r3, r3, #8
 8005a7c:	3008      	addeq	r0, #8
 8005a7e:	071a      	lsls	r2, r3, #28
 8005a80:	bf04      	itt	eq
 8005a82:	091b      	lsreq	r3, r3, #4
 8005a84:	3004      	addeq	r0, #4
 8005a86:	079a      	lsls	r2, r3, #30
 8005a88:	bf04      	itt	eq
 8005a8a:	089b      	lsreq	r3, r3, #2
 8005a8c:	3002      	addeq	r0, #2
 8005a8e:	07da      	lsls	r2, r3, #31
 8005a90:	d402      	bmi.n	8005a98 <__lo0bits+0x4e>
 8005a92:	085b      	lsrs	r3, r3, #1
 8005a94:	d006      	beq.n	8005aa4 <__lo0bits+0x5a>
 8005a96:	3001      	adds	r0, #1
 8005a98:	600b      	str	r3, [r1, #0]
 8005a9a:	4770      	bx	lr
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	e7e9      	b.n	8005a74 <__lo0bits+0x2a>
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	4770      	bx	lr
 8005aa4:	2020      	movs	r0, #32
 8005aa6:	4770      	bx	lr

08005aa8 <__i2b>:
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	460c      	mov	r4, r1
 8005aac:	2101      	movs	r1, #1
 8005aae:	f7ff ff27 	bl	8005900 <_Balloc>
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	6144      	str	r4, [r0, #20]
 8005ab6:	6102      	str	r2, [r0, #16]
 8005ab8:	bd10      	pop	{r4, pc}

08005aba <__multiply>:
 8005aba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abe:	4614      	mov	r4, r2
 8005ac0:	690a      	ldr	r2, [r1, #16]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	bfb8      	it	lt
 8005ac8:	460b      	movlt	r3, r1
 8005aca:	4689      	mov	r9, r1
 8005acc:	bfbc      	itt	lt
 8005ace:	46a1      	movlt	r9, r4
 8005ad0:	461c      	movlt	r4, r3
 8005ad2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ad6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005ada:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005ade:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ae2:	eb07 060a 	add.w	r6, r7, sl
 8005ae6:	429e      	cmp	r6, r3
 8005ae8:	bfc8      	it	gt
 8005aea:	3101      	addgt	r1, #1
 8005aec:	f7ff ff08 	bl	8005900 <_Balloc>
 8005af0:	f100 0514 	add.w	r5, r0, #20
 8005af4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af8:	462b      	mov	r3, r5
 8005afa:	2200      	movs	r2, #0
 8005afc:	4543      	cmp	r3, r8
 8005afe:	d316      	bcc.n	8005b2e <__multiply+0x74>
 8005b00:	f104 0214 	add.w	r2, r4, #20
 8005b04:	f109 0114 	add.w	r1, r9, #20
 8005b08:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005b0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	9c01      	ldr	r4, [sp, #4]
 8005b14:	4294      	cmp	r4, r2
 8005b16:	4613      	mov	r3, r2
 8005b18:	d80c      	bhi.n	8005b34 <__multiply+0x7a>
 8005b1a:	2e00      	cmp	r6, #0
 8005b1c:	dd03      	ble.n	8005b26 <__multiply+0x6c>
 8005b1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d054      	beq.n	8005bd0 <__multiply+0x116>
 8005b26:	6106      	str	r6, [r0, #16]
 8005b28:	b003      	add	sp, #12
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2e:	f843 2b04 	str.w	r2, [r3], #4
 8005b32:	e7e3      	b.n	8005afc <__multiply+0x42>
 8005b34:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b38:	3204      	adds	r2, #4
 8005b3a:	f1ba 0f00 	cmp.w	sl, #0
 8005b3e:	d020      	beq.n	8005b82 <__multiply+0xc8>
 8005b40:	46ae      	mov	lr, r5
 8005b42:	4689      	mov	r9, r1
 8005b44:	f04f 0c00 	mov.w	ip, #0
 8005b48:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b4c:	f8be b000 	ldrh.w	fp, [lr]
 8005b50:	b2a3      	uxth	r3, r4
 8005b52:	fb0a b303 	mla	r3, sl, r3, fp
 8005b56:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005b5a:	f8de 4000 	ldr.w	r4, [lr]
 8005b5e:	4463      	add	r3, ip
 8005b60:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005b64:	fb0a c40b 	mla	r4, sl, fp, ip
 8005b68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005b72:	454f      	cmp	r7, r9
 8005b74:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005b78:	f84e 3b04 	str.w	r3, [lr], #4
 8005b7c:	d8e4      	bhi.n	8005b48 <__multiply+0x8e>
 8005b7e:	f8ce c000 	str.w	ip, [lr]
 8005b82:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8005b86:	f1b9 0f00 	cmp.w	r9, #0
 8005b8a:	d01f      	beq.n	8005bcc <__multiply+0x112>
 8005b8c:	682b      	ldr	r3, [r5, #0]
 8005b8e:	46ae      	mov	lr, r5
 8005b90:	468c      	mov	ip, r1
 8005b92:	f04f 0a00 	mov.w	sl, #0
 8005b96:	f8bc 4000 	ldrh.w	r4, [ip]
 8005b9a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005b9e:	fb09 b404 	mla	r4, r9, r4, fp
 8005ba2:	44a2      	add	sl, r4
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8005baa:	f84e 3b04 	str.w	r3, [lr], #4
 8005bae:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005bb2:	f8be 4000 	ldrh.w	r4, [lr]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	fb09 4303 	mla	r3, r9, r3, r4
 8005bbc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8005bc0:	4567      	cmp	r7, ip
 8005bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005bc6:	d8e6      	bhi.n	8005b96 <__multiply+0xdc>
 8005bc8:	f8ce 3000 	str.w	r3, [lr]
 8005bcc:	3504      	adds	r5, #4
 8005bce:	e7a0      	b.n	8005b12 <__multiply+0x58>
 8005bd0:	3e01      	subs	r6, #1
 8005bd2:	e7a2      	b.n	8005b1a <__multiply+0x60>

08005bd4 <__pow5mult>:
 8005bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd8:	4615      	mov	r5, r2
 8005bda:	f012 0203 	ands.w	r2, r2, #3
 8005bde:	4606      	mov	r6, r0
 8005be0:	460f      	mov	r7, r1
 8005be2:	d007      	beq.n	8005bf4 <__pow5mult+0x20>
 8005be4:	3a01      	subs	r2, #1
 8005be6:	4c21      	ldr	r4, [pc, #132]	; (8005c6c <__pow5mult+0x98>)
 8005be8:	2300      	movs	r3, #0
 8005bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bee:	f7ff fed2 	bl	8005996 <__multadd>
 8005bf2:	4607      	mov	r7, r0
 8005bf4:	10ad      	asrs	r5, r5, #2
 8005bf6:	d035      	beq.n	8005c64 <__pow5mult+0x90>
 8005bf8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bfa:	b93c      	cbnz	r4, 8005c0c <__pow5mult+0x38>
 8005bfc:	2010      	movs	r0, #16
 8005bfe:	f7ff fc51 	bl	80054a4 <malloc>
 8005c02:	6270      	str	r0, [r6, #36]	; 0x24
 8005c04:	6044      	str	r4, [r0, #4]
 8005c06:	6084      	str	r4, [r0, #8]
 8005c08:	6004      	str	r4, [r0, #0]
 8005c0a:	60c4      	str	r4, [r0, #12]
 8005c0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c14:	b94c      	cbnz	r4, 8005c2a <__pow5mult+0x56>
 8005c16:	f240 2171 	movw	r1, #625	; 0x271
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7ff ff44 	bl	8005aa8 <__i2b>
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c26:	4604      	mov	r4, r0
 8005c28:	6003      	str	r3, [r0, #0]
 8005c2a:	f04f 0800 	mov.w	r8, #0
 8005c2e:	07eb      	lsls	r3, r5, #31
 8005c30:	d50a      	bpl.n	8005c48 <__pow5mult+0x74>
 8005c32:	4639      	mov	r1, r7
 8005c34:	4622      	mov	r2, r4
 8005c36:	4630      	mov	r0, r6
 8005c38:	f7ff ff3f 	bl	8005aba <__multiply>
 8005c3c:	4639      	mov	r1, r7
 8005c3e:	4681      	mov	r9, r0
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7ff fe91 	bl	8005968 <_Bfree>
 8005c46:	464f      	mov	r7, r9
 8005c48:	106d      	asrs	r5, r5, #1
 8005c4a:	d00b      	beq.n	8005c64 <__pow5mult+0x90>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	b938      	cbnz	r0, 8005c60 <__pow5mult+0x8c>
 8005c50:	4622      	mov	r2, r4
 8005c52:	4621      	mov	r1, r4
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff ff30 	bl	8005aba <__multiply>
 8005c5a:	6020      	str	r0, [r4, #0]
 8005c5c:	f8c0 8000 	str.w	r8, [r0]
 8005c60:	4604      	mov	r4, r0
 8005c62:	e7e4      	b.n	8005c2e <__pow5mult+0x5a>
 8005c64:	4638      	mov	r0, r7
 8005c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08006bf8 	.word	0x08006bf8

08005c70 <__lshift>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	460c      	mov	r4, r1
 8005c76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6849      	ldr	r1, [r1, #4]
 8005c7e:	eb0a 0903 	add.w	r9, sl, r3
 8005c82:	68a3      	ldr	r3, [r4, #8]
 8005c84:	4607      	mov	r7, r0
 8005c86:	4616      	mov	r6, r2
 8005c88:	f109 0501 	add.w	r5, r9, #1
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	db31      	blt.n	8005cf4 <__lshift+0x84>
 8005c90:	4638      	mov	r0, r7
 8005c92:	f7ff fe35 	bl	8005900 <_Balloc>
 8005c96:	2200      	movs	r2, #0
 8005c98:	4680      	mov	r8, r0
 8005c9a:	f100 0314 	add.w	r3, r0, #20
 8005c9e:	4611      	mov	r1, r2
 8005ca0:	4552      	cmp	r2, sl
 8005ca2:	db2a      	blt.n	8005cfa <__lshift+0x8a>
 8005ca4:	6920      	ldr	r0, [r4, #16]
 8005ca6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005caa:	f104 0114 	add.w	r1, r4, #20
 8005cae:	f016 021f 	ands.w	r2, r6, #31
 8005cb2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005cb6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005cba:	d022      	beq.n	8005d02 <__lshift+0x92>
 8005cbc:	f1c2 0c20 	rsb	ip, r2, #32
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	4096      	lsls	r6, r2
 8005cc6:	4330      	orrs	r0, r6
 8005cc8:	f843 0b04 	str.w	r0, [r3], #4
 8005ccc:	f851 0b04 	ldr.w	r0, [r1], #4
 8005cd0:	458e      	cmp	lr, r1
 8005cd2:	fa20 f00c 	lsr.w	r0, r0, ip
 8005cd6:	d8f4      	bhi.n	8005cc2 <__lshift+0x52>
 8005cd8:	6018      	str	r0, [r3, #0]
 8005cda:	b108      	cbz	r0, 8005ce0 <__lshift+0x70>
 8005cdc:	f109 0502 	add.w	r5, r9, #2
 8005ce0:	3d01      	subs	r5, #1
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f8c8 5010 	str.w	r5, [r8, #16]
 8005ce8:	4621      	mov	r1, r4
 8005cea:	f7ff fe3d 	bl	8005968 <_Bfree>
 8005cee:	4640      	mov	r0, r8
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3101      	adds	r1, #1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	e7c8      	b.n	8005c8c <__lshift+0x1c>
 8005cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005cfe:	3201      	adds	r2, #1
 8005d00:	e7ce      	b.n	8005ca0 <__lshift+0x30>
 8005d02:	3b04      	subs	r3, #4
 8005d04:	f851 2b04 	ldr.w	r2, [r1], #4
 8005d08:	f843 2f04 	str.w	r2, [r3, #4]!
 8005d0c:	458e      	cmp	lr, r1
 8005d0e:	d8f9      	bhi.n	8005d04 <__lshift+0x94>
 8005d10:	e7e6      	b.n	8005ce0 <__lshift+0x70>

08005d12 <__mcmp>:
 8005d12:	6903      	ldr	r3, [r0, #16]
 8005d14:	690a      	ldr	r2, [r1, #16]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	b530      	push	{r4, r5, lr}
 8005d1a:	d10c      	bne.n	8005d36 <__mcmp+0x24>
 8005d1c:	0092      	lsls	r2, r2, #2
 8005d1e:	3014      	adds	r0, #20
 8005d20:	3114      	adds	r1, #20
 8005d22:	1884      	adds	r4, r0, r2
 8005d24:	4411      	add	r1, r2
 8005d26:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d2a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d2e:	4295      	cmp	r5, r2
 8005d30:	d003      	beq.n	8005d3a <__mcmp+0x28>
 8005d32:	d305      	bcc.n	8005d40 <__mcmp+0x2e>
 8005d34:	2301      	movs	r3, #1
 8005d36:	4618      	mov	r0, r3
 8005d38:	bd30      	pop	{r4, r5, pc}
 8005d3a:	42a0      	cmp	r0, r4
 8005d3c:	d3f3      	bcc.n	8005d26 <__mcmp+0x14>
 8005d3e:	e7fa      	b.n	8005d36 <__mcmp+0x24>
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	e7f7      	b.n	8005d36 <__mcmp+0x24>

08005d46 <__mdiff>:
 8005d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	4607      	mov	r7, r0
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4628      	mov	r0, r5
 8005d52:	4614      	mov	r4, r2
 8005d54:	f7ff ffdd 	bl	8005d12 <__mcmp>
 8005d58:	1e06      	subs	r6, r0, #0
 8005d5a:	d108      	bne.n	8005d6e <__mdiff+0x28>
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7ff fdce 	bl	8005900 <_Balloc>
 8005d64:	2301      	movs	r3, #1
 8005d66:	6103      	str	r3, [r0, #16]
 8005d68:	6146      	str	r6, [r0, #20]
 8005d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6e:	bfa4      	itt	ge
 8005d70:	4623      	movge	r3, r4
 8005d72:	462c      	movge	r4, r5
 8005d74:	4638      	mov	r0, r7
 8005d76:	6861      	ldr	r1, [r4, #4]
 8005d78:	bfa6      	itte	ge
 8005d7a:	461d      	movge	r5, r3
 8005d7c:	2600      	movge	r6, #0
 8005d7e:	2601      	movlt	r6, #1
 8005d80:	f7ff fdbe 	bl	8005900 <_Balloc>
 8005d84:	692b      	ldr	r3, [r5, #16]
 8005d86:	60c6      	str	r6, [r0, #12]
 8005d88:	6926      	ldr	r6, [r4, #16]
 8005d8a:	f105 0914 	add.w	r9, r5, #20
 8005d8e:	f104 0214 	add.w	r2, r4, #20
 8005d92:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005d96:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005d9a:	f100 0514 	add.w	r5, r0, #20
 8005d9e:	f04f 0c00 	mov.w	ip, #0
 8005da2:	f852 ab04 	ldr.w	sl, [r2], #4
 8005da6:	f859 4b04 	ldr.w	r4, [r9], #4
 8005daa:	fa1c f18a 	uxtah	r1, ip, sl
 8005dae:	b2a3      	uxth	r3, r4
 8005db0:	1ac9      	subs	r1, r1, r3
 8005db2:	0c23      	lsrs	r3, r4, #16
 8005db4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005db8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005dbc:	b289      	uxth	r1, r1
 8005dbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005dc2:	45c8      	cmp	r8, r9
 8005dc4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005dc8:	4696      	mov	lr, r2
 8005dca:	f845 3b04 	str.w	r3, [r5], #4
 8005dce:	d8e8      	bhi.n	8005da2 <__mdiff+0x5c>
 8005dd0:	45be      	cmp	lr, r7
 8005dd2:	d305      	bcc.n	8005de0 <__mdiff+0x9a>
 8005dd4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005dd8:	b18b      	cbz	r3, 8005dfe <__mdiff+0xb8>
 8005dda:	6106      	str	r6, [r0, #16]
 8005ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de0:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005de4:	fa1c f381 	uxtah	r3, ip, r1
 8005de8:	141a      	asrs	r2, r3, #16
 8005dea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005df4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005df8:	f845 3b04 	str.w	r3, [r5], #4
 8005dfc:	e7e8      	b.n	8005dd0 <__mdiff+0x8a>
 8005dfe:	3e01      	subs	r6, #1
 8005e00:	e7e8      	b.n	8005dd4 <__mdiff+0x8e>

08005e02 <__d2b>:
 8005e02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e06:	460e      	mov	r6, r1
 8005e08:	2101      	movs	r1, #1
 8005e0a:	ec59 8b10 	vmov	r8, r9, d0
 8005e0e:	4615      	mov	r5, r2
 8005e10:	f7ff fd76 	bl	8005900 <_Balloc>
 8005e14:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e18:	4607      	mov	r7, r0
 8005e1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005e1e:	bb34      	cbnz	r4, 8005e6e <__d2b+0x6c>
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f1b8 0f00 	cmp.w	r8, #0
 8005e26:	d027      	beq.n	8005e78 <__d2b+0x76>
 8005e28:	a802      	add	r0, sp, #8
 8005e2a:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005e2e:	f7ff fe0c 	bl	8005a4a <__lo0bits>
 8005e32:	9900      	ldr	r1, [sp, #0]
 8005e34:	b1f0      	cbz	r0, 8005e74 <__d2b+0x72>
 8005e36:	9a01      	ldr	r2, [sp, #4]
 8005e38:	f1c0 0320 	rsb	r3, r0, #32
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	430b      	orrs	r3, r1
 8005e42:	40c2      	lsrs	r2, r0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	9201      	str	r2, [sp, #4]
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	bf14      	ite	ne
 8005e50:	2102      	movne	r1, #2
 8005e52:	2101      	moveq	r1, #1
 8005e54:	6139      	str	r1, [r7, #16]
 8005e56:	b1c4      	cbz	r4, 8005e8a <__d2b+0x88>
 8005e58:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005e5c:	4404      	add	r4, r0
 8005e5e:	6034      	str	r4, [r6, #0]
 8005e60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e64:	6028      	str	r0, [r5, #0]
 8005e66:	4638      	mov	r0, r7
 8005e68:	b003      	add	sp, #12
 8005e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e72:	e7d5      	b.n	8005e20 <__d2b+0x1e>
 8005e74:	6179      	str	r1, [r7, #20]
 8005e76:	e7e7      	b.n	8005e48 <__d2b+0x46>
 8005e78:	a801      	add	r0, sp, #4
 8005e7a:	f7ff fde6 	bl	8005a4a <__lo0bits>
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	2101      	movs	r1, #1
 8005e84:	6139      	str	r1, [r7, #16]
 8005e86:	3020      	adds	r0, #32
 8005e88:	e7e5      	b.n	8005e56 <__d2b+0x54>
 8005e8a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005e8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e92:	6030      	str	r0, [r6, #0]
 8005e94:	6918      	ldr	r0, [r3, #16]
 8005e96:	f7ff fdb9 	bl	8005a0c <__hi0bits>
 8005e9a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005e9e:	e7e1      	b.n	8005e64 <__d2b+0x62>

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4c06      	ldr	r4, [pc, #24]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	f7fc ffa0 	bl	8002df0 <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	2000074c 	.word	0x2000074c

08005ec0 <__sread>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec8:	f000 fb54 	bl	8006574 <_read_r>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	bfab      	itete	ge
 8005ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8005ed4:	181b      	addge	r3, r3, r0
 8005ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005eda:	bfac      	ite	ge
 8005edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ede:	81a3      	strhlt	r3, [r4, #12]
 8005ee0:	bd10      	pop	{r4, pc}

08005ee2 <__swrite>:
 8005ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee6:	461f      	mov	r7, r3
 8005ee8:	898b      	ldrh	r3, [r1, #12]
 8005eea:	05db      	lsls	r3, r3, #23
 8005eec:	4605      	mov	r5, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4616      	mov	r6, r2
 8005ef2:	d505      	bpl.n	8005f00 <__swrite+0x1e>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efc:	f000 fafc 	bl	80064f8 <_lseek_r>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	4632      	mov	r2, r6
 8005f0e:	463b      	mov	r3, r7
 8005f10:	4628      	mov	r0, r5
 8005f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f16:	f000 b84b 	b.w	8005fb0 <_write_r>

08005f1a <__sseek>:
 8005f1a:	b510      	push	{r4, lr}
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f22:	f000 fae9 	bl	80064f8 <_lseek_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	89a3      	ldrh	r3, [r4, #12]
 8005f2a:	bf15      	itete	ne
 8005f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005f36:	81a3      	strheq	r3, [r4, #12]
 8005f38:	bf18      	it	ne
 8005f3a:	81a3      	strhne	r3, [r4, #12]
 8005f3c:	bd10      	pop	{r4, pc}

08005f3e <__sclose>:
 8005f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f42:	f000 b875 	b.w	8006030 <_close_r>

08005f46 <__sprint_r>:
 8005f46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	6893      	ldr	r3, [r2, #8]
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	460f      	mov	r7, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	b91b      	cbnz	r3, 8005f5c <__sprint_r+0x16>
 8005f54:	6053      	str	r3, [r2, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005f5e:	049d      	lsls	r5, r3, #18
 8005f60:	d523      	bpl.n	8005faa <__sprint_r+0x64>
 8005f62:	6815      	ldr	r5, [r2, #0]
 8005f64:	68a0      	ldr	r0, [r4, #8]
 8005f66:	3508      	adds	r5, #8
 8005f68:	b920      	cbnz	r0, 8005f74 <__sprint_r+0x2e>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60a3      	str	r3, [r4, #8]
 8005f6e:	6063      	str	r3, [r4, #4]
 8005f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f74:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8005f78:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8005f7c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8005f80:	f04f 0900 	mov.w	r9, #0
 8005f84:	45ca      	cmp	sl, r9
 8005f86:	dc05      	bgt.n	8005f94 <__sprint_r+0x4e>
 8005f88:	68a3      	ldr	r3, [r4, #8]
 8005f8a:	f026 0603 	bic.w	r6, r6, #3
 8005f8e:	1b9e      	subs	r6, r3, r6
 8005f90:	60a6      	str	r6, [r4, #8]
 8005f92:	e7e7      	b.n	8005f64 <__sprint_r+0x1e>
 8005f94:	463a      	mov	r2, r7
 8005f96:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	f000 f905 	bl	80061aa <_fputwc_r>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d0e2      	beq.n	8005f6a <__sprint_r+0x24>
 8005fa4:	f109 0901 	add.w	r9, r9, #1
 8005fa8:	e7ec      	b.n	8005f84 <__sprint_r+0x3e>
 8005faa:	f000 f939 	bl	8006220 <__sfvwrite_r>
 8005fae:	e7dc      	b.n	8005f6a <__sprint_r+0x24>

08005fb0 <_write_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	4c07      	ldr	r4, [pc, #28]	; (8005fd0 <_write_r+0x20>)
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	4608      	mov	r0, r1
 8005fb8:	4611      	mov	r1, r2
 8005fba:	2200      	movs	r2, #0
 8005fbc:	6022      	str	r2, [r4, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f7fc ff08 	bl	8002dd4 <_write>
 8005fc4:	1c43      	adds	r3, r0, #1
 8005fc6:	d102      	bne.n	8005fce <_write_r+0x1e>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	b103      	cbz	r3, 8005fce <_write_r+0x1e>
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	2000074c 	.word	0x2000074c

08005fd4 <_calloc_r>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	4351      	muls	r1, r2
 8005fd8:	f7ff fa6c 	bl	80054b4 <_malloc_r>
 8005fdc:	4604      	mov	r4, r0
 8005fde:	b198      	cbz	r0, 8006008 <_calloc_r+0x34>
 8005fe0:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005fe4:	f022 0203 	bic.w	r2, r2, #3
 8005fe8:	3a04      	subs	r2, #4
 8005fea:	2a24      	cmp	r2, #36	; 0x24
 8005fec:	d81b      	bhi.n	8006026 <_calloc_r+0x52>
 8005fee:	2a13      	cmp	r2, #19
 8005ff0:	d917      	bls.n	8006022 <_calloc_r+0x4e>
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	2a1b      	cmp	r2, #27
 8005ff6:	6001      	str	r1, [r0, #0]
 8005ff8:	6041      	str	r1, [r0, #4]
 8005ffa:	d807      	bhi.n	800600c <_calloc_r+0x38>
 8005ffc:	f100 0308 	add.w	r3, r0, #8
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	609a      	str	r2, [r3, #8]
 8006008:	4620      	mov	r0, r4
 800600a:	bd10      	pop	{r4, pc}
 800600c:	2a24      	cmp	r2, #36	; 0x24
 800600e:	6081      	str	r1, [r0, #8]
 8006010:	60c1      	str	r1, [r0, #12]
 8006012:	bf11      	iteee	ne
 8006014:	f100 0310 	addne.w	r3, r0, #16
 8006018:	6101      	streq	r1, [r0, #16]
 800601a:	f100 0318 	addeq.w	r3, r0, #24
 800601e:	6141      	streq	r1, [r0, #20]
 8006020:	e7ee      	b.n	8006000 <_calloc_r+0x2c>
 8006022:	4603      	mov	r3, r0
 8006024:	e7ec      	b.n	8006000 <_calloc_r+0x2c>
 8006026:	2100      	movs	r1, #0
 8006028:	f7fc ff80 	bl	8002f2c <memset>
 800602c:	e7ec      	b.n	8006008 <_calloc_r+0x34>
	...

08006030 <_close_r>:
 8006030:	b538      	push	{r3, r4, r5, lr}
 8006032:	4c06      	ldr	r4, [pc, #24]	; (800604c <_close_r+0x1c>)
 8006034:	2300      	movs	r3, #0
 8006036:	4605      	mov	r5, r0
 8006038:	4608      	mov	r0, r1
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	f7fc fef2 	bl	8002e24 <_close>
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d102      	bne.n	800604a <_close_r+0x1a>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	b103      	cbz	r3, 800604a <_close_r+0x1a>
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	bd38      	pop	{r3, r4, r5, pc}
 800604c:	2000074c 	.word	0x2000074c

08006050 <_fclose_r>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4605      	mov	r5, r0
 8006054:	460c      	mov	r4, r1
 8006056:	b911      	cbnz	r1, 800605e <_fclose_r+0xe>
 8006058:	2600      	movs	r6, #0
 800605a:	4630      	mov	r0, r6
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	b118      	cbz	r0, 8006068 <_fclose_r+0x18>
 8006060:	6983      	ldr	r3, [r0, #24]
 8006062:	b90b      	cbnz	r3, 8006068 <_fclose_r+0x18>
 8006064:	f7fe fff0 	bl	8005048 <__sinit>
 8006068:	4b2c      	ldr	r3, [pc, #176]	; (800611c <_fclose_r+0xcc>)
 800606a:	429c      	cmp	r4, r3
 800606c:	d114      	bne.n	8006098 <_fclose_r+0x48>
 800606e:	686c      	ldr	r4, [r5, #4]
 8006070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006072:	07d8      	lsls	r0, r3, #31
 8006074:	d405      	bmi.n	8006082 <_fclose_r+0x32>
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	0599      	lsls	r1, r3, #22
 800607a:	d402      	bmi.n	8006082 <_fclose_r+0x32>
 800607c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800607e:	f7ff f9a3 	bl	80053c8 <__retarget_lock_acquire_recursive>
 8006082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006086:	b98b      	cbnz	r3, 80060ac <_fclose_r+0x5c>
 8006088:	6e66      	ldr	r6, [r4, #100]	; 0x64
 800608a:	f016 0601 	ands.w	r6, r6, #1
 800608e:	d1e3      	bne.n	8006058 <_fclose_r+0x8>
 8006090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006092:	f7ff f99a 	bl	80053ca <__retarget_lock_release_recursive>
 8006096:	e7e0      	b.n	800605a <_fclose_r+0xa>
 8006098:	4b21      	ldr	r3, [pc, #132]	; (8006120 <_fclose_r+0xd0>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d101      	bne.n	80060a2 <_fclose_r+0x52>
 800609e:	68ac      	ldr	r4, [r5, #8]
 80060a0:	e7e6      	b.n	8006070 <_fclose_r+0x20>
 80060a2:	4b20      	ldr	r3, [pc, #128]	; (8006124 <_fclose_r+0xd4>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	bf08      	it	eq
 80060a8:	68ec      	ldreq	r4, [r5, #12]
 80060aa:	e7e1      	b.n	8006070 <_fclose_r+0x20>
 80060ac:	4621      	mov	r1, r4
 80060ae:	4628      	mov	r0, r5
 80060b0:	f7fe fea4 	bl	8004dfc <__sflush_r>
 80060b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060b6:	4606      	mov	r6, r0
 80060b8:	b133      	cbz	r3, 80060c8 <_fclose_r+0x78>
 80060ba:	6a21      	ldr	r1, [r4, #32]
 80060bc:	4628      	mov	r0, r5
 80060be:	4798      	blx	r3
 80060c0:	2800      	cmp	r0, #0
 80060c2:	bfb8      	it	lt
 80060c4:	f04f 36ff 	movlt.w	r6, #4294967295
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	061a      	lsls	r2, r3, #24
 80060cc:	d503      	bpl.n	80060d6 <_fclose_r+0x86>
 80060ce:	6921      	ldr	r1, [r4, #16]
 80060d0:	4628      	mov	r0, r5
 80060d2:	f7ff f88f 	bl	80051f4 <_free_r>
 80060d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060d8:	b141      	cbz	r1, 80060ec <_fclose_r+0x9c>
 80060da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060de:	4299      	cmp	r1, r3
 80060e0:	d002      	beq.n	80060e8 <_fclose_r+0x98>
 80060e2:	4628      	mov	r0, r5
 80060e4:	f7ff f886 	bl	80051f4 <_free_r>
 80060e8:	2300      	movs	r3, #0
 80060ea:	6363      	str	r3, [r4, #52]	; 0x34
 80060ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060ee:	b121      	cbz	r1, 80060fa <_fclose_r+0xaa>
 80060f0:	4628      	mov	r0, r5
 80060f2:	f7ff f87f 	bl	80051f4 <_free_r>
 80060f6:	2300      	movs	r3, #0
 80060f8:	64a3      	str	r3, [r4, #72]	; 0x48
 80060fa:	f7fe ff8d 	bl	8005018 <__sfp_lock_acquire>
 80060fe:	2300      	movs	r3, #0
 8006100:	81a3      	strh	r3, [r4, #12]
 8006102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006104:	07db      	lsls	r3, r3, #31
 8006106:	d402      	bmi.n	800610e <_fclose_r+0xbe>
 8006108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800610a:	f7ff f95e 	bl	80053ca <__retarget_lock_release_recursive>
 800610e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006110:	f7ff f959 	bl	80053c6 <__retarget_lock_close_recursive>
 8006114:	f7fe ff86 	bl	8005024 <__sfp_lock_release>
 8006118:	e79f      	b.n	800605a <_fclose_r+0xa>
 800611a:	bf00      	nop
 800611c:	08006ac4 	.word	0x08006ac4
 8006120:	08006ae4 	.word	0x08006ae4
 8006124:	08006aa4 	.word	0x08006aa4

08006128 <__fputwc>:
 8006128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4680      	mov	r8, r0
 800612e:	460e      	mov	r6, r1
 8006130:	4614      	mov	r4, r2
 8006132:	f000 f9d3 	bl	80064dc <__locale_mb_cur_max>
 8006136:	2801      	cmp	r0, #1
 8006138:	d11c      	bne.n	8006174 <__fputwc+0x4c>
 800613a:	1e73      	subs	r3, r6, #1
 800613c:	2bfe      	cmp	r3, #254	; 0xfe
 800613e:	d819      	bhi.n	8006174 <__fputwc+0x4c>
 8006140:	f88d 6004 	strb.w	r6, [sp, #4]
 8006144:	4605      	mov	r5, r0
 8006146:	2700      	movs	r7, #0
 8006148:	f10d 0904 	add.w	r9, sp, #4
 800614c:	42af      	cmp	r7, r5
 800614e:	d020      	beq.n	8006192 <__fputwc+0x6a>
 8006150:	68a3      	ldr	r3, [r4, #8]
 8006152:	f817 1009 	ldrb.w	r1, [r7, r9]
 8006156:	3b01      	subs	r3, #1
 8006158:	2b00      	cmp	r3, #0
 800615a:	60a3      	str	r3, [r4, #8]
 800615c:	da04      	bge.n	8006168 <__fputwc+0x40>
 800615e:	69a2      	ldr	r2, [r4, #24]
 8006160:	4293      	cmp	r3, r2
 8006162:	db1a      	blt.n	800619a <__fputwc+0x72>
 8006164:	290a      	cmp	r1, #10
 8006166:	d018      	beq.n	800619a <__fputwc+0x72>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	6022      	str	r2, [r4, #0]
 800616e:	7019      	strb	r1, [r3, #0]
 8006170:	3701      	adds	r7, #1
 8006172:	e7eb      	b.n	800614c <__fputwc+0x24>
 8006174:	4632      	mov	r2, r6
 8006176:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800617a:	a901      	add	r1, sp, #4
 800617c:	4640      	mov	r0, r8
 800617e:	f000 fbe9 	bl	8006954 <_wcrtomb_r>
 8006182:	1c42      	adds	r2, r0, #1
 8006184:	4605      	mov	r5, r0
 8006186:	d1de      	bne.n	8006146 <__fputwc+0x1e>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	4606      	mov	r6, r0
 8006192:	4630      	mov	r0, r6
 8006194:	b003      	add	sp, #12
 8006196:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800619a:	4622      	mov	r2, r4
 800619c:	4640      	mov	r0, r8
 800619e:	f000 fb7b 	bl	8006898 <__swbuf_r>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	d1e4      	bne.n	8006170 <__fputwc+0x48>
 80061a6:	4606      	mov	r6, r0
 80061a8:	e7f3      	b.n	8006192 <__fputwc+0x6a>

080061aa <_fputwc_r>:
 80061aa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80061ac:	07db      	lsls	r3, r3, #31
 80061ae:	b570      	push	{r4, r5, r6, lr}
 80061b0:	4605      	mov	r5, r0
 80061b2:	460e      	mov	r6, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	d405      	bmi.n	80061c4 <_fputwc_r+0x1a>
 80061b8:	8993      	ldrh	r3, [r2, #12]
 80061ba:	0598      	lsls	r0, r3, #22
 80061bc:	d402      	bmi.n	80061c4 <_fputwc_r+0x1a>
 80061be:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80061c0:	f7ff f902 	bl	80053c8 <__retarget_lock_acquire_recursive>
 80061c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061c8:	0499      	lsls	r1, r3, #18
 80061ca:	d406      	bmi.n	80061da <_fputwc_r+0x30>
 80061cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061d8:	6663      	str	r3, [r4, #100]	; 0x64
 80061da:	4622      	mov	r2, r4
 80061dc:	4628      	mov	r0, r5
 80061de:	4631      	mov	r1, r6
 80061e0:	f7ff ffa2 	bl	8006128 <__fputwc>
 80061e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061e6:	07da      	lsls	r2, r3, #31
 80061e8:	4605      	mov	r5, r0
 80061ea:	d405      	bmi.n	80061f8 <_fputwc_r+0x4e>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	059b      	lsls	r3, r3, #22
 80061f0:	d402      	bmi.n	80061f8 <_fputwc_r+0x4e>
 80061f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061f4:	f7ff f8e9 	bl	80053ca <__retarget_lock_release_recursive>
 80061f8:	4628      	mov	r0, r5
 80061fa:	bd70      	pop	{r4, r5, r6, pc}

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4c07      	ldr	r4, [pc, #28]	; (800621c <_fstat_r+0x20>)
 8006200:	2300      	movs	r3, #0
 8006202:	4605      	mov	r5, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	f7fc fe0e 	bl	8002e2a <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	2000074c 	.word	0x2000074c

08006220 <__sfvwrite_r>:
 8006220:	6893      	ldr	r3, [r2, #8]
 8006222:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006226:	4607      	mov	r7, r0
 8006228:	460c      	mov	r4, r1
 800622a:	4690      	mov	r8, r2
 800622c:	b91b      	cbnz	r3, 8006236 <__sfvwrite_r+0x16>
 800622e:	2000      	movs	r0, #0
 8006230:	b003      	add	sp, #12
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	898b      	ldrh	r3, [r1, #12]
 8006238:	0718      	lsls	r0, r3, #28
 800623a:	d526      	bpl.n	800628a <__sfvwrite_r+0x6a>
 800623c:	690b      	ldr	r3, [r1, #16]
 800623e:	b323      	cbz	r3, 800628a <__sfvwrite_r+0x6a>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f8d8 6000 	ldr.w	r6, [r8]
 8006246:	f013 0902 	ands.w	r9, r3, #2
 800624a:	d02d      	beq.n	80062a8 <__sfvwrite_r+0x88>
 800624c:	f04f 0a00 	mov.w	sl, #0
 8006250:	f8df b264 	ldr.w	fp, [pc, #612]	; 80064b8 <__sfvwrite_r+0x298>
 8006254:	46d1      	mov	r9, sl
 8006256:	f1b9 0f00 	cmp.w	r9, #0
 800625a:	d01f      	beq.n	800629c <__sfvwrite_r+0x7c>
 800625c:	45d9      	cmp	r9, fp
 800625e:	464b      	mov	r3, r9
 8006260:	4652      	mov	r2, sl
 8006262:	bf28      	it	cs
 8006264:	465b      	movcs	r3, fp
 8006266:	6a21      	ldr	r1, [r4, #32]
 8006268:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800626a:	4638      	mov	r0, r7
 800626c:	47a8      	blx	r5
 800626e:	2800      	cmp	r0, #0
 8006270:	f340 8089 	ble.w	8006386 <__sfvwrite_r+0x166>
 8006274:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006278:	4482      	add	sl, r0
 800627a:	eba9 0900 	sub.w	r9, r9, r0
 800627e:	1a18      	subs	r0, r3, r0
 8006280:	f8c8 0008 	str.w	r0, [r8, #8]
 8006284:	2800      	cmp	r0, #0
 8006286:	d1e6      	bne.n	8006256 <__sfvwrite_r+0x36>
 8006288:	e7d1      	b.n	800622e <__sfvwrite_r+0xe>
 800628a:	4621      	mov	r1, r4
 800628c:	4638      	mov	r0, r7
 800628e:	f7fd feeb 	bl	8004068 <__swsetup_r>
 8006292:	2800      	cmp	r0, #0
 8006294:	d0d4      	beq.n	8006240 <__sfvwrite_r+0x20>
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	e7c9      	b.n	8006230 <__sfvwrite_r+0x10>
 800629c:	f8d6 a000 	ldr.w	sl, [r6]
 80062a0:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80062a4:	3608      	adds	r6, #8
 80062a6:	e7d6      	b.n	8006256 <__sfvwrite_r+0x36>
 80062a8:	f013 0301 	ands.w	r3, r3, #1
 80062ac:	d043      	beq.n	8006336 <__sfvwrite_r+0x116>
 80062ae:	4648      	mov	r0, r9
 80062b0:	46ca      	mov	sl, r9
 80062b2:	46cb      	mov	fp, r9
 80062b4:	f1bb 0f00 	cmp.w	fp, #0
 80062b8:	f000 80d9 	beq.w	800646e <__sfvwrite_r+0x24e>
 80062bc:	b950      	cbnz	r0, 80062d4 <__sfvwrite_r+0xb4>
 80062be:	465a      	mov	r2, fp
 80062c0:	210a      	movs	r1, #10
 80062c2:	4650      	mov	r0, sl
 80062c4:	f7f9 ff84 	bl	80001d0 <memchr>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	f000 80d5 	beq.w	8006478 <__sfvwrite_r+0x258>
 80062ce:	3001      	adds	r0, #1
 80062d0:	eba0 090a 	sub.w	r9, r0, sl
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	6962      	ldr	r2, [r4, #20]
 80062da:	45d9      	cmp	r9, fp
 80062dc:	464b      	mov	r3, r9
 80062de:	bf28      	it	cs
 80062e0:	465b      	movcs	r3, fp
 80062e2:	4288      	cmp	r0, r1
 80062e4:	f240 80cb 	bls.w	800647e <__sfvwrite_r+0x25e>
 80062e8:	68a5      	ldr	r5, [r4, #8]
 80062ea:	4415      	add	r5, r2
 80062ec:	42ab      	cmp	r3, r5
 80062ee:	f340 80c6 	ble.w	800647e <__sfvwrite_r+0x25e>
 80062f2:	4651      	mov	r1, sl
 80062f4:	462a      	mov	r2, r5
 80062f6:	f000 f923 	bl	8006540 <memmove>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	442b      	add	r3, r5
 80062fe:	6023      	str	r3, [r4, #0]
 8006300:	4621      	mov	r1, r4
 8006302:	4638      	mov	r0, r7
 8006304:	f7fe fe0c 	bl	8004f20 <_fflush_r>
 8006308:	2800      	cmp	r0, #0
 800630a:	d13c      	bne.n	8006386 <__sfvwrite_r+0x166>
 800630c:	ebb9 0905 	subs.w	r9, r9, r5
 8006310:	f040 80cf 	bne.w	80064b2 <__sfvwrite_r+0x292>
 8006314:	4621      	mov	r1, r4
 8006316:	4638      	mov	r0, r7
 8006318:	f7fe fe02 	bl	8004f20 <_fflush_r>
 800631c:	2800      	cmp	r0, #0
 800631e:	d132      	bne.n	8006386 <__sfvwrite_r+0x166>
 8006320:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006324:	44aa      	add	sl, r5
 8006326:	ebab 0b05 	sub.w	fp, fp, r5
 800632a:	1b5d      	subs	r5, r3, r5
 800632c:	f8c8 5008 	str.w	r5, [r8, #8]
 8006330:	2d00      	cmp	r5, #0
 8006332:	d1bf      	bne.n	80062b4 <__sfvwrite_r+0x94>
 8006334:	e77b      	b.n	800622e <__sfvwrite_r+0xe>
 8006336:	4699      	mov	r9, r3
 8006338:	469a      	mov	sl, r3
 800633a:	f1ba 0f00 	cmp.w	sl, #0
 800633e:	d027      	beq.n	8006390 <__sfvwrite_r+0x170>
 8006340:	89a2      	ldrh	r2, [r4, #12]
 8006342:	68a5      	ldr	r5, [r4, #8]
 8006344:	0591      	lsls	r1, r2, #22
 8006346:	d565      	bpl.n	8006414 <__sfvwrite_r+0x1f4>
 8006348:	45aa      	cmp	sl, r5
 800634a:	d33b      	bcc.n	80063c4 <__sfvwrite_r+0x1a4>
 800634c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006350:	d036      	beq.n	80063c0 <__sfvwrite_r+0x1a0>
 8006352:	6921      	ldr	r1, [r4, #16]
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	1a5b      	subs	r3, r3, r1
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	6963      	ldr	r3, [r4, #20]
 800635c:	2002      	movs	r0, #2
 800635e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006362:	fb93 fbf0 	sdiv	fp, r3, r0
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	1c58      	adds	r0, r3, #1
 800636a:	4450      	add	r0, sl
 800636c:	4583      	cmp	fp, r0
 800636e:	bf38      	it	cc
 8006370:	4683      	movcc	fp, r0
 8006372:	0553      	lsls	r3, r2, #21
 8006374:	d53e      	bpl.n	80063f4 <__sfvwrite_r+0x1d4>
 8006376:	4659      	mov	r1, fp
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff f89b 	bl	80054b4 <_malloc_r>
 800637e:	4605      	mov	r5, r0
 8006380:	b950      	cbnz	r0, 8006398 <__sfvwrite_r+0x178>
 8006382:	230c      	movs	r3, #12
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	e782      	b.n	8006296 <__sfvwrite_r+0x76>
 8006390:	e896 0600 	ldmia.w	r6, {r9, sl}
 8006394:	3608      	adds	r6, #8
 8006396:	e7d0      	b.n	800633a <__sfvwrite_r+0x11a>
 8006398:	9a01      	ldr	r2, [sp, #4]
 800639a:	6921      	ldr	r1, [r4, #16]
 800639c:	f7ff fa98 	bl	80058d0 <memcpy>
 80063a0:	89a2      	ldrh	r2, [r4, #12]
 80063a2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80063a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063aa:	81a2      	strh	r2, [r4, #12]
 80063ac:	9b01      	ldr	r3, [sp, #4]
 80063ae:	6125      	str	r5, [r4, #16]
 80063b0:	441d      	add	r5, r3
 80063b2:	ebab 0303 	sub.w	r3, fp, r3
 80063b6:	6025      	str	r5, [r4, #0]
 80063b8:	f8c4 b014 	str.w	fp, [r4, #20]
 80063bc:	4655      	mov	r5, sl
 80063be:	60a3      	str	r3, [r4, #8]
 80063c0:	45aa      	cmp	sl, r5
 80063c2:	d200      	bcs.n	80063c6 <__sfvwrite_r+0x1a6>
 80063c4:	4655      	mov	r5, sl
 80063c6:	462a      	mov	r2, r5
 80063c8:	4649      	mov	r1, r9
 80063ca:	6820      	ldr	r0, [r4, #0]
 80063cc:	f000 f8b8 	bl	8006540 <memmove>
 80063d0:	68a3      	ldr	r3, [r4, #8]
 80063d2:	1b5b      	subs	r3, r3, r5
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	441d      	add	r5, r3
 80063da:	6025      	str	r5, [r4, #0]
 80063dc:	4655      	mov	r5, sl
 80063de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063e2:	44a9      	add	r9, r5
 80063e4:	ebaa 0a05 	sub.w	sl, sl, r5
 80063e8:	1b5d      	subs	r5, r3, r5
 80063ea:	f8c8 5008 	str.w	r5, [r8, #8]
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d1a3      	bne.n	800633a <__sfvwrite_r+0x11a>
 80063f2:	e71c      	b.n	800622e <__sfvwrite_r+0xe>
 80063f4:	465a      	mov	r2, fp
 80063f6:	4638      	mov	r0, r7
 80063f8:	f000 f8ce 	bl	8006598 <_realloc_r>
 80063fc:	4605      	mov	r5, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d1d4      	bne.n	80063ac <__sfvwrite_r+0x18c>
 8006402:	6921      	ldr	r1, [r4, #16]
 8006404:	4638      	mov	r0, r7
 8006406:	f7fe fef5 	bl	80051f4 <_free_r>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006410:	81a3      	strh	r3, [r4, #12]
 8006412:	e7b6      	b.n	8006382 <__sfvwrite_r+0x162>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	4298      	cmp	r0, r3
 800641a:	d802      	bhi.n	8006422 <__sfvwrite_r+0x202>
 800641c:	6962      	ldr	r2, [r4, #20]
 800641e:	4592      	cmp	sl, r2
 8006420:	d215      	bcs.n	800644e <__sfvwrite_r+0x22e>
 8006422:	4555      	cmp	r5, sl
 8006424:	bf28      	it	cs
 8006426:	4655      	movcs	r5, sl
 8006428:	462a      	mov	r2, r5
 800642a:	4649      	mov	r1, r9
 800642c:	f000 f888 	bl	8006540 <memmove>
 8006430:	68a3      	ldr	r3, [r4, #8]
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	1b5b      	subs	r3, r3, r5
 8006436:	442a      	add	r2, r5
 8006438:	60a3      	str	r3, [r4, #8]
 800643a:	6022      	str	r2, [r4, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ce      	bne.n	80063de <__sfvwrite_r+0x1be>
 8006440:	4621      	mov	r1, r4
 8006442:	4638      	mov	r0, r7
 8006444:	f7fe fd6c 	bl	8004f20 <_fflush_r>
 8006448:	2800      	cmp	r0, #0
 800644a:	d0c8      	beq.n	80063de <__sfvwrite_r+0x1be>
 800644c:	e79b      	b.n	8006386 <__sfvwrite_r+0x166>
 800644e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006452:	4553      	cmp	r3, sl
 8006454:	bf28      	it	cs
 8006456:	4653      	movcs	r3, sl
 8006458:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800645a:	fb93 f3f2 	sdiv	r3, r3, r2
 800645e:	6a21      	ldr	r1, [r4, #32]
 8006460:	4353      	muls	r3, r2
 8006462:	4638      	mov	r0, r7
 8006464:	464a      	mov	r2, r9
 8006466:	47a8      	blx	r5
 8006468:	1e05      	subs	r5, r0, #0
 800646a:	dcb8      	bgt.n	80063de <__sfvwrite_r+0x1be>
 800646c:	e78b      	b.n	8006386 <__sfvwrite_r+0x166>
 800646e:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8006472:	2000      	movs	r0, #0
 8006474:	3608      	adds	r6, #8
 8006476:	e71d      	b.n	80062b4 <__sfvwrite_r+0x94>
 8006478:	f10b 0901 	add.w	r9, fp, #1
 800647c:	e72a      	b.n	80062d4 <__sfvwrite_r+0xb4>
 800647e:	4293      	cmp	r3, r2
 8006480:	db09      	blt.n	8006496 <__sfvwrite_r+0x276>
 8006482:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006484:	6a21      	ldr	r1, [r4, #32]
 8006486:	4613      	mov	r3, r2
 8006488:	4638      	mov	r0, r7
 800648a:	4652      	mov	r2, sl
 800648c:	47a8      	blx	r5
 800648e:	1e05      	subs	r5, r0, #0
 8006490:	f73f af3c 	bgt.w	800630c <__sfvwrite_r+0xec>
 8006494:	e777      	b.n	8006386 <__sfvwrite_r+0x166>
 8006496:	461a      	mov	r2, r3
 8006498:	4651      	mov	r1, sl
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	f000 f850 	bl	8006540 <memmove>
 80064a0:	9b01      	ldr	r3, [sp, #4]
 80064a2:	68a2      	ldr	r2, [r4, #8]
 80064a4:	1ad2      	subs	r2, r2, r3
 80064a6:	60a2      	str	r2, [r4, #8]
 80064a8:	6822      	ldr	r2, [r4, #0]
 80064aa:	441a      	add	r2, r3
 80064ac:	6022      	str	r2, [r4, #0]
 80064ae:	461d      	mov	r5, r3
 80064b0:	e72c      	b.n	800630c <__sfvwrite_r+0xec>
 80064b2:	2001      	movs	r0, #1
 80064b4:	e734      	b.n	8006320 <__sfvwrite_r+0x100>
 80064b6:	bf00      	nop
 80064b8:	7ffffc00 	.word	0x7ffffc00

080064bc <_isatty_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4c06      	ldr	r4, [pc, #24]	; (80064d8 <_isatty_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4605      	mov	r5, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	f7fc fcb4 	bl	8002e34 <_isatty>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_isatty_r+0x1a>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_isatty_r+0x1a>
 80064d4:	602b      	str	r3, [r5, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	2000074c 	.word	0x2000074c

080064dc <__locale_mb_cur_max>:
 80064dc:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <__locale_mb_cur_max+0x14>)
 80064de:	4a05      	ldr	r2, [pc, #20]	; (80064f4 <__locale_mb_cur_max+0x18>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf08      	it	eq
 80064e8:	4613      	moveq	r3, r2
 80064ea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80064ee:	4770      	bx	lr
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	20000510 	.word	0x20000510

080064f8 <_lseek_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4c07      	ldr	r4, [pc, #28]	; (8006518 <_lseek_r+0x20>)
 80064fc:	4605      	mov	r5, r0
 80064fe:	4608      	mov	r0, r1
 8006500:	4611      	mov	r1, r2
 8006502:	2200      	movs	r2, #0
 8006504:	6022      	str	r2, [r4, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f7fc fc96 	bl	8002e38 <_lseek>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d102      	bne.n	8006516 <_lseek_r+0x1e>
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	b103      	cbz	r3, 8006516 <_lseek_r+0x1e>
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	2000074c 	.word	0x2000074c

0800651c <__ascii_mbtowc>:
 800651c:	b082      	sub	sp, #8
 800651e:	b901      	cbnz	r1, 8006522 <__ascii_mbtowc+0x6>
 8006520:	a901      	add	r1, sp, #4
 8006522:	b142      	cbz	r2, 8006536 <__ascii_mbtowc+0x1a>
 8006524:	b14b      	cbz	r3, 800653a <__ascii_mbtowc+0x1e>
 8006526:	7813      	ldrb	r3, [r2, #0]
 8006528:	600b      	str	r3, [r1, #0]
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	1c10      	adds	r0, r2, #0
 800652e:	bf18      	it	ne
 8006530:	2001      	movne	r0, #1
 8006532:	b002      	add	sp, #8
 8006534:	4770      	bx	lr
 8006536:	4610      	mov	r0, r2
 8006538:	e7fb      	b.n	8006532 <__ascii_mbtowc+0x16>
 800653a:	f06f 0001 	mvn.w	r0, #1
 800653e:	e7f8      	b.n	8006532 <__ascii_mbtowc+0x16>

08006540 <memmove>:
 8006540:	4288      	cmp	r0, r1
 8006542:	b510      	push	{r4, lr}
 8006544:	eb01 0302 	add.w	r3, r1, r2
 8006548:	d803      	bhi.n	8006552 <memmove+0x12>
 800654a:	1e42      	subs	r2, r0, #1
 800654c:	4299      	cmp	r1, r3
 800654e:	d10c      	bne.n	800656a <memmove+0x2a>
 8006550:	bd10      	pop	{r4, pc}
 8006552:	4298      	cmp	r0, r3
 8006554:	d2f9      	bcs.n	800654a <memmove+0xa>
 8006556:	1881      	adds	r1, r0, r2
 8006558:	1ad2      	subs	r2, r2, r3
 800655a:	42d3      	cmn	r3, r2
 800655c:	d100      	bne.n	8006560 <memmove+0x20>
 800655e:	bd10      	pop	{r4, pc}
 8006560:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006564:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006568:	e7f7      	b.n	800655a <memmove+0x1a>
 800656a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800656e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006572:	e7eb      	b.n	800654c <memmove+0xc>

08006574 <_read_r>:
 8006574:	b538      	push	{r3, r4, r5, lr}
 8006576:	4c07      	ldr	r4, [pc, #28]	; (8006594 <_read_r+0x20>)
 8006578:	4605      	mov	r5, r0
 800657a:	4608      	mov	r0, r1
 800657c:	4611      	mov	r1, r2
 800657e:	2200      	movs	r2, #0
 8006580:	6022      	str	r2, [r4, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	f7fc fc18 	bl	8002db8 <_read>
 8006588:	1c43      	adds	r3, r0, #1
 800658a:	d102      	bne.n	8006592 <_read_r+0x1e>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	b103      	cbz	r3, 8006592 <_read_r+0x1e>
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	bd38      	pop	{r3, r4, r5, pc}
 8006594:	2000074c 	.word	0x2000074c

08006598 <_realloc_r>:
 8006598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	4682      	mov	sl, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	b929      	cbnz	r1, 80065ae <_realloc_r+0x16>
 80065a2:	4611      	mov	r1, r2
 80065a4:	b003      	add	sp, #12
 80065a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f7fe bf83 	b.w	80054b4 <_malloc_r>
 80065ae:	9201      	str	r2, [sp, #4]
 80065b0:	f7ff f99a 	bl	80058e8 <__malloc_lock>
 80065b4:	9a01      	ldr	r2, [sp, #4]
 80065b6:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80065ba:	f102 080b 	add.w	r8, r2, #11
 80065be:	f1b8 0f16 	cmp.w	r8, #22
 80065c2:	f1a4 0908 	sub.w	r9, r4, #8
 80065c6:	f025 0603 	bic.w	r6, r5, #3
 80065ca:	d90a      	bls.n	80065e2 <_realloc_r+0x4a>
 80065cc:	f038 0807 	bics.w	r8, r8, #7
 80065d0:	d509      	bpl.n	80065e6 <_realloc_r+0x4e>
 80065d2:	230c      	movs	r3, #12
 80065d4:	f8ca 3000 	str.w	r3, [sl]
 80065d8:	2700      	movs	r7, #0
 80065da:	4638      	mov	r0, r7
 80065dc:	b003      	add	sp, #12
 80065de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e2:	f04f 0810 	mov.w	r8, #16
 80065e6:	4590      	cmp	r8, r2
 80065e8:	d3f3      	bcc.n	80065d2 <_realloc_r+0x3a>
 80065ea:	45b0      	cmp	r8, r6
 80065ec:	f340 8145 	ble.w	800687a <_realloc_r+0x2e2>
 80065f0:	4ba8      	ldr	r3, [pc, #672]	; (8006894 <_realloc_r+0x2fc>)
 80065f2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80065f6:	eb09 0106 	add.w	r1, r9, r6
 80065fa:	4571      	cmp	r1, lr
 80065fc:	469b      	mov	fp, r3
 80065fe:	684b      	ldr	r3, [r1, #4]
 8006600:	d005      	beq.n	800660e <_realloc_r+0x76>
 8006602:	f023 0001 	bic.w	r0, r3, #1
 8006606:	4408      	add	r0, r1
 8006608:	6840      	ldr	r0, [r0, #4]
 800660a:	07c7      	lsls	r7, r0, #31
 800660c:	d447      	bmi.n	800669e <_realloc_r+0x106>
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	4571      	cmp	r1, lr
 8006614:	eb06 0703 	add.w	r7, r6, r3
 8006618:	d119      	bne.n	800664e <_realloc_r+0xb6>
 800661a:	f108 0010 	add.w	r0, r8, #16
 800661e:	4287      	cmp	r7, r0
 8006620:	db3f      	blt.n	80066a2 <_realloc_r+0x10a>
 8006622:	eb09 0308 	add.w	r3, r9, r8
 8006626:	eba7 0708 	sub.w	r7, r7, r8
 800662a:	f047 0701 	orr.w	r7, r7, #1
 800662e:	f8cb 3008 	str.w	r3, [fp, #8]
 8006632:	605f      	str	r7, [r3, #4]
 8006634:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	ea43 0308 	orr.w	r3, r3, r8
 8006640:	f844 3c04 	str.w	r3, [r4, #-4]
 8006644:	4650      	mov	r0, sl
 8006646:	f7ff f955 	bl	80058f4 <__malloc_unlock>
 800664a:	4627      	mov	r7, r4
 800664c:	e7c5      	b.n	80065da <_realloc_r+0x42>
 800664e:	45b8      	cmp	r8, r7
 8006650:	dc27      	bgt.n	80066a2 <_realloc_r+0x10a>
 8006652:	68cb      	ldr	r3, [r1, #12]
 8006654:	688a      	ldr	r2, [r1, #8]
 8006656:	60d3      	str	r3, [r2, #12]
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	eba7 0008 	sub.w	r0, r7, r8
 800665e:	280f      	cmp	r0, #15
 8006660:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006664:	eb09 0207 	add.w	r2, r9, r7
 8006668:	f240 8109 	bls.w	800687e <_realloc_r+0x2e6>
 800666c:	eb09 0108 	add.w	r1, r9, r8
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	ea43 0308 	orr.w	r3, r3, r8
 8006678:	f040 0001 	orr.w	r0, r0, #1
 800667c:	f8c9 3004 	str.w	r3, [r9, #4]
 8006680:	6048      	str	r0, [r1, #4]
 8006682:	6853      	ldr	r3, [r2, #4]
 8006684:	f043 0301 	orr.w	r3, r3, #1
 8006688:	6053      	str	r3, [r2, #4]
 800668a:	3108      	adds	r1, #8
 800668c:	4650      	mov	r0, sl
 800668e:	f7fe fdb1 	bl	80051f4 <_free_r>
 8006692:	4650      	mov	r0, sl
 8006694:	f7ff f92e 	bl	80058f4 <__malloc_unlock>
 8006698:	f109 0708 	add.w	r7, r9, #8
 800669c:	e79d      	b.n	80065da <_realloc_r+0x42>
 800669e:	2300      	movs	r3, #0
 80066a0:	4619      	mov	r1, r3
 80066a2:	07e8      	lsls	r0, r5, #31
 80066a4:	f100 8084 	bmi.w	80067b0 <_realloc_r+0x218>
 80066a8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80066ac:	eba9 0505 	sub.w	r5, r9, r5
 80066b0:	6868      	ldr	r0, [r5, #4]
 80066b2:	f020 0003 	bic.w	r0, r0, #3
 80066b6:	4430      	add	r0, r6
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d076      	beq.n	80067aa <_realloc_r+0x212>
 80066bc:	4571      	cmp	r1, lr
 80066be:	d150      	bne.n	8006762 <_realloc_r+0x1ca>
 80066c0:	4403      	add	r3, r0
 80066c2:	f108 0110 	add.w	r1, r8, #16
 80066c6:	428b      	cmp	r3, r1
 80066c8:	db6f      	blt.n	80067aa <_realloc_r+0x212>
 80066ca:	462f      	mov	r7, r5
 80066cc:	68ea      	ldr	r2, [r5, #12]
 80066ce:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80066d2:	60ca      	str	r2, [r1, #12]
 80066d4:	6091      	str	r1, [r2, #8]
 80066d6:	1f32      	subs	r2, r6, #4
 80066d8:	2a24      	cmp	r2, #36	; 0x24
 80066da:	d83b      	bhi.n	8006754 <_realloc_r+0x1bc>
 80066dc:	2a13      	cmp	r2, #19
 80066de:	d936      	bls.n	800674e <_realloc_r+0x1b6>
 80066e0:	6821      	ldr	r1, [r4, #0]
 80066e2:	60a9      	str	r1, [r5, #8]
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	60e9      	str	r1, [r5, #12]
 80066e8:	2a1b      	cmp	r2, #27
 80066ea:	d81c      	bhi.n	8006726 <_realloc_r+0x18e>
 80066ec:	f105 0210 	add.w	r2, r5, #16
 80066f0:	f104 0108 	add.w	r1, r4, #8
 80066f4:	6808      	ldr	r0, [r1, #0]
 80066f6:	6010      	str	r0, [r2, #0]
 80066f8:	6848      	ldr	r0, [r1, #4]
 80066fa:	6050      	str	r0, [r2, #4]
 80066fc:	6889      	ldr	r1, [r1, #8]
 80066fe:	6091      	str	r1, [r2, #8]
 8006700:	eb05 0208 	add.w	r2, r5, r8
 8006704:	eba3 0308 	sub.w	r3, r3, r8
 8006708:	f043 0301 	orr.w	r3, r3, #1
 800670c:	f8cb 2008 	str.w	r2, [fp, #8]
 8006710:	6053      	str	r3, [r2, #4]
 8006712:	686b      	ldr	r3, [r5, #4]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	ea43 0308 	orr.w	r3, r3, r8
 800671c:	606b      	str	r3, [r5, #4]
 800671e:	4650      	mov	r0, sl
 8006720:	f7ff f8e8 	bl	80058f4 <__malloc_unlock>
 8006724:	e759      	b.n	80065da <_realloc_r+0x42>
 8006726:	68a1      	ldr	r1, [r4, #8]
 8006728:	6129      	str	r1, [r5, #16]
 800672a:	68e1      	ldr	r1, [r4, #12]
 800672c:	6169      	str	r1, [r5, #20]
 800672e:	2a24      	cmp	r2, #36	; 0x24
 8006730:	bf01      	itttt	eq
 8006732:	6922      	ldreq	r2, [r4, #16]
 8006734:	61aa      	streq	r2, [r5, #24]
 8006736:	6960      	ldreq	r0, [r4, #20]
 8006738:	61e8      	streq	r0, [r5, #28]
 800673a:	bf19      	ittee	ne
 800673c:	f105 0218 	addne.w	r2, r5, #24
 8006740:	f104 0110 	addne.w	r1, r4, #16
 8006744:	f105 0220 	addeq.w	r2, r5, #32
 8006748:	f104 0118 	addeq.w	r1, r4, #24
 800674c:	e7d2      	b.n	80066f4 <_realloc_r+0x15c>
 800674e:	463a      	mov	r2, r7
 8006750:	4621      	mov	r1, r4
 8006752:	e7cf      	b.n	80066f4 <_realloc_r+0x15c>
 8006754:	4621      	mov	r1, r4
 8006756:	4638      	mov	r0, r7
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	f7ff fef1 	bl	8006540 <memmove>
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	e7ce      	b.n	8006700 <_realloc_r+0x168>
 8006762:	18c7      	adds	r7, r0, r3
 8006764:	45b8      	cmp	r8, r7
 8006766:	dc20      	bgt.n	80067aa <_realloc_r+0x212>
 8006768:	68cb      	ldr	r3, [r1, #12]
 800676a:	688a      	ldr	r2, [r1, #8]
 800676c:	60d3      	str	r3, [r2, #12]
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	4628      	mov	r0, r5
 8006772:	68eb      	ldr	r3, [r5, #12]
 8006774:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006778:	60d3      	str	r3, [r2, #12]
 800677a:	609a      	str	r2, [r3, #8]
 800677c:	1f32      	subs	r2, r6, #4
 800677e:	2a24      	cmp	r2, #36	; 0x24
 8006780:	d842      	bhi.n	8006808 <_realloc_r+0x270>
 8006782:	2a13      	cmp	r2, #19
 8006784:	d93e      	bls.n	8006804 <_realloc_r+0x26c>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	60ab      	str	r3, [r5, #8]
 800678a:	6863      	ldr	r3, [r4, #4]
 800678c:	60eb      	str	r3, [r5, #12]
 800678e:	2a1b      	cmp	r2, #27
 8006790:	d824      	bhi.n	80067dc <_realloc_r+0x244>
 8006792:	f105 0010 	add.w	r0, r5, #16
 8006796:	f104 0308 	add.w	r3, r4, #8
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	6002      	str	r2, [r0, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	6042      	str	r2, [r0, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	6083      	str	r3, [r0, #8]
 80067a6:	46a9      	mov	r9, r5
 80067a8:	e757      	b.n	800665a <_realloc_r+0xc2>
 80067aa:	4580      	cmp	r8, r0
 80067ac:	4607      	mov	r7, r0
 80067ae:	dddf      	ble.n	8006770 <_realloc_r+0x1d8>
 80067b0:	4611      	mov	r1, r2
 80067b2:	4650      	mov	r0, sl
 80067b4:	f7fe fe7e 	bl	80054b4 <_malloc_r>
 80067b8:	4607      	mov	r7, r0
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0af      	beq.n	800671e <_realloc_r+0x186>
 80067be:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	f1a0 0208 	sub.w	r2, r0, #8
 80067ca:	444b      	add	r3, r9
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d11f      	bne.n	8006810 <_realloc_r+0x278>
 80067d0:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80067d4:	f027 0703 	bic.w	r7, r7, #3
 80067d8:	4437      	add	r7, r6
 80067da:	e73e      	b.n	800665a <_realloc_r+0xc2>
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	612b      	str	r3, [r5, #16]
 80067e0:	68e3      	ldr	r3, [r4, #12]
 80067e2:	616b      	str	r3, [r5, #20]
 80067e4:	2a24      	cmp	r2, #36	; 0x24
 80067e6:	bf01      	itttt	eq
 80067e8:	6923      	ldreq	r3, [r4, #16]
 80067ea:	61ab      	streq	r3, [r5, #24]
 80067ec:	6962      	ldreq	r2, [r4, #20]
 80067ee:	61ea      	streq	r2, [r5, #28]
 80067f0:	bf19      	ittee	ne
 80067f2:	f105 0018 	addne.w	r0, r5, #24
 80067f6:	f104 0310 	addne.w	r3, r4, #16
 80067fa:	f105 0020 	addeq.w	r0, r5, #32
 80067fe:	f104 0318 	addeq.w	r3, r4, #24
 8006802:	e7ca      	b.n	800679a <_realloc_r+0x202>
 8006804:	4623      	mov	r3, r4
 8006806:	e7c8      	b.n	800679a <_realloc_r+0x202>
 8006808:	4621      	mov	r1, r4
 800680a:	f7ff fe99 	bl	8006540 <memmove>
 800680e:	e7ca      	b.n	80067a6 <_realloc_r+0x20e>
 8006810:	1f32      	subs	r2, r6, #4
 8006812:	2a24      	cmp	r2, #36	; 0x24
 8006814:	d82d      	bhi.n	8006872 <_realloc_r+0x2da>
 8006816:	2a13      	cmp	r2, #19
 8006818:	d928      	bls.n	800686c <_realloc_r+0x2d4>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	6003      	str	r3, [r0, #0]
 800681e:	6863      	ldr	r3, [r4, #4]
 8006820:	6043      	str	r3, [r0, #4]
 8006822:	2a1b      	cmp	r2, #27
 8006824:	d80e      	bhi.n	8006844 <_realloc_r+0x2ac>
 8006826:	f100 0308 	add.w	r3, r0, #8
 800682a:	f104 0208 	add.w	r2, r4, #8
 800682e:	6811      	ldr	r1, [r2, #0]
 8006830:	6019      	str	r1, [r3, #0]
 8006832:	6851      	ldr	r1, [r2, #4]
 8006834:	6059      	str	r1, [r3, #4]
 8006836:	6892      	ldr	r2, [r2, #8]
 8006838:	609a      	str	r2, [r3, #8]
 800683a:	4621      	mov	r1, r4
 800683c:	4650      	mov	r0, sl
 800683e:	f7fe fcd9 	bl	80051f4 <_free_r>
 8006842:	e76c      	b.n	800671e <_realloc_r+0x186>
 8006844:	68a3      	ldr	r3, [r4, #8]
 8006846:	6083      	str	r3, [r0, #8]
 8006848:	68e3      	ldr	r3, [r4, #12]
 800684a:	60c3      	str	r3, [r0, #12]
 800684c:	2a24      	cmp	r2, #36	; 0x24
 800684e:	bf01      	itttt	eq
 8006850:	6923      	ldreq	r3, [r4, #16]
 8006852:	6103      	streq	r3, [r0, #16]
 8006854:	6961      	ldreq	r1, [r4, #20]
 8006856:	6141      	streq	r1, [r0, #20]
 8006858:	bf19      	ittee	ne
 800685a:	f100 0310 	addne.w	r3, r0, #16
 800685e:	f104 0210 	addne.w	r2, r4, #16
 8006862:	f100 0318 	addeq.w	r3, r0, #24
 8006866:	f104 0218 	addeq.w	r2, r4, #24
 800686a:	e7e0      	b.n	800682e <_realloc_r+0x296>
 800686c:	4603      	mov	r3, r0
 800686e:	4622      	mov	r2, r4
 8006870:	e7dd      	b.n	800682e <_realloc_r+0x296>
 8006872:	4621      	mov	r1, r4
 8006874:	f7ff fe64 	bl	8006540 <memmove>
 8006878:	e7df      	b.n	800683a <_realloc_r+0x2a2>
 800687a:	4637      	mov	r7, r6
 800687c:	e6ed      	b.n	800665a <_realloc_r+0xc2>
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	431f      	orrs	r7, r3
 8006884:	f8c9 7004 	str.w	r7, [r9, #4]
 8006888:	6853      	ldr	r3, [r2, #4]
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	6053      	str	r3, [r2, #4]
 8006890:	e6ff      	b.n	8006692 <_realloc_r+0xfa>
 8006892:	bf00      	nop
 8006894:	20000100 	.word	0x20000100

08006898 <__swbuf_r>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	460e      	mov	r6, r1
 800689c:	4614      	mov	r4, r2
 800689e:	4605      	mov	r5, r0
 80068a0:	b118      	cbz	r0, 80068aa <__swbuf_r+0x12>
 80068a2:	6983      	ldr	r3, [r0, #24]
 80068a4:	b90b      	cbnz	r3, 80068aa <__swbuf_r+0x12>
 80068a6:	f7fe fbcf 	bl	8005048 <__sinit>
 80068aa:	4b27      	ldr	r3, [pc, #156]	; (8006948 <__swbuf_r+0xb0>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d12f      	bne.n	8006910 <__swbuf_r+0x78>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	69a3      	ldr	r3, [r4, #24]
 80068b4:	60a3      	str	r3, [r4, #8]
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	0719      	lsls	r1, r3, #28
 80068ba:	d533      	bpl.n	8006924 <__swbuf_r+0x8c>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d030      	beq.n	8006924 <__swbuf_r+0x8c>
 80068c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c6:	b2f6      	uxtb	r6, r6
 80068c8:	049a      	lsls	r2, r3, #18
 80068ca:	4637      	mov	r7, r6
 80068cc:	d534      	bpl.n	8006938 <__swbuf_r+0xa0>
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	6820      	ldr	r0, [r4, #0]
 80068d2:	1ac0      	subs	r0, r0, r3
 80068d4:	6963      	ldr	r3, [r4, #20]
 80068d6:	4298      	cmp	r0, r3
 80068d8:	db04      	blt.n	80068e4 <__swbuf_r+0x4c>
 80068da:	4621      	mov	r1, r4
 80068dc:	4628      	mov	r0, r5
 80068de:	f7fe fb1f 	bl	8004f20 <_fflush_r>
 80068e2:	bb28      	cbnz	r0, 8006930 <__swbuf_r+0x98>
 80068e4:	68a3      	ldr	r3, [r4, #8]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	60a3      	str	r3, [r4, #8]
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	1c5a      	adds	r2, r3, #1
 80068ee:	6022      	str	r2, [r4, #0]
 80068f0:	701e      	strb	r6, [r3, #0]
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	3001      	adds	r0, #1
 80068f6:	4298      	cmp	r0, r3
 80068f8:	d004      	beq.n	8006904 <__swbuf_r+0x6c>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	07db      	lsls	r3, r3, #31
 80068fe:	d519      	bpl.n	8006934 <__swbuf_r+0x9c>
 8006900:	2e0a      	cmp	r6, #10
 8006902:	d117      	bne.n	8006934 <__swbuf_r+0x9c>
 8006904:	4621      	mov	r1, r4
 8006906:	4628      	mov	r0, r5
 8006908:	f7fe fb0a 	bl	8004f20 <_fflush_r>
 800690c:	b190      	cbz	r0, 8006934 <__swbuf_r+0x9c>
 800690e:	e00f      	b.n	8006930 <__swbuf_r+0x98>
 8006910:	4b0e      	ldr	r3, [pc, #56]	; (800694c <__swbuf_r+0xb4>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <__swbuf_r+0x82>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7cb      	b.n	80068b2 <__swbuf_r+0x1a>
 800691a:	4b0d      	ldr	r3, [pc, #52]	; (8006950 <__swbuf_r+0xb8>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7c6      	b.n	80068b2 <__swbuf_r+0x1a>
 8006924:	4621      	mov	r1, r4
 8006926:	4628      	mov	r0, r5
 8006928:	f7fd fb9e 	bl	8004068 <__swsetup_r>
 800692c:	2800      	cmp	r0, #0
 800692e:	d0c8      	beq.n	80068c2 <__swbuf_r+0x2a>
 8006930:	f04f 37ff 	mov.w	r7, #4294967295
 8006934:	4638      	mov	r0, r7
 8006936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006938:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800693c:	81a3      	strh	r3, [r4, #12]
 800693e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006944:	6663      	str	r3, [r4, #100]	; 0x64
 8006946:	e7c2      	b.n	80068ce <__swbuf_r+0x36>
 8006948:	08006ac4 	.word	0x08006ac4
 800694c:	08006ae4 	.word	0x08006ae4
 8006950:	08006aa4 	.word	0x08006aa4

08006954 <_wcrtomb_r>:
 8006954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006956:	4605      	mov	r5, r0
 8006958:	b085      	sub	sp, #20
 800695a:	461e      	mov	r6, r3
 800695c:	460f      	mov	r7, r1
 800695e:	4c0f      	ldr	r4, [pc, #60]	; (800699c <_wcrtomb_r+0x48>)
 8006960:	b991      	cbnz	r1, 8006988 <_wcrtomb_r+0x34>
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	490e      	ldr	r1, [pc, #56]	; (80069a0 <_wcrtomb_r+0x4c>)
 8006966:	6a12      	ldr	r2, [r2, #32]
 8006968:	2a00      	cmp	r2, #0
 800696a:	bf08      	it	eq
 800696c:	460a      	moveq	r2, r1
 800696e:	a901      	add	r1, sp, #4
 8006970:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8006974:	463a      	mov	r2, r7
 8006976:	47a0      	blx	r4
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	bf01      	itttt	eq
 800697c:	2300      	moveq	r3, #0
 800697e:	6033      	streq	r3, [r6, #0]
 8006980:	238a      	moveq	r3, #138	; 0x8a
 8006982:	602b      	streq	r3, [r5, #0]
 8006984:	b005      	add	sp, #20
 8006986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006988:	6824      	ldr	r4, [r4, #0]
 800698a:	4f05      	ldr	r7, [pc, #20]	; (80069a0 <_wcrtomb_r+0x4c>)
 800698c:	6a24      	ldr	r4, [r4, #32]
 800698e:	2c00      	cmp	r4, #0
 8006990:	bf08      	it	eq
 8006992:	463c      	moveq	r4, r7
 8006994:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8006998:	e7ed      	b.n	8006976 <_wcrtomb_r+0x22>
 800699a:	bf00      	nop
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	20000510 	.word	0x20000510

080069a4 <__ascii_wctomb>:
 80069a4:	b149      	cbz	r1, 80069ba <__ascii_wctomb+0x16>
 80069a6:	2aff      	cmp	r2, #255	; 0xff
 80069a8:	bf85      	ittet	hi
 80069aa:	238a      	movhi	r3, #138	; 0x8a
 80069ac:	6003      	strhi	r3, [r0, #0]
 80069ae:	700a      	strbls	r2, [r1, #0]
 80069b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80069b4:	bf98      	it	ls
 80069b6:	2001      	movls	r0, #1
 80069b8:	4770      	bx	lr
 80069ba:	4608      	mov	r0, r1
 80069bc:	4770      	bx	lr
	...

080069c0 <_init>:
 80069c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069c2:	bf00      	nop
 80069c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069c6:	bc08      	pop	{r3}
 80069c8:	469e      	mov	lr, r3
 80069ca:	4770      	bx	lr

080069cc <_fini>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr
